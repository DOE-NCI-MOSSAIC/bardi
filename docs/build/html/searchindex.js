Search.setIndex({"docnames": ["_autosummary/bardi", "advanced", "bardi", "bardi.data", "bardi.nlp_engineering", "basic", "index", "installation"], "filenames": ["_autosummary/bardi.rst", "advanced.rst", "bardi.rst", "bardi.data.rst", "bardi.nlp_engineering.rst", "basic.rst", "index.rst", "installation.rst"], "titles": ["bardi", "Advanced Package Usage", "bardi.pipeline", "bardi.data package", "bardi.nlp_engineering package", "Basic Package Usage", "Welcome to bardi\u2019s documentation!", "Installation"], "terms": {"document": [1, 3, 5], "refer": [1, 3, 5], "bardi": [1, 7], "nlp_engin": [1, 5, 6], "cpunorm": [1, 4, 5], "regex_librari": [1, 4, 5], "pathology_report": [1, 4, 5], "pathologyreportregexset": [1, 4, 5], "The": [1, 3, 4, 5], "need": [1, 2, 4, 5], "regular": [1, 4, 5], "express": [1, 4, 5], "set": [1, 2, 3, 6], "regex_set": [1, 5, 6], "appli": [1, 4, 5], "text": [1, 4, 5], "A": [1, 2, 3, 4, 5], "i": [1, 2, 3, 4, 5, 6], "just": [1, 4, 5], "python": 1, "list": [1, 2, 3, 4, 5], "dictionari": [1, 2, 4], "contain": [1, 3, 4], "kei": [1, 2, 4, 5], "regex_str": [1, 4, 5], "substitut": [1, 4, 5], "string": [1, 4], "sub_str": [1, 4, 5], "There": [1, 5], "ar": [1, 2, 3, 4, 5], "few": 1, "method": [1, 2, 4, 5], "you": [1, 3, 4, 5], "can": [1, 2, 3, 4, 5], "us": [1, 2, 3, 4, 5], "what": 1, "your": [1, 5], "tune": 1, "provid": [1, 2, 5, 6], "regexset": [1, 4], "an": [1, 3, 4, 6], "exist": [1, 2, 3, 4], "tunabl": 1, "turn": 1, "individu": [1, 5], "off": 1, "desir": [1, 2, 4, 5], "By": [1, 4], "default": [1, 2, 4], "all": [1, 3, 4, 5], "so": [1, 4, 5], "would": [1, 4, 5], "ones": 1, "don": [1, 5], "t": [1, 4, 5], "want": [1, 3, 4, 5], "from": [1, 2, 3, 4, 5], "import": [1, 5], "grab": [1, 5], "pre": [1, 2, 4, 6], "made": [1, 4, 5], "regex": [1, 5, 6], "pathologi": [1, 4, 5], "report": [1, 4, 5], "3": [1, 4, 5], "path_report_regex_set": [1, 5], "get_regex_set": [1, 4, 5], "remove_dimens": [1, 4], "fals": [1, 2, 4, 5], "remove_specimen": [1, 4], "remove_decimal_seg_numb": [1, 4], "built": [1, 5], "type": [1, 2, 3, 4], "write": [1, 2, 3, 4], "noth": [1, 5], "stop": 1, "own": 1, "custom_regex_set": 1, "": [1, 2, 3, 4, 5], "http": [1, 4, 5], "urltoken": [1, 4, 5], "suppli": [1, 3, 4, 5], "add_step": [1, 2, 5], "field": [1, 4, 5], "lowercas": [1, 4, 5], "true": [1, 2, 4, 5], "class": [1, 2, 3, 4, 5], "howev": [1, 5], "like": [1, 4], "more": [1, 5], "organ": [1, 2], "approach": 1, "than": [1, 4], "shown": 1, "abov": [1, 5], "handl": [1, 3, 4, 5], "could": [1, 5], "follow": [1, 4, 5], "our": [1, 6], "lead": [1, 4], "new": [1, 2, 4], "inherit": 1, "give": 1, "attribut": [1, 2, 3, 4], "which": [1, 3, 4], "pair": [1, 3, 4], "return": [1, 2, 3, 4], "thi": [1, 2, 3, 4, 5], "mycustomregexset": 1, "def": 1, "__init__": 1, "self": 1, "handle_whitespac": [1, 4], "bool": [1, 2, 3, 4], "convert_url": 1, "append": 1, "we": [1, 5], "have": [1, 4, 5], "some": [1, 2, 5], "out": [1, 5], "box": 1, "hope": 1, "continu": [1, 5], "ad": [1, 2, 6], "help": [1, 4], "expect": [1, 2, 4], "everi": 1, "possibl": [1, 3, 5], "data": [1, 2, 4, 6], "process": [1, 2, 4, 6], "action": 1, "ever": 1, "someth": [1, 4], "guidelin": 1, "run": [1, 2, 4, 6], "within": [1, 4, 5], "alongsid": 1, "ani": [1, 2, 4, 5], "metadata": [1, 6], "captur": 1, "standard": [1, 4], "file": [1, 2, 3, 4, 5], "defin": [2, 4], "framework": [2, 5, 6], "step": [2, 5, 6], "datawriteconfig": [2, 4, 6], "sourc": [2, 3, 4], "base": [2, 3, 4], "typeddict": [2, 4], "data_format": [2, 5], "str": [2, 3, 4, 5], "data_format_arg": [2, 5], "dict": [2, 3, 4], "none": [2, 3, 4, 5], "dataset": [2, 3, 4, 6], "write_path": [2, 4], "write_output": [2, 5], "liter": 2, "output": [2, 4], "debug": 2, "data_write_config": 2, "data_filenam": 2, "bardi_processed_data": 2, "object": [2, 3, 4, 5], "oper": [2, 3, 4, 5], "add": [2, 4, 5], "execut": 2, "also": [2, 3, 4, 5], "overwrit": [2, 4], "configur": [2, 4], "consist": [2, 4], "paramet": [2, 3, 4], "get_paramet": [2, 3, 4, 5], "condens": 2, "each": [2, 4], "If": [2, 3, 4, 5], "exclud": [2, 4], "run_pipelin": [2, 5], "call": 2, "respect": [2, 4], "blueprint": [2, 4], "creat": [2, 3, 4, 5, 6], "implement": [2, 4, 5], "custom": [2, 3, 4, 5, 6], "remov": [2, 4], "larg": [2, 4], "item": 2, "copi": 2, "abstract": [2, 4, 5, 6], "tabl": [2, 3, 4, 5], "artifact": [2, 4, 5], "tupl": [2, 4], "pyarrow": [2, 3, 4, 5], "receiv": [2, 4], "preced": 2, "ignor": [2, 4], "valu": [2, 3, 4], "perform": [2, 3, 4, 5], "transform": 2, "replac": [2, 4], "processed_data": [2, 5], "besid": 2, "correspond": [2, 4], "name": [2, 3, 4, 5], "being": [2, 5], "union": [2, 3, 4], "pa": [2, 4, 5], "set_write_config": [2, 4], "data_config": [2, 4], "e": [2, 4], "parquet": [2, 3, 5], "csv": [2, 3], "etc": [2, 4], "particular": [2, 4], "avail": [2, 3, 4, 5], "api": [2, 3], "write_artifact": [2, 4], "sinc": [2, 5], "onli": [2, 3, 4, 5, 7], "requir": [2, 4, 5], "behavior": [2, 5], "pass": [2, 3, 4], "specif": [2, 3, 4], "produc": [2, 4, 5], "directori": [2, 4], "where": [2, 3, 4, 5], "should": [2, 4], "written": [2, 3, 4], "write_data": 2, "reus": 2, "pattern": [2, 4, 5], "handler": [2, 3], "filetyp": [2, 3], "extens": 2, "definit": 3, "function": [3, 5], "load": [3, 4, 5], "variou": 3, "form": [3, 4], "column": [3, 4, 5], "row": 3, "under": 3, "hood": 3, "modern": 3, "effici": 3, "start": [3, 4], "point": 3, "both": [3, 6], "cpu": [3, 4], "gpu": 3, "workflow": [3, 5, 6], "origin_queri": [3, 5], "sql": 3, "wa": [3, 4], "queri": 3, "record": [3, 4, 5], "here": [3, 4, 5], "reproduc": [3, 4, 5, 6], "proven": 3, "origin_file_path": 3, "filepath": 3, "origin_format": [3, 5], "format": [3, 4], "origin_row_count": [3, 5], "total": [3, 4, 5], "count": [3, 5], "origin": [3, 4], "int": [3, 4, 5], "from_duckdb": [3, 6], "path": [3, 4], "min_batch": 3, "duckdb": 3, "databas": 3, "valid": 3, "adher": 3, "syntax": 3, "integ": [3, 4], "number": [3, 4], "split": [3, 4, 5], "amount": 3, "smaller": [3, 4], "distribut": [3, 4], "worker": 3, "node": 3, "probabl": 3, "align": [3, 5], "referenc": [3, 4], "after": [3, 4], "convers": 3, "from_fil": [3, 6], "arg": [3, 4], "kwarg": [3, 4], "accept": 3, "ipc": 3, "arrow": 3, "feather": 3, "orc": 3, "util": 3, "read": 3, "thu": 3, "keyword": 3, "argument": 3, "its": [3, 4], "singl": [3, 4, 5], "current": [3, 4, 7], "support": [3, 4, 7], "comput": [3, 4, 5], "environ": 3, "rais": [3, 4], "valueerror": 3, "doe": [3, 4, 5], "from_json": [3, 6], "json_data": 3, "json": [3, 5], "becom": 3, "from_panda": [3, 5, 6], "df": [3, 5], "datafram": [3, 5], "panda": [3, 5], "intend": [3, 4], "pipelin": [3, 4, 6], "flag": 3, "prompt": 3, "chunk": 3, "prepar": [3, 6], "later": 3, "direct": [3, 4], "futur": 3, "manner": 3, "from_pyarrow": [3, 6], "to_panda": [3, 5, 6], "convert": [3, 4, 5], "same": [3, 4], "input": [3, 4], "to_polar": [3, 6], "polar": 3, "write_fil": [3, 6], "subset": 3, "present": [3, 4, 5], "addit": [3, 4, 5], "filesystem": 3, "npy": [3, 5], "clean": [4, 5], "regexsubpair": 4, "dure": 4, "option": 4, "least": 4, "one": [4, 5], "large_str": 4, "must": 4, "correctli": 4, "empti": 4, "avoid": 4, "instanti": 4, "instead": 4, "child": 4, "depend": 4, "hardwar": 4, "token": [4, 5], "simpl": [4, 5], "cpupretoken": [4, 5], "pretoken": [4, 6], "break": 4, "down": 4, "unit": 4, "befor": 4, "further": [4, 5], "split_pattern": [4, 5], "charact": 4, "divid": 4, "segment": 4, "done": 4, "space": 4, "first": 4, "posit": [4, 5], "second": 4, "No": [4, 5], "train": [4, 5, 6], "word2vec": [4, 5], "model": [4, 5, 6], "vocab": [4, 5], "word": [4, 5], "embed": [4, 5], "cpuembeddinggener": [4, 5], "embeddinggener": [4, 6], "gener": [4, 5], "interfac": 4, "vector": 4, "represent": 4, "gensim": [4, 5], "consid": 4, "load_saved_model": 4, "checkpoint_path": 4, "checkpoint": 4, "core": [4, 5], "min_word_count": [4, 5], "frequenc": 4, "lower": 4, "window": [4, 5], "maximum": 4, "distanc": 4, "between": 4, "predict": 4, "vector_s": [4, 5], "size": 4, "sampl": [4, 6], "threshold": 4, "high": 4, "randomli": 4, "downsampl": 4, "rang": 4, "0": [4, 5], "1e": 4, "5": [4, 5], "float": 4, "min_alpha": [4, 5], "learn": [4, 6], "rate": 4, "linearli": 4, "drop": 4, "progress": 4, "neg": [4, 5], "epoch": [4, 5], "iter": 4, "seed": [4, 5], "random": 4, "For": [4, 5], "determinist": 4, "thread": 4, "1": [4, 5], "aka": [4, 5], "pythonhashse": 4, "vocab_exclude_list": [4, 5], "mai": [4, 5], "retriev": 4, "consum": 4, "embedding_matrix": [4, 5], "id_to_token": [4, 5], "10": [4, 5], "300": [4, 5], "6e": [4, 5], "05": [4, 5], "007": [4, 5], "20": [4, 5], "30": [4, 5], "42": [4, 5], "whether": 4, "save": [4, 5], "sentenc": 4, "dimension": 4, "higher": 4, "specifi": [4, 5], "how": [4, 5], "mani": [4, 5], "nois": 4, "drawn": 4, "over": 4, "corpu": 4, "forc": [4, 5], "vocabulari": 4, "artifacts_config": 4, "embeddinggeneratorartifactswriteconfig": 4, "indic": [4, 5], "config": 4, "embedding_matrix_format": [4, 5], "embedding_matrix_format_arg": [4, 5], "vocab_format": [4, 5], "vocab_format_arg": [4, 5], "map": [4, 5], "cpupostprocessor": [4, 5], "postprocessor": [4, 6], "post": [4, 5], "processor": [4, 5], "field_renam": [4, 5], "abil": 4, "renam": [4, 5], "id": 4, "construct": 4, "altern": 4, "flexibl": 4, "versu": 4, "concat_field": 4, "concaten": 4, "left": 4, "separ": 4, "retriv": 4, "reli": 4, "multipl": [4, 5], "wai": [4, 5], "creation": [4, 5], "wasn": 4, "through": 4, "final": [4, 5], "element": 4, "hold": 4, "attributeerror": 4, "either": 4, "typeerror": 4, "encod": 4, "label": [4, 5], "numer": 4, "cpulabelprocessor": [4, 5], "labelprocessor": [4, 6], "uniqu": [4, 5], "id_to_label": [4, 5], "revers": 4, "Of": 4, "downstream": 4, "back": 4, "becaus": [4, 5], "notimplementederror": 4, "other": 4, "labelprocessorartifactswriteconfig": 4, "id_to_label_arg": 4, "id_to_label_format": [4, 5], "test": [4, 5], "val": [4, 5], "cpusplitt": 4, "assign": 4, "two": 4, "scratch": 4, "previous": 4, "when": [4, 5], "comparison": 4, "ensur": [4, 5], "exactli": 4, "To": 4, "appropri": 4, "namedtupl": 4, "split_method": 4, "newsplit": [4, 5], "split_proport": 4, "75": 4, "15": [4, 5], "unique_record_col": 4, "document_id": 4, "group_col": 4, "patient_id_numb": [4, 5], "registri": 4, "labels_col": 4, "random_se": 4, "mapsplit": 4, "differ": 4, "upon": 4, "split_typ": 4, "combin": 4, "identifi": 4, "oftentim": 4, "note": [4, 5], "program": 4, "crash": 4, "split_map": 4, "hash": 4, "repres": 4, "pseudocod": 4, "concat": 4, "fold1": 4, "fold2": 4, "fold3": 4, "proport": 4, "25": [4, 5], "fold4": 4, "num_split": 4, "group": 4, "keep": [4, 5], "discret": 4, "x": [4, 5], "had": [4, 5], "medic": 4, "patient": [4, 5], "end": [4, 5], "up": [4, 5], "prevent": [4, 5], "potenti": 4, "inform": 4, "leakag": 4, "In": [4, 5], "case": [4, 5], "patient_id": 4, "label_col": 4, "effort": 4, "balanc": 4, "across": 4, "guarante": 4, "prefer": 4, "try": 4, "includ": 4, "line": [4, 7], "domain": 4, "order": [4, 5], "exampl": [4, 5], "sub": 4, "r": [4, 5], "whitespac": 4, "match": 4, "curat": 4, "convert_escape_cod": 4, "remove_url": 4, "remove_special_punct": 4, "remove_multiple_punct": 4, "handle_angle_bracket": 4, "replace_percent_sign": 4, "handle_leading_digit_punct": 4, "remove_leading_punct": 4, "remove_trailing_punct": 4, "handle_words_with_punct_spac": 4, "handle_math_spac": 4, "handle_dimension_spac": 4, "handle_measure_spac": 4, "handle_cassettes_spac": 4, "handle_dash_digit_spac": 4, "handle_literals_floats_spac": 4, "fix_plur": 4, "handle_digits_words_spac": 4, "remove_phone_numb": 4, "remove_d": 4, "remove_tim": 4, "remove_address": 4, "remove_large_digits_seq": 4, "remove_large_floats_seq": 4, "trunc_decim": 4, "remove_cassette_nam": 4, "remove_duration_tim": 4, "remove_letter_num_seq": 4, "regex_lib": 4, "get_address_regex": 4, "address": 4, "num": 4, "street": 4, "6": [4, 5], "2": [4, 5], "letter": 4, "state": 4, "short": 4, "long": 4, "zip": 4, "code": [4, 5], "param": 4, "1034": 4, "north": 4, "500": 4, "west": 4, "provo": 4, "ut": 4, "84604": 4, "3337": 4, "addresstoken": [4, 5], "get_angle_brackets_regex": 4, "content": 4, "angl": 4, "bracket": 4, "fix": 4, "But": 4, "90": 4, "get_cassette_name_regex": 4, "cassett": 4, "mark": 4, "block": 4, "cassettetoken": [4, 5], "get_cassettes_spacing_regex": 4, "5e": 4, "6f": 4, "around": 4, "them": [4, 5], "g": 4, "3e": 4, "3f": 4, "get_dash_digits_spacing_regex": 4, "dash": 4, "digit": 4, "right": 4, "cm": 4, "9": [4, 5], "7": [4, 5], "get_dates_regex": 4, "date": [4, 5], "co": 4, "03": [4, 5], "09": 4, "2021": 4, "1015": 4, "complet": 4, "21": [4, 5], "34": [4, 5], "datetoken": [4, 5], "get_decimal_segmented_numbers_regex": 4, "period": 4, "78": 4, "87": 4, "decimalsegmentednumbertoken": [4, 5], "get_digits_words_spacing_regex": 4, "attach": 4, "begin": 4, "9837648admiss": 4, "9837648": 4, "admiss": 4, "get_dimension_spacing_regex": 4, "measur": 4, "3x0": 4, "7x0": 4, "get_dimensions_regex": 4, "2d": 4, "3d": 4, "dimens": 4, "33": [4, 5], "dimensiontoken": [4, 5], "get_duration_regex": 4, "durat": 4, "specimen": 4, "treat": 4, "32d0909091": 4, "durationtoken": [4, 5], "get_escape_code_regex": 4, "escap": 4, "x0d": 4, "x0a": 4, "codesx0dx0ax0d": 4, "r30": 4, "get_fix_pluralization_regex": 4, "restor": 4, "plural": 4, "noun": 4, "demag": 4, "punctuat": 4, "get_large_digits_seq_regex": 4, "sequenc": 4, "456123456": 4, "digitsequencetoken": [4, 5], "get_large_float_seq_regex": 4, "456": 4, "123456": 4, "783": 4, "largefloattoken": [4, 5], "get_leading_digit_punctuation_regex": 4, "proce": 4, "elimin": 4, "insert": 4, "13": [4, 5], "unremark": 4, "22": [4, 5], "year": 4, "get_leading_punctuation_regex": 4, "3a": 4, "anterior": 4, "result": [4, 6], "get_letter_num_seq_regex": 4, "directli": 4, "c001234567": 4, "letterdigitstoken": [4, 5], "get_literals_floats_spacing_regex": 4, "common": [4, 5], "problem": 4, "r18": 4, "0admiss": 4, "diagnosi": 4, "bi": 4, "n13": 4, "30admiss": 4, "get_math_spacing_regex": 4, "math": 4, "symbol": 4, "aroud": 4, "95": [4, 5], "8": [4, 5], "get_measure_spacing_regex": 4, "mm": 4, "ml": [4, 5], "proper": 4, "spece": 4, "11th": 4, "11": [4, 5], "th": 4, "10mm": 4, "histolog": 4, "3cm": 4, "get_multiple_punct_regex": 4, "occur": 4, "_": [4, 5], "___": 4, "signatur": 4, "get_percent_sign_regex": 4, "sign": [4, 5], "percent": [4, 5], "strong": 4, "intens": 4, "get_phone_number_regex": 4, "phone": 4, "delimet": 4, "ph": 4, "123": 4, "7890": 4, "It": [4, 5], "4567890": 4, "phonenumtoken": [4, 5], "get_spaces_regex": 4, "locat": 4, "arm": 4, "get_special_punct_regex": 4, "chosen": 4, "wt": 4, "ck": 4, "focal": 4, "sth": 4, "ab": 4, "cd": 4, "get_specimen_regex": 4, "speciman": 4, "009345": 4, "sh": 4, "0011300": 4, "expected_output": 4, "specimentoken": [4, 5], "get_time_regex": 4, "time": [4, 5], "am": 4, "30pm": 4, "52": 4, "07am": 4, "12": [4, 5], "pm": 4, "12am": 4, "timetoken": [4, 5], "get_trailing_punctuation_regex": 4, "trail": 4, "get_trunc_decimals_regex": 4, "decim": 4, "99": 4, "get_urls_regex": 4, "url": 4, "www": [4, 5], "merck": 4, "com": 4, "keytruda_pi": 4, "pdf": 4, "get_whitespace_regex": 4, "carriag": 4, "tab": 4, "invas": 4, "IN": 4, "situ": 4, "n": [4, 5], "get_words_with_punct_spacing_regex": 4, "hyphen": 4, "colon": 4, "length": 4, "d": [4, 5], "her": 4, "tiff": 4, "1k": 4, "descript": 4, "gleason": 4, "offer": 5, "sever": 5, "data_handl": [5, 6], "now": 5, "go": 5, "show": 5, "pd": 5, "notabl": 5, "chang": 5, "exhibit": 5, "increas": 5, "aggress": 5, "impuls": 5, "distinct": 5, "deviat": 5, "jedi": 5, "preliminari": 5, "examin": 5, "reveal": 5, "heighten": 5, "midichlorian": 5, "unsettl": 5, "connect": 5, "dark": 5, "side": 5, "analysi": 5, "warrant": 5, "explor": 5, "extent": 5, "exposur": 5, "sith": 5, "teach": 5, "imper": 5, "monitor": 5, "close": 5, "worsen": 5, "symptom": 5, "engag": 5, "therapeut": 5, "intervent": 5, "aim": 5, "descent": 5, "assess": 5, "crucial": 5, "determin": 5, "efficaci": 5, "strategi": 5, "overal": 5, "trajectori": 5, "dark_side_dx": 5, "succumb": 5, "stabl": 5, "commit": 5, "influenc": 5, "were": 5, "observ": 5, "check": 5, "ins": 5, "council": 5, "sustain": 5, "well": 5, "manifest": 5, "palpabl": 5, "establish": 5, "ethic": 5, "disclos": 5, "elev": 5, "unmistak": 5, "investig": 5, "ascertain": 5, "depth": 5, "doctrin": 5, "essenti": 5, "track": 5, "exacerb": 5, "advis": 5, "forestal": 5, "deeper": 5, "embrac": 5, "subsequ": 5, "evalu": 5, "pivot": 5, "gaug": 5, "effect": 5, "allegi": 5, "let": 5, "link": 5, "doesn": 5, "look": 5, "involv": 5, "splitter": [5, 6], "pleas": 5, "do": 5, "Then": 5, "pathology_regex_set": 5, "pre_token": [5, 6], "pretti": 5, "embedding_gener": [5, 6], "fair": 5, "warn": 5, "far": 5, "slowest": 5, "part": 5, "routin": 5, "account": 5, "about": 5, "control": 5, "aspect": 5, "simpli": 5, "small": 5, "post_processor": [5, 6], "work": 5, "automat": 5, "label_processor": [5, 6], "again": 5, "straight": 5, "forward": 5, "actual": 5, "too": 5, "final_data": 5, "label_map": 5, "word_embed": 5, "39": 5, "45": 5, "44": 5, "23": 5, "31": 5, "41": 5, "35": 5, "24": 5, "18": 5, "pad": 5, "4": 5, "14": 5, "16": 5, "17": 5, "19": 5, "26": 5, "27": 5, "28": 5, "29": 5, "32": 5, "36": 5, "37": 5, "38": 5, "40": 5, "43": 5, "unk": 5, "matrix": 5, "00000000e": 5, "00": 5, "77135365e": 5, "86092880e": 5, "04": 5, "89334818e": 5, "73368554e": 5, "46754061e": 5, "34021775e": 5, "38128232e": 5, "09578541e": 5, "56378723e": 5, "29070841e": 5, "36099930e": 5, "10196943e": 5, "00287900e": 5, "46343326e": 5, "30044727e": 5, "16163127e": 5, "43721746e": 5, "17491091e": 5, "52751313e": 5, "05728725e": 5, "67492444e": 5, "12162175e": 5, "62762087e": 5, "12349084e": 5, "75368562e": 5, "78313626e": 5, "81814841e": 5, "88654257e": 5, "93711794e": 5, "90082072e": 5, "particularli": 5, "revolutionari": 5, "itself": 5, "hand": 5, "deal": 5, "featur": 5, "everyth": 5, "did": 5, "below": 5, "review": 5, "print": 5, "2023": 5, "08": 5, "59": 5, "173578": 5, "_data_write_config": 5, "compress": 5, "snappi": 5, "use_dictionari": 5, "9a": 5, "fa": 5, "f": 5, "stepr": 5, "b": 5, "z": 5, "z0": 5, "cpamt": 5, "mlhc": 5, "m": 5, "jan": 5, "feb": 5, "mar": 5, "apr": 5, "jun": 5, "jul": 5, "aug": 5, "sep": 5, "oct": 5, "nov": 5, "dec": 5, "ap": 5, "_artifacts_write_config": 5, "w2v_model": 5, "vocab_s": 5, "46": 5, "unk_id": 5, "id_to_label_format_arg": 5, "008010": 5, "memori": 5, "mb": 5, "013305": 5, "000863": 5, "003406": 5, "074747": 5, "531624": 5, "003835": 5, "03622": 5, "001360": 5, "008777": 5, "088891": 5, "batch": 6, "raw": 6, "integr": 6, "build": 6, "infer": 6, "machin": 6, "instal": 6, "basic": 6, "packag": 6, "usag": 6, "regist": 6, "initi": 6, "normal": 6, "collect": 6, "full": 6, "tutori": 6, "script": 6, "advanc": 6, "modul": 6, "librari": 6, "index": 6, "At": 7, "command": 7, "pip": 7, "unix": 7, "platform": 7}, "objects": {"": [[0, 0, 0, "-", "bardi"]], "bardi.data": [[3, 0, 0, "-", "data_handlers"]], "bardi.data.data_handlers": [[3, 1, 1, "", "Dataset"], [3, 4, 1, "", "from_duckdb"], [3, 4, 1, "", "from_file"], [3, 4, 1, "", "from_json"], [3, 4, 1, "", "from_pandas"], [3, 4, 1, "", "from_pyarrow"], [3, 4, 1, "", "to_pandas"], [3, 4, 1, "", "to_polars"], [3, 4, 1, "", "write_file"]], "bardi.data.data_handlers.Dataset": [[3, 2, 1, "", "data"], [3, 3, 1, "", "get_parameters"], [3, 2, 1, "", "origin_file_path"], [3, 2, 1, "", "origin_format"], [3, 2, 1, "", "origin_query"], [3, 2, 1, "", "origin_row_count"]], "bardi.nlp_engineering": [[4, 0, 0, "-", "embedding_generator"], [4, 0, 0, "-", "label_processor"], [4, 0, 0, "-", "normalizer"], [4, 0, 0, "-", "post_processor"], [4, 0, 0, "-", "pre_tokenizer"], [4, 0, 0, "-", "splitter"]], "bardi.nlp_engineering.embedding_generator": [[4, 1, 1, "", "CPUEmbeddingGenerator"], [4, 1, 1, "", "EmbeddingGenerator"], [4, 1, 1, "", "EmbeddingGeneratorArtifactsWriteConfig"]], "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator": [[4, 2, 1, "", "checkpoint_path"], [4, 2, 1, "", "cores"], [4, 2, 1, "", "epochs"], [4, 2, 1, "", "fields"], [4, 3, 1, "", "get_parameters"], [4, 2, 1, "", "load_saved_model"], [4, 2, 1, "", "min_alpha"], [4, 2, 1, "", "min_word_count"], [4, 2, 1, "", "negative"], [4, 3, 1, "", "run"], [4, 2, 1, "", "sample"], [4, 2, 1, "", "seed"], [4, 2, 1, "", "vector_size"], [4, 2, 1, "", "vocab_exclude_list"], [4, 2, 1, "", "window"], [4, 3, 1, "", "write_artifacts"]], "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator": [[4, 2, 1, "", "checkpoint_path"], [4, 2, 1, "", "cores"], [4, 2, 1, "", "epochs"], [4, 2, 1, "", "fields"], [4, 2, 1, "", "load_saved_model"], [4, 2, 1, "", "min_alpha"], [4, 2, 1, "", "min_word_count"], [4, 2, 1, "", "negative"], [4, 3, 1, "", "run"], [4, 2, 1, "", "sample"], [4, 2, 1, "", "seed"], [4, 3, 1, "", "set_write_config"], [4, 2, 1, "", "vector_size"], [4, 2, 1, "", "vocab_exclude_list"], [4, 2, 1, "", "window"]], "bardi.nlp_engineering.embedding_generator.EmbeddingGeneratorArtifactsWriteConfig": [[4, 2, 1, "", "embedding_matrix_format"], [4, 2, 1, "", "embedding_matrix_format_args"], [4, 2, 1, "", "vocab_format"], [4, 2, 1, "", "vocab_format_args"]], "bardi.nlp_engineering.label_processor": [[4, 1, 1, "", "CPULabelProcessor"], [4, 1, 1, "", "LabelProcessor"], [4, 1, 1, "", "LabelProcessorArtifactsWriteConfig"]], "bardi.nlp_engineering.label_processor.CPULabelProcessor": [[4, 2, 1, "", "fields"], [4, 3, 1, "", "get_parameters"], [4, 2, 1, "", "id_to_label"], [4, 2, 1, "", "mapping"], [4, 2, 1, "", "method"], [4, 3, 1, "", "run"], [4, 3, 1, "", "write_artifacts"]], "bardi.nlp_engineering.label_processor.LabelProcessor": [[4, 2, 1, "", "fields"], [4, 2, 1, "", "method"], [4, 3, 1, "", "run"], [4, 3, 1, "", "set_write_config"]], "bardi.nlp_engineering.label_processor.LabelProcessorArtifactsWriteConfig": [[4, 2, 1, "", "id_to_label_args"], [4, 2, 1, "", "id_to_label_format"]], "bardi.nlp_engineering.normalizer": [[4, 1, 1, "", "CPUNormalizer"], [4, 1, 1, "", "Normalizer"]], "bardi.nlp_engineering.normalizer.CPUNormalizer": [[4, 2, 1, "", "fields"], [4, 2, 1, "", "lowercase"], [4, 2, 1, "", "regex_set"], [4, 3, 1, "", "run"]], "bardi.nlp_engineering.normalizer.Normalizer": [[4, 2, 1, "", "fields"], [4, 2, 1, "", "lowercase"], [4, 2, 1, "", "regex_set"], [4, 3, 1, "", "run"]], "bardi.nlp_engineering.post_processor": [[4, 1, 1, "", "CPUPostProcessor"], [4, 1, 1, "", "PostProcessor"]], "bardi.nlp_engineering.post_processor.CPUPostProcessor": [[4, 2, 1, "", "artifacts"], [4, 2, 1, "", "concat_fields"], [4, 2, 1, "", "data"], [4, 2, 1, "", "field_rename"], [4, 2, 1, "", "fields"], [4, 3, 1, "", "get_parameters"], [4, 2, 1, "id0", "id_to_token"], [4, 3, 1, "", "run"]], "bardi.nlp_engineering.post_processor.PostProcessor": [[4, 2, 1, "", "concat_fields"], [4, 2, 1, "", "field_rename"], [4, 2, 1, "", "fields"], [4, 2, 1, "", "id_to_token"], [4, 3, 1, "", "run"]], "bardi.nlp_engineering.pre_tokenizer": [[4, 1, 1, "", "CPUPreTokenizer"], [4, 1, 1, "", "PreTokenizer"]], "bardi.nlp_engineering.pre_tokenizer.CPUPreTokenizer": [[4, 2, 1, "", "fields"], [4, 3, 1, "", "run"], [4, 2, 1, "", "split_pattern"]], "bardi.nlp_engineering.pre_tokenizer.PreTokenizer": [[4, 2, 1, "", "fields"], [4, 3, 1, "", "run"], [4, 2, 1, "", "split_pattern"]], "bardi.nlp_engineering.regex_library": [[4, 0, 0, "-", "pathology_report"], [4, 0, 0, "-", "regex_lib"], [4, 0, 0, "-", "regex_set"]], "bardi.nlp_engineering.regex_library.pathology_report": [[4, 1, 1, "", "PathologyReportRegexSet"]], "bardi.nlp_engineering.regex_library.regex_lib": [[4, 4, 1, "", "get_address_regex"], [4, 4, 1, "", "get_angle_brackets_regex"], [4, 4, 1, "", "get_cassette_name_regex"], [4, 4, 1, "", "get_cassettes_spacing_regex"], [4, 4, 1, "", "get_dash_digits_spacing_regex"], [4, 4, 1, "", "get_dates_regex"], [4, 4, 1, "", "get_decimal_segmented_numbers_regex"], [4, 4, 1, "", "get_digits_words_spacing_regex"], [4, 4, 1, "", "get_dimension_spacing_regex"], [4, 4, 1, "", "get_dimensions_regex"], [4, 4, 1, "", "get_duration_regex"], [4, 4, 1, "", "get_escape_code_regex"], [4, 4, 1, "", "get_fix_pluralization_regex"], [4, 4, 1, "", "get_large_digits_seq_regex"], [4, 4, 1, "", "get_large_float_seq_regex"], [4, 4, 1, "", "get_leading_digit_punctuation_regex"], [4, 4, 1, "", "get_leading_punctuation_regex"], [4, 4, 1, "", "get_letter_num_seq_regex"], [4, 4, 1, "", "get_literals_floats_spacing_regex"], [4, 4, 1, "", "get_math_spacing_regex"], [4, 4, 1, "", "get_measure_spacing_regex"], [4, 4, 1, "", "get_multiple_punct_regex"], [4, 4, 1, "", "get_percent_sign_regex"], [4, 4, 1, "", "get_phone_number_regex"], [4, 4, 1, "", "get_spaces_regex"], [4, 4, 1, "", "get_special_punct_regex"], [4, 4, 1, "", "get_specimen_regex"], [4, 4, 1, "", "get_time_regex"], [4, 4, 1, "", "get_trailing_punctuation_regex"], [4, 4, 1, "", "get_trunc_decimals_regex"], [4, 4, 1, "", "get_urls_regex"], [4, 4, 1, "", "get_whitespace_regex"], [4, 4, 1, "", "get_words_with_punct_spacing_regex"]], "bardi.nlp_engineering.regex_library.regex_set": [[4, 1, 1, "", "RegexSet"], [4, 1, 1, "", "RegexSubPair"]], "bardi.nlp_engineering.regex_library.regex_set.RegexSet": [[4, 3, 1, "", "get_regex_set"], [4, 2, 1, "", "regex_set"]], "bardi.nlp_engineering.regex_library.regex_set.RegexSubPair": [[4, 2, 1, "id1", "regex_str"], [4, 2, 1, "id2", "sub_str"]], "bardi.nlp_engineering.splitter": [[4, 1, 1, "", "CPUSplitter"], [4, 1, 1, "", "MapSplit"], [4, 1, 1, "", "NewSplit"], [4, 1, 1, "", "Splitter"]], "bardi.nlp_engineering.splitter.CPUSplitter": [[4, 2, 1, "", "group_cols"], [4, 2, 1, "", "label_cols"], [4, 2, 1, "", "num_splits"], [4, 2, 1, "", "random_seed"], [4, 3, 1, "", "run"], [4, 2, 1, "", "split_mapping"], [4, 2, 1, "", "split_method"], [4, 2, 1, "", "split_proportions"], [4, 2, 1, "", "split_type"], [4, 2, 1, "", "unique_record_cols"]], "bardi.nlp_engineering.splitter.MapSplit": [[4, 2, 1, "", "split_mapping"], [4, 2, 1, "", "unique_record_cols"]], "bardi.nlp_engineering.splitter.NewSplit": [[4, 2, 1, "", "group_cols"], [4, 2, 1, "", "label_cols"], [4, 2, 1, "", "random_seed"], [4, 2, 1, "", "split_proportions"], [4, 2, 1, "", "unique_record_cols"]], "bardi.nlp_engineering.splitter.Splitter": [[4, 2, 1, "", "group_cols"], [4, 2, 1, "", "label_cols"], [4, 2, 1, "", "num_splits"], [4, 2, 1, "", "random_seed"], [4, 3, 1, "", "run"], [4, 2, 1, "", "split_mapping"], [4, 2, 1, "", "split_method"], [4, 2, 1, "", "split_proportions"], [4, 2, 1, "", "split_type"], [4, 2, 1, "", "unique_record_cols"]], "bardi": [[2, 0, 0, "-", "pipeline"]], "bardi.pipeline": [[2, 1, 1, "", "DataWriteConfig"], [2, 1, 1, "", "Pipeline"], [2, 1, 1, "", "Step"]], "bardi.pipeline.DataWriteConfig": [[2, 2, 1, "", "data_format"], [2, 2, 1, "", "data_format_args"]], "bardi.pipeline.Pipeline": [[2, 3, 1, "", "add_step"], [2, 3, 1, "", "get_parameters"], [2, 3, 1, "", "run_pipeline"]], "bardi.pipeline.Step": [[2, 3, 1, "", "get_parameters"], [2, 3, 1, "", "run"], [2, 3, 1, "", "set_write_config"], [2, 3, 1, "", "write_artifacts"], [2, 3, 1, "", "write_data"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "function", "Python function"]}, "titleterms": {"bardi": [0, 2, 3, 4, 5, 6], "advanc": 1, "packag": [1, 3, 4, 5], "usag": [1, 5], "normal": [1, 4, 5], "custom": 1, "creat": 1, "pipelin": [1, 2, 5], "step": [1, 4], "modul": [2, 3, 4], "data": [3, 5], "data_handl": 3, "nlp_engin": 4, "pre_token": 4, "embedding_gener": 4, "post_processor": 4, "label_processor": 4, "splitter": 4, "regex": 4, "regex_set": 4, "provid": 4, "set": [4, 5], "librari": 4, "basic": 5, "prepar": 5, "sampl": 5, "regist": 5, "dataset": 5, "initi": 5, "pre": 5, "process": 5, "ad": 5, "our": 5, "pretoken": 5, "an": 5, "embeddinggener": 5, "postprocessor": 5, "labelprocessor": 5, "run": 5, "result": 5, "collect": 5, "metadata": 5, "full": 5, "tutori": 5, "script": 5, "welcom": 6, "": 6, "document": 6, "content": 6, "indic": 6, "tabl": 6, "instal": 7}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"bardi": [[0, "module-bardi"]], "Advanced Package Usage": [[1, "advanced-package-usage"]], "Normalizer Customizations": [[1, "normalizer-customizations"]], "Creating a Custom Pipeline Step": [[1, "creating-a-custom-pipeline-step"]], "bardi.pipeline": [[2, "bardi-pipeline"]], "bardi.pipeline module": [[2, "module-bardi.pipeline"]], "bardi.data package": [[3, "bardi-data-package"]], "bardi.data.data_handlers module": [[3, "module-bardi.data.data_handlers"]], "bardi.nlp_engineering package": [[4, "bardi-nlp-engineering-package"]], "Steps": [[4, "steps"]], "bardi normalizer module": [[4, "module-bardi.nlp_engineering.normalizer"]], "bardi pre_tokenizer module": [[4, "module-bardi.nlp_engineering.pre_tokenizer"]], "bardi embedding_generator module": [[4, "module-bardi.nlp_engineering.embedding_generator"]], "bardi post_processor module": [[4, "module-bardi.nlp_engineering.post_processor"]], "bardi label_processor module": [[4, "module-bardi.nlp_engineering.label_processor"]], "bardi splitter module": [[4, "module-bardi.nlp_engineering.splitter"]], "RegEx Package": [[4, "regex-package"]], "bardi regex_set module": [[4, "module-bardi.nlp_engineering.regex_library.regex_set"]], "bardi provided regex sets": [[4, "module-bardi.nlp_engineering.regex_library.pathology_report"]], "bardi provided regex library": [[4, "module-bardi.nlp_engineering.regex_library.regex_lib"]], "Basic Package Usage": [[5, "basic-package-usage"]], "Preparing a Sample Set of Data": [[5, "preparing-a-sample-set-of-data"]], "Register the Sample Data as a Bardi Dataset": [[5, "register-the-sample-data-as-a-bardi-dataset"]], "Initialize a Pre-Processing Pipeline": [[5, "initialize-a-pre-processing-pipeline"]], "Adding a Normalizer to our Pipeline": [[5, "adding-a-normalizer-to-our-pipeline"]], "Adding a PreTokenizer": [[5, "adding-a-pretokenizer"]], "Adding an EmbeddingGenerator": [[5, "adding-an-embeddinggenerator"]], "Adding a PostProcessor": [[5, "adding-a-postprocessor"]], "Adding a LabelProcessor": [[5, "adding-a-labelprocessor"]], "Running the Pipeline": [[5, "running-the-pipeline"]], "Results": [[5, "results"]], "Collecting Metadata": [[5, "collecting-metadata"]], "Full Tutorial Script": [[5, "full-tutorial-script"]], "Welcome to bardi\u2019s documentation!": [[6, "welcome-to-bardi-s-documentation"]], "Contents:": [[6, null]], "Indices and tables": [[6, "indices-and-tables"]], "Installation": [[7, "installation"]]}, "indexentries": {"bardi": [[0, "module-bardi"]], "module": [[0, "module-bardi"], [2, "module-bardi.pipeline"], [3, "module-bardi.data.data_handlers"], [4, "module-bardi.nlp_engineering.embedding_generator"], [4, "module-bardi.nlp_engineering.label_processor"], [4, "module-bardi.nlp_engineering.normalizer"], [4, "module-bardi.nlp_engineering.post_processor"], [4, "module-bardi.nlp_engineering.pre_tokenizer"], [4, "module-bardi.nlp_engineering.regex_library.pathology_report"], [4, "module-bardi.nlp_engineering.regex_library.regex_lib"], [4, "module-bardi.nlp_engineering.regex_library.regex_set"], [4, "module-bardi.nlp_engineering.splitter"]], "datawriteconfig (class in bardi.pipeline)": [[2, "bardi.pipeline.DataWriteConfig"]], "pipeline (class in bardi.pipeline)": [[2, "bardi.pipeline.Pipeline"]], "step (class in bardi.pipeline)": [[2, "bardi.pipeline.Step"]], "add_step() (bardi.pipeline.pipeline method)": [[2, "bardi.pipeline.Pipeline.add_step"]], "bardi.pipeline": [[2, "module-bardi.pipeline"]], "data_format (bardi.pipeline.datawriteconfig attribute)": [[2, "bardi.pipeline.DataWriteConfig.data_format"]], "data_format_args (bardi.pipeline.datawriteconfig attribute)": [[2, "bardi.pipeline.DataWriteConfig.data_format_args"]], "get_parameters() (bardi.pipeline.pipeline method)": [[2, "bardi.pipeline.Pipeline.get_parameters"]], "get_parameters() (bardi.pipeline.step method)": [[2, "bardi.pipeline.Step.get_parameters"]], "run() (bardi.pipeline.step method)": [[2, "bardi.pipeline.Step.run"]], "run_pipeline() (bardi.pipeline.pipeline method)": [[2, "bardi.pipeline.Pipeline.run_pipeline"]], "set_write_config() (bardi.pipeline.step method)": [[2, "bardi.pipeline.Step.set_write_config"]], "write_artifacts() (bardi.pipeline.step method)": [[2, "bardi.pipeline.Step.write_artifacts"]], "write_data() (bardi.pipeline.step method)": [[2, "bardi.pipeline.Step.write_data"]], "dataset (class in bardi.data.data_handlers)": [[3, "bardi.data.data_handlers.Dataset"]], "bardi.data.data_handlers": [[3, "module-bardi.data.data_handlers"]], "data (bardi.data.data_handlers.dataset attribute)": [[3, "bardi.data.data_handlers.Dataset.data"]], "from_duckdb() (in module bardi.data.data_handlers)": [[3, "bardi.data.data_handlers.from_duckdb"]], "from_file() (in module bardi.data.data_handlers)": [[3, "bardi.data.data_handlers.from_file"]], "from_json() (in module bardi.data.data_handlers)": [[3, "bardi.data.data_handlers.from_json"]], "from_pandas() (in module bardi.data.data_handlers)": [[3, "bardi.data.data_handlers.from_pandas"]], "from_pyarrow() (in module bardi.data.data_handlers)": [[3, "bardi.data.data_handlers.from_pyarrow"]], "get_parameters() (bardi.data.data_handlers.dataset method)": [[3, "bardi.data.data_handlers.Dataset.get_parameters"]], "origin_file_path (bardi.data.data_handlers.dataset attribute)": [[3, "bardi.data.data_handlers.Dataset.origin_file_path"]], "origin_format (bardi.data.data_handlers.dataset attribute)": [[3, "bardi.data.data_handlers.Dataset.origin_format"]], "origin_query (bardi.data.data_handlers.dataset attribute)": [[3, "bardi.data.data_handlers.Dataset.origin_query"]], "origin_row_count (bardi.data.data_handlers.dataset attribute)": [[3, "bardi.data.data_handlers.Dataset.origin_row_count"]], "to_pandas() (in module bardi.data.data_handlers)": [[3, "bardi.data.data_handlers.to_pandas"]], "to_polars() (in module bardi.data.data_handlers)": [[3, "bardi.data.data_handlers.to_polars"]], "write_file() (in module bardi.data.data_handlers)": [[3, "bardi.data.data_handlers.write_file"]], "cpuembeddinggenerator (class in bardi.nlp_engineering.embedding_generator)": [[4, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator"]], "cpulabelprocessor (class in bardi.nlp_engineering.label_processor)": [[4, "bardi.nlp_engineering.label_processor.CPULabelProcessor"]], "cpunormalizer (class in bardi.nlp_engineering.normalizer)": [[4, "bardi.nlp_engineering.normalizer.CPUNormalizer"]], "cpupostprocessor (class in bardi.nlp_engineering.post_processor)": [[4, "bardi.nlp_engineering.post_processor.CPUPostProcessor"]], "cpupretokenizer (class in bardi.nlp_engineering.pre_tokenizer)": [[4, "bardi.nlp_engineering.pre_tokenizer.CPUPreTokenizer"]], "cpusplitter (class in bardi.nlp_engineering.splitter)": [[4, "bardi.nlp_engineering.splitter.CPUSplitter"]], "embeddinggenerator (class in bardi.nlp_engineering.embedding_generator)": [[4, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator"]], "embeddinggeneratorartifactswriteconfig (class in bardi.nlp_engineering.embedding_generator)": [[4, "bardi.nlp_engineering.embedding_generator.EmbeddingGeneratorArtifactsWriteConfig"]], "labelprocessor (class in bardi.nlp_engineering.label_processor)": [[4, "bardi.nlp_engineering.label_processor.LabelProcessor"]], "labelprocessorartifactswriteconfig (class in bardi.nlp_engineering.label_processor)": [[4, "bardi.nlp_engineering.label_processor.LabelProcessorArtifactsWriteConfig"]], "mapsplit (class in bardi.nlp_engineering.splitter)": [[4, "bardi.nlp_engineering.splitter.MapSplit"]], "newsplit (class in bardi.nlp_engineering.splitter)": [[4, "bardi.nlp_engineering.splitter.NewSplit"]], "normalizer (class in bardi.nlp_engineering.normalizer)": [[4, "bardi.nlp_engineering.normalizer.Normalizer"]], "pathologyreportregexset (class in bardi.nlp_engineering.regex_library.pathology_report)": [[4, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet"]], "postprocessor (class in bardi.nlp_engineering.post_processor)": [[4, "bardi.nlp_engineering.post_processor.PostProcessor"]], "pretokenizer (class in bardi.nlp_engineering.pre_tokenizer)": [[4, "bardi.nlp_engineering.pre_tokenizer.PreTokenizer"]], "regexset (class in bardi.nlp_engineering.regex_library.regex_set)": [[4, "bardi.nlp_engineering.regex_library.regex_set.RegexSet"]], "regexsubpair (class in bardi.nlp_engineering.regex_library.regex_set)": [[4, "bardi.nlp_engineering.regex_library.regex_set.RegexSubPair"]], "splitter (class in bardi.nlp_engineering.splitter)": [[4, "bardi.nlp_engineering.splitter.Splitter"]], "artifacts (bardi.nlp_engineering.post_processor.cpupostprocessor attribute)": [[4, "bardi.nlp_engineering.post_processor.CPUPostProcessor.artifacts"]], "bardi.nlp_engineering.embedding_generator": [[4, "module-bardi.nlp_engineering.embedding_generator"]], "bardi.nlp_engineering.label_processor": [[4, "module-bardi.nlp_engineering.label_processor"]], "bardi.nlp_engineering.normalizer": [[4, "module-bardi.nlp_engineering.normalizer"]], "bardi.nlp_engineering.post_processor": [[4, "module-bardi.nlp_engineering.post_processor"]], "bardi.nlp_engineering.pre_tokenizer": [[4, "module-bardi.nlp_engineering.pre_tokenizer"]], "bardi.nlp_engineering.regex_library.pathology_report": [[4, "module-bardi.nlp_engineering.regex_library.pathology_report"]], "bardi.nlp_engineering.regex_library.regex_lib": [[4, "module-bardi.nlp_engineering.regex_library.regex_lib"]], "bardi.nlp_engineering.regex_library.regex_set": [[4, "module-bardi.nlp_engineering.regex_library.regex_set"]], "bardi.nlp_engineering.splitter": [[4, "module-bardi.nlp_engineering.splitter"]], "checkpoint_path (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator attribute)": [[4, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.checkpoint_path"]], "checkpoint_path (bardi.nlp_engineering.embedding_generator.embeddinggenerator attribute)": [[4, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.checkpoint_path"]], "concat_fields (bardi.nlp_engineering.post_processor.cpupostprocessor attribute)": [[4, "bardi.nlp_engineering.post_processor.CPUPostProcessor.concat_fields"]], "concat_fields (bardi.nlp_engineering.post_processor.postprocessor attribute)": [[4, "bardi.nlp_engineering.post_processor.PostProcessor.concat_fields"]], "cores (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator attribute)": [[4, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.cores"]], "cores (bardi.nlp_engineering.embedding_generator.embeddinggenerator attribute)": [[4, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.cores"]], "data (bardi.nlp_engineering.post_processor.cpupostprocessor attribute)": [[4, "bardi.nlp_engineering.post_processor.CPUPostProcessor.data"]], "embedding_matrix_format (bardi.nlp_engineering.embedding_generator.embeddinggeneratorartifactswriteconfig attribute)": [[4, "bardi.nlp_engineering.embedding_generator.EmbeddingGeneratorArtifactsWriteConfig.embedding_matrix_format"]], "embedding_matrix_format_args (bardi.nlp_engineering.embedding_generator.embeddinggeneratorartifactswriteconfig attribute)": [[4, "bardi.nlp_engineering.embedding_generator.EmbeddingGeneratorArtifactsWriteConfig.embedding_matrix_format_args"]], "epochs (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator attribute)": [[4, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.epochs"]], "epochs (bardi.nlp_engineering.embedding_generator.embeddinggenerator attribute)": [[4, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.epochs"]], "field_rename (bardi.nlp_engineering.post_processor.cpupostprocessor attribute)": [[4, "bardi.nlp_engineering.post_processor.CPUPostProcessor.field_rename"]], "field_rename (bardi.nlp_engineering.post_processor.postprocessor attribute)": [[4, "bardi.nlp_engineering.post_processor.PostProcessor.field_rename"]], "fields (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator attribute)": [[4, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.fields"]], "fields (bardi.nlp_engineering.embedding_generator.embeddinggenerator attribute)": [[4, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.fields"]], "fields (bardi.nlp_engineering.label_processor.cpulabelprocessor attribute)": [[4, "bardi.nlp_engineering.label_processor.CPULabelProcessor.fields"]], "fields (bardi.nlp_engineering.label_processor.labelprocessor attribute)": [[4, "bardi.nlp_engineering.label_processor.LabelProcessor.fields"]], "fields (bardi.nlp_engineering.normalizer.cpunormalizer attribute)": [[4, "bardi.nlp_engineering.normalizer.CPUNormalizer.fields"]], "fields (bardi.nlp_engineering.normalizer.normalizer attribute)": [[4, "bardi.nlp_engineering.normalizer.Normalizer.fields"]], "fields (bardi.nlp_engineering.post_processor.cpupostprocessor attribute)": [[4, "bardi.nlp_engineering.post_processor.CPUPostProcessor.fields"]], "fields (bardi.nlp_engineering.post_processor.postprocessor attribute)": [[4, "bardi.nlp_engineering.post_processor.PostProcessor.fields"]], "fields (bardi.nlp_engineering.pre_tokenizer.cpupretokenizer attribute)": [[4, "bardi.nlp_engineering.pre_tokenizer.CPUPreTokenizer.fields"]], "fields (bardi.nlp_engineering.pre_tokenizer.pretokenizer attribute)": [[4, "bardi.nlp_engineering.pre_tokenizer.PreTokenizer.fields"]], "get_address_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_address_regex"]], "get_angle_brackets_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_angle_brackets_regex"]], "get_cassette_name_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_cassette_name_regex"]], "get_cassettes_spacing_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_cassettes_spacing_regex"]], "get_dash_digits_spacing_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_dash_digits_spacing_regex"]], "get_dates_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_dates_regex"]], "get_decimal_segmented_numbers_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_decimal_segmented_numbers_regex"]], "get_digits_words_spacing_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_digits_words_spacing_regex"]], "get_dimension_spacing_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_dimension_spacing_regex"]], "get_dimensions_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_dimensions_regex"]], "get_duration_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_duration_regex"]], "get_escape_code_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_escape_code_regex"]], "get_fix_pluralization_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_fix_pluralization_regex"]], "get_large_digits_seq_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_large_digits_seq_regex"]], "get_large_float_seq_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_large_float_seq_regex"]], "get_leading_digit_punctuation_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_leading_digit_punctuation_regex"]], "get_leading_punctuation_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_leading_punctuation_regex"]], "get_letter_num_seq_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_letter_num_seq_regex"]], "get_literals_floats_spacing_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_literals_floats_spacing_regex"]], "get_math_spacing_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_math_spacing_regex"]], "get_measure_spacing_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_measure_spacing_regex"]], "get_multiple_punct_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_multiple_punct_regex"]], "get_parameters() (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator method)": [[4, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.get_parameters"]], "get_parameters() (bardi.nlp_engineering.label_processor.cpulabelprocessor method)": [[4, "bardi.nlp_engineering.label_processor.CPULabelProcessor.get_parameters"]], "get_parameters() (bardi.nlp_engineering.post_processor.cpupostprocessor method)": [[4, "bardi.nlp_engineering.post_processor.CPUPostProcessor.get_parameters"]], "get_percent_sign_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_percent_sign_regex"]], "get_phone_number_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_phone_number_regex"]], "get_regex_set() (bardi.nlp_engineering.regex_library.regex_set.regexset method)": [[4, "bardi.nlp_engineering.regex_library.regex_set.RegexSet.get_regex_set"]], "get_spaces_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_spaces_regex"]], "get_special_punct_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_special_punct_regex"]], "get_specimen_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_specimen_regex"]], "get_time_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_time_regex"]], "get_trailing_punctuation_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_trailing_punctuation_regex"]], "get_trunc_decimals_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_trunc_decimals_regex"]], "get_urls_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_urls_regex"]], "get_whitespace_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_whitespace_regex"]], "get_words_with_punct_spacing_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_words_with_punct_spacing_regex"]], "group_cols (bardi.nlp_engineering.splitter.cpusplitter attribute)": [[4, "bardi.nlp_engineering.splitter.CPUSplitter.group_cols"]], "group_cols (bardi.nlp_engineering.splitter.newsplit attribute)": [[4, "bardi.nlp_engineering.splitter.NewSplit.group_cols"]], "group_cols (bardi.nlp_engineering.splitter.splitter attribute)": [[4, "bardi.nlp_engineering.splitter.Splitter.group_cols"]], "id_to_label (bardi.nlp_engineering.label_processor.cpulabelprocessor attribute)": [[4, "bardi.nlp_engineering.label_processor.CPULabelProcessor.id_to_label"]], "id_to_label_args (bardi.nlp_engineering.label_processor.labelprocessorartifactswriteconfig attribute)": [[4, "bardi.nlp_engineering.label_processor.LabelProcessorArtifactsWriteConfig.id_to_label_args"]], "id_to_label_format (bardi.nlp_engineering.label_processor.labelprocessorartifactswriteconfig attribute)": [[4, "bardi.nlp_engineering.label_processor.LabelProcessorArtifactsWriteConfig.id_to_label_format"]], "id_to_token (bardi.nlp_engineering.post_processor.cpupostprocessor attribute)": [[4, "bardi.nlp_engineering.post_processor.CPUPostProcessor.id_to_token"], [4, "id0"]], "id_to_token (bardi.nlp_engineering.post_processor.postprocessor attribute)": [[4, "bardi.nlp_engineering.post_processor.PostProcessor.id_to_token"]], "label_cols (bardi.nlp_engineering.splitter.cpusplitter attribute)": [[4, "bardi.nlp_engineering.splitter.CPUSplitter.label_cols"]], "label_cols (bardi.nlp_engineering.splitter.newsplit attribute)": [[4, "bardi.nlp_engineering.splitter.NewSplit.label_cols"]], "label_cols (bardi.nlp_engineering.splitter.splitter attribute)": [[4, "bardi.nlp_engineering.splitter.Splitter.label_cols"]], "load_saved_model (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator attribute)": [[4, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.load_saved_model"]], "load_saved_model (bardi.nlp_engineering.embedding_generator.embeddinggenerator attribute)": [[4, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.load_saved_model"]], "lowercase (bardi.nlp_engineering.normalizer.cpunormalizer attribute)": [[4, "bardi.nlp_engineering.normalizer.CPUNormalizer.lowercase"]], "lowercase (bardi.nlp_engineering.normalizer.normalizer attribute)": [[4, "bardi.nlp_engineering.normalizer.Normalizer.lowercase"]], "mapping (bardi.nlp_engineering.label_processor.cpulabelprocessor attribute)": [[4, "bardi.nlp_engineering.label_processor.CPULabelProcessor.mapping"]], "method (bardi.nlp_engineering.label_processor.cpulabelprocessor attribute)": [[4, "bardi.nlp_engineering.label_processor.CPULabelProcessor.method"]], "method (bardi.nlp_engineering.label_processor.labelprocessor attribute)": [[4, "bardi.nlp_engineering.label_processor.LabelProcessor.method"]], "min_alpha (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator attribute)": [[4, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.min_alpha"]], "min_alpha (bardi.nlp_engineering.embedding_generator.embeddinggenerator attribute)": [[4, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.min_alpha"]], "min_word_count (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator attribute)": [[4, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.min_word_count"]], "min_word_count (bardi.nlp_engineering.embedding_generator.embeddinggenerator attribute)": [[4, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.min_word_count"]], "negative (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator attribute)": [[4, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.negative"]], "negative (bardi.nlp_engineering.embedding_generator.embeddinggenerator attribute)": [[4, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.negative"]], "num_splits (bardi.nlp_engineering.splitter.cpusplitter attribute)": [[4, "bardi.nlp_engineering.splitter.CPUSplitter.num_splits"]], "num_splits (bardi.nlp_engineering.splitter.splitter attribute)": [[4, "bardi.nlp_engineering.splitter.Splitter.num_splits"]], "random_seed (bardi.nlp_engineering.splitter.cpusplitter attribute)": [[4, "bardi.nlp_engineering.splitter.CPUSplitter.random_seed"]], "random_seed (bardi.nlp_engineering.splitter.newsplit attribute)": [[4, "bardi.nlp_engineering.splitter.NewSplit.random_seed"]], "random_seed (bardi.nlp_engineering.splitter.splitter attribute)": [[4, "bardi.nlp_engineering.splitter.Splitter.random_seed"]], "regex_set (bardi.nlp_engineering.normalizer.cpunormalizer attribute)": [[4, "bardi.nlp_engineering.normalizer.CPUNormalizer.regex_set"]], "regex_set (bardi.nlp_engineering.normalizer.normalizer attribute)": [[4, "bardi.nlp_engineering.normalizer.Normalizer.regex_set"]], "regex_set (bardi.nlp_engineering.regex_library.regex_set.regexset attribute)": [[4, "bardi.nlp_engineering.regex_library.regex_set.RegexSet.regex_set"]], "regex_str (bardi.nlp_engineering.regex_library.regex_set.regexsubpair attribute)": [[4, "bardi.nlp_engineering.regex_library.regex_set.RegexSubPair.regex_str"], [4, "id1"]], "run() (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator method)": [[4, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.run"]], "run() (bardi.nlp_engineering.embedding_generator.embeddinggenerator method)": [[4, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.run"]], "run() (bardi.nlp_engineering.label_processor.cpulabelprocessor method)": [[4, "bardi.nlp_engineering.label_processor.CPULabelProcessor.run"]], "run() (bardi.nlp_engineering.label_processor.labelprocessor method)": [[4, "bardi.nlp_engineering.label_processor.LabelProcessor.run"]], "run() (bardi.nlp_engineering.normalizer.cpunormalizer method)": [[4, "bardi.nlp_engineering.normalizer.CPUNormalizer.run"]], "run() (bardi.nlp_engineering.normalizer.normalizer method)": [[4, "bardi.nlp_engineering.normalizer.Normalizer.run"]], "run() (bardi.nlp_engineering.post_processor.cpupostprocessor method)": [[4, "bardi.nlp_engineering.post_processor.CPUPostProcessor.run"]], "run() (bardi.nlp_engineering.post_processor.postprocessor method)": [[4, "bardi.nlp_engineering.post_processor.PostProcessor.run"]], "run() (bardi.nlp_engineering.pre_tokenizer.cpupretokenizer method)": [[4, "bardi.nlp_engineering.pre_tokenizer.CPUPreTokenizer.run"]], "run() (bardi.nlp_engineering.pre_tokenizer.pretokenizer method)": [[4, "bardi.nlp_engineering.pre_tokenizer.PreTokenizer.run"]], "run() (bardi.nlp_engineering.splitter.cpusplitter method)": [[4, "bardi.nlp_engineering.splitter.CPUSplitter.run"]], "run() (bardi.nlp_engineering.splitter.splitter method)": [[4, "bardi.nlp_engineering.splitter.Splitter.run"]], "sample (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator attribute)": [[4, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.sample"]], "sample (bardi.nlp_engineering.embedding_generator.embeddinggenerator attribute)": [[4, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.sample"]], "seed (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator attribute)": [[4, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.seed"]], "seed (bardi.nlp_engineering.embedding_generator.embeddinggenerator attribute)": [[4, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.seed"]], "set_write_config() (bardi.nlp_engineering.embedding_generator.embeddinggenerator method)": [[4, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.set_write_config"]], "set_write_config() (bardi.nlp_engineering.label_processor.labelprocessor method)": [[4, "bardi.nlp_engineering.label_processor.LabelProcessor.set_write_config"]], "split_mapping (bardi.nlp_engineering.splitter.cpusplitter attribute)": [[4, "bardi.nlp_engineering.splitter.CPUSplitter.split_mapping"]], "split_mapping (bardi.nlp_engineering.splitter.mapsplit attribute)": [[4, "bardi.nlp_engineering.splitter.MapSplit.split_mapping"]], "split_mapping (bardi.nlp_engineering.splitter.splitter attribute)": [[4, "bardi.nlp_engineering.splitter.Splitter.split_mapping"]], "split_method (bardi.nlp_engineering.splitter.cpusplitter attribute)": [[4, "bardi.nlp_engineering.splitter.CPUSplitter.split_method"]], "split_method (bardi.nlp_engineering.splitter.splitter attribute)": [[4, "bardi.nlp_engineering.splitter.Splitter.split_method"]], "split_pattern (bardi.nlp_engineering.pre_tokenizer.cpupretokenizer attribute)": [[4, "bardi.nlp_engineering.pre_tokenizer.CPUPreTokenizer.split_pattern"]], "split_pattern (bardi.nlp_engineering.pre_tokenizer.pretokenizer attribute)": [[4, "bardi.nlp_engineering.pre_tokenizer.PreTokenizer.split_pattern"]], "split_proportions (bardi.nlp_engineering.splitter.cpusplitter attribute)": [[4, "bardi.nlp_engineering.splitter.CPUSplitter.split_proportions"]], "split_proportions (bardi.nlp_engineering.splitter.newsplit attribute)": [[4, "bardi.nlp_engineering.splitter.NewSplit.split_proportions"]], "split_proportions (bardi.nlp_engineering.splitter.splitter attribute)": [[4, "bardi.nlp_engineering.splitter.Splitter.split_proportions"]], "split_type (bardi.nlp_engineering.splitter.cpusplitter attribute)": [[4, "bardi.nlp_engineering.splitter.CPUSplitter.split_type"]], "split_type (bardi.nlp_engineering.splitter.splitter attribute)": [[4, "bardi.nlp_engineering.splitter.Splitter.split_type"]], "sub_str (bardi.nlp_engineering.regex_library.regex_set.regexsubpair attribute)": [[4, "bardi.nlp_engineering.regex_library.regex_set.RegexSubPair.sub_str"], [4, "id2"]], "unique_record_cols (bardi.nlp_engineering.splitter.cpusplitter attribute)": [[4, "bardi.nlp_engineering.splitter.CPUSplitter.unique_record_cols"]], "unique_record_cols (bardi.nlp_engineering.splitter.mapsplit attribute)": [[4, "bardi.nlp_engineering.splitter.MapSplit.unique_record_cols"]], "unique_record_cols (bardi.nlp_engineering.splitter.newsplit attribute)": [[4, "bardi.nlp_engineering.splitter.NewSplit.unique_record_cols"]], "unique_record_cols (bardi.nlp_engineering.splitter.splitter attribute)": [[4, "bardi.nlp_engineering.splitter.Splitter.unique_record_cols"]], "vector_size (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator attribute)": [[4, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.vector_size"]], "vector_size (bardi.nlp_engineering.embedding_generator.embeddinggenerator attribute)": [[4, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.vector_size"]], "vocab_exclude_list (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator attribute)": [[4, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.vocab_exclude_list"]], "vocab_exclude_list (bardi.nlp_engineering.embedding_generator.embeddinggenerator attribute)": [[4, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.vocab_exclude_list"]], "vocab_format (bardi.nlp_engineering.embedding_generator.embeddinggeneratorartifactswriteconfig attribute)": [[4, "bardi.nlp_engineering.embedding_generator.EmbeddingGeneratorArtifactsWriteConfig.vocab_format"]], "vocab_format_args (bardi.nlp_engineering.embedding_generator.embeddinggeneratorartifactswriteconfig attribute)": [[4, "bardi.nlp_engineering.embedding_generator.EmbeddingGeneratorArtifactsWriteConfig.vocab_format_args"]], "window (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator attribute)": [[4, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.window"]], "window (bardi.nlp_engineering.embedding_generator.embeddinggenerator attribute)": [[4, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.window"]], "write_artifacts() (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator method)": [[4, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.write_artifacts"]], "write_artifacts() (bardi.nlp_engineering.label_processor.cpulabelprocessor method)": [[4, "bardi.nlp_engineering.label_processor.CPULabelProcessor.write_artifacts"]]}})