Search.setIndex({"docnames": ["_autosummary/bardi", "advanced", "bardi", "bardi.data", "bardi.data.utils", "bardi.nlp_engineering", "bardi.nlp_engineering.regex_library", "bardi.nlp_engineering.utils", "basic", "index", "installation", "modules", "setup", "tests"], "filenames": ["_autosummary/bardi.rst", "advanced.rst", "bardi.rst", "bardi.data.rst", "bardi.data.utils.rst", "bardi.nlp_engineering.rst", "bardi.nlp_engineering.regex_library.rst", "bardi.nlp_engineering.utils.rst", "basic.rst", "index.rst", "installation.rst", "modules.rst", "setup.rst", "tests.rst"], "titles": ["bardi", "Advanced Package Usage", "bardi.pipeline", "bardi.data package", "bardi.data.utils package", "bardi.nlp_engineering package", "bardi.nlp_engineering.regex_library package", "bardi.nlp_engineering.utils package", "Basic Package Usage", "Welcome to bardi\u2019s documentation!", "Installation", "bardi", "setup module", "tests package"], "terms": {"document": [1, 3, 8], "refer": [1, 3, 7, 8], "bardi": [1, 10, 13], "nlp_engin": [1, 8, 9, 13], "cpunorm": [1, 5, 8, 9], "regex_librari": [1, 8], "pathology_report": [1, 8], "pathologyreportregexset": [1, 6, 8], "The": [1, 3, 5, 6, 7, 8, 13], "need": [1, 2, 5, 6, 8, 13], "regular": [1, 5, 6, 8, 13], "express": [1, 5, 6, 8, 13], "set": [1, 2, 3, 5, 6, 9, 13], "regex_set": [1, 5, 8], "appli": [1, 5, 6, 8, 13], "text": [1, 5, 6, 8, 13], "A": [1, 2, 3, 5, 6, 8, 13], "i": [1, 2, 3, 5, 6, 7, 8, 9, 13], "just": [1, 5, 8], "python": [1, 13], "list": [1, 2, 3, 4, 5, 6, 7, 8], "dictionari": [1, 2, 5, 6], "contain": [1, 3, 5, 7, 13], "kei": [1, 2, 5, 8], "regex_str": [1, 5, 6, 8], "substitut": [1, 5, 6, 8, 13], "string": [1, 5, 6, 7, 13], "sub_str": [1, 5, 6, 8], "There": [1, 8], "ar": [1, 2, 3, 5, 6, 7, 8, 13], "few": 1, "method": [1, 2, 5, 7, 8, 13], "you": [1, 3, 5, 8], "can": [1, 2, 3, 5, 6, 8], "us": [1, 2, 3, 5, 6, 7, 8], "what": [1, 13], "your": [1, 8], "tune": 1, "provid": [1, 2, 5, 6, 8, 13], "regexset": [1, 6], "an": [1, 3, 5, 6, 9, 13], "exist": [1, 2, 3, 5], "tunabl": 1, "turn": 1, "individu": [1, 8, 13], "off": 1, "desir": [1, 2, 5, 8, 13], "By": [1, 5], "default": [1, 2, 5, 13], "all": [1, 3, 5, 8, 13], "so": [1, 5, 8], "would": [1, 5, 8], "ones": 1, "don": [1, 8], "t": [1, 5, 8], "want": [1, 3, 8], "from": [1, 2, 3, 5, 6, 8, 13], "import": [1, 8], "grab": [1, 8], "pre": [1, 2, 5, 6, 9, 13], "made": [1, 5, 8], "regex": [1, 5, 6, 8, 13], "pathologi": [1, 6, 8], "report": [1, 6, 8], "3": [1, 6, 8], "path_report_regex_set": [1, 8], "get_regex_set": [1, 6, 8], "remove_dimens": [1, 6], "fals": [1, 2, 5, 8], "remove_specimen": [1, 6], "remove_decimal_seg_numb": [1, 6], "built": [1, 8], "type": [1, 2, 3, 5, 6, 7, 13], "write": [1, 2, 3, 5, 13], "noth": [1, 8], "stop": 1, "own": 1, "custom_regex_set": 1, "": [1, 2, 3, 5, 6, 8, 13], "http": [1, 6, 8], "urltoken": [1, 6, 8], "suppli": [1, 3, 5, 7, 8], "add_step": [1, 2, 8, 11], "field": [1, 5, 7, 8], "lowercas": [1, 5, 8], "true": [1, 2, 5, 6, 8], "class": [1, 2, 3, 5, 6, 8, 13], "howev": [1, 8], "like": [1, 5, 6], "more": [1, 8], "organ": [1, 2], "approach": 1, "than": [1, 5], "shown": 1, "abov": [1, 8], "handl": [1, 3, 5, 8], "could": [1, 8], "follow": [1, 5, 6, 8], "our": [1, 9], "lead": [1, 6, 13], "new": [1, 2, 5, 6], "inherit": 1, "give": 1, "attribut": [1, 2, 3, 5], "which": [1, 3, 5, 13], "pair": [1, 3, 6], "return": [1, 2, 3, 5, 6], "thi": [1, 2, 3, 5, 6, 7, 8], "mycustomregexset": 1, "def": 1, "__init__": 1, "self": 1, "handle_whitespac": [1, 6], "bool": [1, 2, 3, 5, 6], "convert_url": 1, "append": 1, "we": [1, 8], "have": [1, 5, 8], "some": [1, 2, 8], "out": [1, 8], "box": 1, "hope": 1, "continu": [1, 8], "ad": [1, 2, 9, 13], "help": [1, 5], "expect": [1, 2, 5, 13], "everi": 1, "possibl": [1, 3, 8], "data": [1, 2, 5, 7, 9, 13], "process": [1, 2, 5, 9], "action": 1, "ever": 1, "someth": [1, 5], "guidelin": 1, "run": [1, 2, 5, 9, 11, 13], "within": [1, 5, 8], "alongsid": 1, "ani": [1, 2, 6, 8], "metadata": [1, 3, 9], "captur": 1, "standard": [1, 5], "file": [1, 2, 3, 5, 8, 13], "util": 3, "pyarrow_util": [], "data_handl": [8, 9, 13], "dataset": [2, 3, 5, 9, 13], "origin_queri": [3, 8], "origin_file_path": 3, "origin_format": [3, 8], "origin_row_count": [3, 8], "get_paramet": [2, 3, 5, 8, 11], "from_duckdb": [3, 9, 13], "from_fil": [3, 9, 13], "from_json": [3, 9, 13], "from_panda": [3, 8, 9, 13], "from_pyarrow": [3, 9, 13], "to_panda": [3, 8, 9], "to_polar": [3, 9], "write_fil": [3, 9], "regex_lib": [], "valid": [3, 13], "embedding_gener": [8, 9], "cpuembeddinggener": [5, 8, 9], "load_saved_model": 5, "checkpoint_path": 5, "core": [5, 8], "min_word_count": [5, 8], "window": [5, 8], "vector_s": [5, 8], "sampl": [5, 9], "min_alpha": [5, 8], "neg": [5, 6, 8], "epoch": [5, 8], "seed": [5, 8], "vocab_exclude_list": [5, 8], "write_artifact": [2, 5, 11], "embeddinggener": [5, 9], "set_write_config": [2, 5, 11], "embeddinggeneratorartifactswriteconfig": [5, 9], "embedding_matrix_format": [5, 8], "embedding_matrix_format_arg": [5, 8], "vocab_format": [5, 8], "vocab_format_arg": [5, 8], "label_processor": [8, 9], "cpulabelprocessor": [5, 8, 9], "labelprocessor": [5, 9, 13], "labelprocessorartifactswriteconfig": [5, 9], "id_to_label_arg": 5, "id_to_label_format": [5, 8], "normal": [9, 13], "post_processor": [8, 9], "cpupostprocessor": [5, 8, 9], "field_renam": [5, 8], "id_to_token": [5, 8], "concat_field": 5, "write_output": [2, 8], "postprocessor": [5, 9, 13], "pre_token": [8, 9], "cpupretoken": [5, 8, 9], "split_pattern": [5, 8], "pretoken": [5, 9, 13], "splitter": [8, 9, 13], "cpusplitt": [5, 9], "split_typ": 5, "unique_record_col": 5, "split_map": 5, "split_proport": 5, "num_split": 5, "group_col": 5, "label_col": 5, "random_se": 5, "mapsplit": [5, 9, 13], "newsplit": [5, 8, 9, 13], "defin": [2, 6], "framework": [2, 8, 9], "step": [2, 5, 8, 9, 11, 13], "datawriteconfig": [2, 5, 9, 11], "sourc": [2, 3, 4, 5, 6, 7, 13], "base": [2, 3, 5, 6, 13], "typeddict": [2, 5, 6], "data_format": [2, 8, 11], "str": [2, 3, 5, 6, 7, 8], "data_format_arg": [2, 8, 11], "dict": [2, 3, 5], "none": [2, 3, 5, 6, 7, 8], "write_path": [2, 5], "liter": [2, 13], "output": [2, 5, 13], "debug": 2, "data_write_config": 2, "data_filenam": 2, "bardi_processed_data": 2, "object": [2, 3, 5, 6, 8, 13], "oper": [2, 3, 5, 6, 8, 13], "add": [2, 5, 6, 8, 13], "execut": [2, 13], "also": [2, 3, 5, 6, 7, 8], "overwrit": [2, 5], "configur": [2, 5, 6], "consist": [2, 6], "paramet": [2, 3, 5], "condens": 2, "each": [2, 5, 13], "If": [2, 5, 8], "exclud": [2, 5], "run_pipelin": [2, 8, 11], "call": 2, "respect": [2, 5], "blueprint": [2, 6], "creat": [2, 3, 5, 6, 8, 9, 13], "implement": [2, 5, 8, 13], "custom": [2, 3, 5, 8, 9], "remov": [2, 6, 13], "larg": [2, 5, 6, 13], "item": 2, "copi": 2, "abstract": [2, 5, 8, 9], "tabl": [2, 3, 4, 5, 7, 8], "artifact": [2, 5, 6, 8], "tupl": [2, 5], "pyarrow": [2, 3, 5, 7, 8], "receiv": [2, 5], "preced": 2, "ignor": [2, 5], "valu": [2, 3, 5, 6], "perform": [2, 3, 5, 8], "transform": 2, "replac": [2, 6, 13], "processed_data": [2, 8], "besid": 2, "correspond": 2, "name": [2, 3, 5, 6, 8, 13], "being": [2, 8], "union": [2, 3, 5, 7], "pa": [2, 5, 8], "data_config": [2, 5], "e": [2, 5, 6], "parquet": [2, 3, 8], "csv": [2, 3], "etc": [2, 6], "particular": [2, 5], "avail": [2, 3, 5, 8], "api": [2, 3], "sinc": [2, 8], "onli": [2, 3, 5, 6, 8], "requir": [2, 5, 6, 8], "behavior": [2, 8], "pass": [2, 3, 5, 7], "specif": [2, 3, 5, 6], "produc": [2, 5, 8, 13], "directori": [2, 5], "where": [2, 3, 5, 8], "should": [2, 5, 6], "written": [2, 3, 5], "write_data": [2, 11], "reus": 2, "pattern": [2, 5, 6, 8], "handler": 2, "filetyp": [2, 3], "extens": 2, "chunk_pyarrow_t": 4, "store": 3, "relev": 3, "form": [3, 5], "column": [3, 5, 7, 8, 13], "row": 3, "under": 3, "hood": 3, "modern": 3, "effici": 3, "start": [3, 6], "point": 3, "both": [3, 9], "cpu": [3, 5, 13], "gpu": 3, "workflow": [3, 8, 9], "int": [3, 4, 5, 8], "path": [3, 5], "queri": [3, 13], "min_batch": [3, 4], "duckdb": 3, "databas": 3, "keyword": [3, 7], "argument": [3, 7], "filepath": 3, "sql": 3, "adher": 3, "syntax": 3, "integ": [3, 5], "number": [3, 5, 6, 13], "split": [3, 5, 6, 8, 13], "amount": 3, "smaller": [3, 5], "distribut": [3, 5], "worker": 3, "node": 3, "probabl": 3, "align": [3, 8], "referenc": [3, 5], "wa": [3, 5, 6], "after": [3, 6, 13], "convers": 3, "format": [3, 6], "arg": [3, 5, 6], "kwarg": [3, 5], "accept": 3, "ipc": 3, "arrow": 3, "feather": 3, "orc": 3, "function": [3, 8, 13], "read": 3, "thu": 3, "its": [3, 5], "here": [3, 5, 8], "singl": [3, 5, 6, 8], "current": [3, 5], "support": [3, 5], "comput": [3, 5, 8], "environ": 3, "rais": [3, 5, 7], "valueerror": 3, "doe": [3, 5, 8], "json_data": 3, "json": [3, 8], "becom": 3, "df": [3, 8], "datafram": [3, 8, 13], "panda": [3, 8], "intend": [3, 5], "pipelin": [3, 5, 9, 11, 13], "flag": 3, "prompt": 3, "chunk": 3, "prepar": [3, 9], "later": 3, "direct": [3, 5], "futur": 3, "manner": 3, "polar": [3, 13], "filesystem": 3, "npy": [3, 8], "addit": [3, 6, 8, 13], "row_count": 4, "get_address_regex": 6, "get_angle_brackets_regex": 6, "get_cassette_name_regex": 6, "get_cassettes_spacing_regex": 6, "get_dash_digits_spacing_regex": 6, "get_dates_regex": 6, "get_decimal_segmented_numbers_regex": 6, "get_digits_words_spacing_regex": 6, "get_dimension_spacing_regex": 6, "get_dimensions_regex": 6, "get_duration_regex": 6, "get_escape_code_regex": 6, "get_fix_pluralization_regex": 6, "get_large_digits_seq_regex": 6, "get_large_float_seq_regex": 6, "get_leading_digit_punctuation_regex": 6, "get_leading_punctuation_regex": 6, "get_letter_num_seq_regex": 6, "get_literals_floats_spacing_regex": 6, "get_math_spacing_regex": 6, "get_measure_spacing_regex": 6, "get_multiple_punct_regex": 6, "get_percent_sign_regex": 6, "get_phone_number_regex": 6, "get_spaces_regex": 6, "get_special_punct_regex": 6, "get_specimen_regex": 6, "get_time_regex": 6, "get_trailing_punctuation_regex": 6, "get_trunc_decimals_regex": 6, "get_urls_regex": 6, "get_whitespace_regex": 6, "get_words_with_punct_spacing_regex": 6, "regexsubpair": [5, 6], "validate_list_str_col": 7, "validate_pyarrow_t": 7, "validate_str_col": 7, "train": [5, 8, 9, 13], "word2vec": [5, 8, 13], "model": [5, 8, 9], "vocab": [5, 8, 13], "word": [5, 6, 8, 13], "embed": [5, 8, 13], "gener": [5, 8, 13], "interfac": 5, "vector": 5, "represent": 5, "token": [5, 8, 13], "gensim": [5, 8], "librari": [5, 6, 13], "consid": [5, 13], "checkpoint": 5, "total": [5, 8], "frequenc": 5, "lower": [5, 6], "maximum": 5, "distanc": 5, "between": [5, 6, 13], "predict": 5, "size": 5, "float": [5, 6, 13], "threshold": 5, "high": 5, "randomli": 5, "downsampl": 5, "rang": 5, "0": [5, 6, 8], "1e": 5, "5": [5, 6, 8], "learn": [5, 9], "rate": 5, "linearli": 5, "drop": 5, "progress": 5, "iter": 5, "random": 5, "For": [5, 8], "determinist": 5, "thread": 5, "1": [5, 6, 8], "aka": [5, 8], "pythonhashse": 5, "mai": [5, 8], "present": [3, 5, 8], "primari": [], "get": [], "alter": [], "retriev": 5, "least": [5, 6], "one": [5, 8], "consum": 5, "must": 5, "correctli": [5, 13], "first": [5, 6], "posit": [5, 8], "second": 5, "embedding_matrix": [5, 8], "10": [5, 6, 8], "300": [5, 8], "6e": [5, 8], "05": [5, 8], "007": [5, 8], "20": [5, 6, 8], "30": [5, 6, 8], "42": [5, 8], "avoid": [5, 6], "instanti": 5, "instead": 5, "child": 5, "depend": 5, "hardwar": 5, "artifacts_config": 5, "indic": [5, 8], "config": [5, 13], "encod": 5, "label": [5, 8, 13], "numer": [5, 6], "processor": [5, 8, 13], "map": [5, 8, 13], "uniqu": [5, 8], "id": [5, 13], "convert": [3, 5, 8], "id_to_label": [5, 8], "revers": 5, "Of": 5, "downstream": 5, "back": [5, 6], "origin": 5, "retriv": 5, "becaus": [5, 8], "specifi": [5, 6, 7, 8], "creation": [5, 8], "notimplementederror": 5, "other": [5, 6], "typeerror": [5, 7], "clean": [5, 6, 8], "input": [3, 5], "design": [], "dure": 5, "option": [5, 13], "large_str": [5, 7], "empti": 5, "post": [5, 8, 13], "abil": 5, "renam": [5, 8], "vocabulari": 5, "construct": 5, "altern": 5, "flexibl": 5, "versu": 5, "concaten": 5, "left": 5, "separ": 5, "reli": 5, "multipl": [5, 6, 8, 13], "wai": [5, 8], "wasn": 5, "through": 5, "final": [5, 8], "element": 5, "hold": 5, "attributeerror": 5, "either": 5, "simpl": [5, 8], "break": 5, "down": 5, "unit": 5, "befor": [5, 13], "further": [5, 8], "charact": [5, 6], "divid": 5, "segment": [5, 13], "done": 5, "space": [5, 6, 13], "No": [5, 8], "test": [5, 8], "val": [5, 8], "assign": 5, "record": [5, 8], "two": [5, 6, 13], "scratch": 5, "previous": 5, "when": [5, 8, 13], "comparison": 5, "ensur": [5, 8, 13], "exactli": 5, "same": [3, 5], "includ": 5, "line": [5, 6, 10], "hash": 5, "repres": 5, "pseudocod": 5, "concat": 5, "thecorrespond": 5, "program": 5, "crash": 5, "combin": [5, 6], "identifi": 5, "oftentim": 5, "note": [5, 8], "group": 5, "keep": [5, 6, 8], "discret": 5, "x": [5, 6, 8], "had": [5, 8], "medic": 5, "patient": [5, 8], "end": [5, 8], "up": [5, 8, 13], "prevent": [5, 8], "potenti": 5, "inform": 5, "leakag": 5, "In": [5, 8], "case": [5, 8], "patient_id": 5, "effort": 5, "balanc": 5, "across": 5, "guarante": 5, "reproduc": [5, 8, 9], "prefer": 5, "try": 5, "15": [5, 8], "proport": [5, 13], "75": 5, "split_method": 5, "parent": 5, "do": [5, 8, 13], "directli": [5, 6], "curat": 6, "convert_escape_cod": 6, "remove_url": 6, "remove_special_punct": 6, "remove_multiple_punct": 6, "handle_angle_bracket": 6, "replace_percent_sign": 6, "handle_leading_digit_punct": 6, "remove_leading_punct": 6, "remove_trailing_punct": 6, "handle_words_with_punct_spac": 6, "handle_math_spac": 6, "handle_dimension_spac": 6, "handle_measure_spac": 6, "handle_cassettes_spac": 6, "handle_dash_digit_spac": 6, "handle_literals_floats_spac": 6, "fix_plur": 6, "handle_digits_words_spac": 6, "remove_phone_numb": 6, "remove_d": 6, "remove_tim": 6, "remove_address": 6, "remove_large_digits_seq": 6, "remove_large_floats_seq": 6, "trunc_decim": 6, "remove_cassette_nam": 6, "remove_duration_tim": 6, "remove_letter_num_seq": 6, "match": 6, "address": [6, 13], "num": [6, 13], "street": 6, "6": [6, 8], "2": [6, 8], "letter": [6, 13], "state": 6, "short": 6, "long": 6, "zip": 6, "code": [6, 8, 13], "param": 6, "exampl": [6, 8], "1034": 6, "north": 6, "500": 6, "west": 6, "provo": 6, "ut": 6, "84604": 6, "3337": 6, "addresstoken": [6, 8], "angl": [6, 13], "bracket": [6, 13], "fix": [6, 13], "But": 6, "90": 6, "cassett": [6, 13], "mark": [6, 13], "block": 6, "cassettetoken": [6, 8], "5e": 6, "6f": 6, "around": 6, "them": [6, 8], "g": 6, "3e": 6, "3f": 6, "dash": [6, 13], "digit": [6, 13], "right": 6, "cm": 6, "9": [6, 8], "7": [6, 8], "date": [6, 8, 13], "co": 6, "03": [6, 8], "09": 6, "2021": 6, "1015": 6, "complet": 6, "21": [6, 8], "34": [6, 8], "datetoken": [6, 8], "period": 6, "78": 6, "87": 6, "decimalsegmentednumbertoken": [6, 8], "attach": 6, "begin": 6, "9837648admiss": 6, "9837648": 6, "admiss": 6, "measur": [6, 13], "3x0": 6, "7x0": 6, "2d": 6, "3d": 6, "dimens": [6, 13], "33": [6, 8], "dimensiontoken": [6, 8], "durat": 6, "specimen": [6, 13], "treat": 6, "32d0909091": 6, "durationtoken": [6, 8], "escap": [6, 13], "x0d": 6, "x0a": 6, "codesx0dx0ax0d": 6, "r30": 6, "restor": 6, "plural": [6, 13], "noun": 6, "demag": 6, "punctuat": [6, 13], "sequenc": [6, 13], "456123456": 6, "digitsequencetoken": [6, 8], "456": 6, "123456": 6, "783": 6, "largefloattoken": [6, 8], "proce": 6, "elimin": 6, "insert": 6, "13": [6, 8], "unremark": 6, "22": [6, 8], "year": 6, "3a": 6, "anterior": 6, "result": [6, 9, 13], "c001234567": 6, "letterdigitstoken": [6, 8], "common": [6, 8, 13], "problem": 6, "r18": 6, "0admiss": 6, "diagnosi": 6, "bi": 6, "n13": 6, "30admiss": 6, "math": [6, 13], "symbol": 6, "aroud": 6, "95": [6, 8], "8": [6, 8], "mm": 6, "ml": [6, 8], "proper": 6, "spece": 6, "11th": 6, "11": [6, 8], "th": 6, "10mm": 6, "histolog": 6, "3cm": 6, "occur": 6, "_": [6, 8], "___": 6, "signatur": 6, "sign": [6, 8, 13], "percent": [6, 8, 13], "strong": 6, "intens": 6, "phone": [6, 13], "delimet": 6, "ph": 6, "123": 6, "7890": 6, "It": [6, 8], "4567890": 6, "phonenumtoken": [6, 8], "locat": 6, "arm": 6, "chosen": [6, 13], "wt": 6, "ck": 6, "focal": 6, "sth": 6, "ab": 6, "cd": 6, "speciman": 6, "009345": 6, "sh": 6, "0011300": 6, "expected_output": 6, "specimentoken": [6, 8], "time": [6, 8, 13], "am": 6, "30pm": 6, "52": 6, "07am": 6, "12": [6, 8], "pm": 6, "12am": 6, "timetoken": [6, 8], "trail": [6, 13], "decim": [6, 13], "99": 6, "url": [6, 13], "www": [6, 8], "merck": 6, "com": 6, "keytruda_pi": 6, "pdf": 6, "carriag": 6, "tab": 6, "invas": 6, "IN": 6, "situ": 6, "n": [6, 8], "hyphen": 6, "colon": 6, "length": 6, "d": [6, 8], "her": 6, "tiff": 6, "1k": 6, "descript": 6, "gleason": 6, "domain": 6, "order": [6, 8], "r": [6, 8], "whitespac": [6, 13], "confirm": 7, "schema": 7, "check": [7, 8], "offer": 8, "sever": 8, "load": [5, 8, 13], "now": 8, "go": 8, "show": 8, "pd": 8, "patient_id_numb": 8, "notabl": 8, "chang": 8, "exhibit": 8, "increas": 8, "aggress": 8, "impuls": 8, "distinct": 8, "deviat": 8, "jedi": 8, "preliminari": 8, "examin": 8, "reveal": 8, "heighten": 8, "midichlorian": 8, "count": 8, "unsettl": 8, "connect": 8, "dark": 8, "side": 8, "forc": [5, 8], "analysi": 8, "warrant": 8, "explor": 8, "extent": 8, "exposur": 8, "sith": 8, "teach": 8, "imper": 8, "monitor": 8, "close": 8, "worsen": 8, "symptom": 8, "engag": 8, "therapeut": 8, "intervent": 8, "aim": 8, "descent": 8, "assess": 8, "crucial": 8, "determin": 8, "efficaci": 8, "strategi": 8, "overal": [8, 13], "trajectori": 8, "dark_side_dx": 8, "succumb": 8, "stabl": 8, "commit": 8, "influenc": 8, "were": 8, "observ": 8, "ins": 8, "council": 8, "sustain": 8, "well": 8, "manifest": 8, "palpabl": 8, "establish": 8, "ethic": 8, "disclos": 8, "elev": 8, "unmistak": 8, "investig": 8, "ascertain": 8, "depth": 8, "doctrin": 8, "essenti": 8, "track": 8, "exacerb": 8, "advis": 8, "forestal": 8, "deeper": 8, "embrac": 8, "subsequ": 8, "evalu": 8, "pivot": 8, "gaug": 8, "effect": 8, "allegi": 8, "let": 8, "save": [5, 8], "link": 8, "doesn": 8, "look": 8, "how": [5, 8], "involv": 8, "pleas": 8, "Then": 8, "pathology_regex_set": 8, "pretti": 8, "fair": 8, "warn": 8, "far": 8, "slowest": 8, "part": 8, "routin": 8, "account": 8, "about": 8, "control": 8, "mani": [5, 8], "aspect": 8, "simpli": 8, "small": 8, "work": 8, "automat": 8, "again": 8, "straight": 8, "forward": 8, "actual": 8, "too": 8, "final_data": 8, "label_map": 8, "word_embed": 8, "39": 8, "45": 8, "44": 8, "23": 8, "31": 8, "41": 8, "35": 8, "24": 8, "18": 8, "pad": 8, "4": 8, "14": 8, "16": 8, "17": 8, "19": 8, "25": 8, "26": 8, "27": 8, "28": 8, "29": 8, "32": 8, "36": 8, "37": 8, "38": 8, "40": 8, "43": 8, "unk": 8, "matrix": 8, "00000000e": 8, "00": 8, "77135365e": 8, "86092880e": 8, "04": 8, "89334818e": 8, "73368554e": 8, "46754061e": 8, "34021775e": 8, "38128232e": 8, "09578541e": 8, "56378723e": 8, "29070841e": 8, "36099930e": 8, "10196943e": 8, "00287900e": 8, "46343326e": 8, "30044727e": 8, "16163127e": 8, "43721746e": 8, "17491091e": 8, "52751313e": 8, "05728725e": 8, "67492444e": 8, "12162175e": 8, "62762087e": 8, "12349084e": 8, "75368562e": 8, "78313626e": 8, "81814841e": 8, "88654257e": 8, "93711794e": 8, "90082072e": 8, "particularli": 8, "revolutionari": 8, "itself": 8, "hand": 8, "deal": 8, "featur": 8, "everyth": 8, "did": 8, "below": 8, "review": 8, "print": [8, 13], "2023": 8, "08": 8, "59": 8, "173578": 8, "_data_write_config": 8, "compress": 8, "snappi": 8, "use_dictionari": 8, "9a": 8, "fa": 8, "f": 8, "stepr": 8, "b": 8, "z": 8, "z0": 8, "cpamt": 8, "mlhc": 8, "m": [8, 13], "jan": 8, "feb": 8, "mar": 8, "apr": 8, "jun": 8, "jul": 8, "aug": 8, "sep": 8, "oct": 8, "nov": 8, "dec": 8, "ap": 8, "_artifacts_write_config": 8, "w2v_model": 8, "vocab_s": 8, "46": 8, "unk_id": 8, "id_to_label_format_arg": 8, "008010": 8, "memori": 8, "mb": 8, "013305": 8, "000863": 8, "003406": 8, "074747": 8, "531624": 8, "003835": 8, "03622": 8, "001360": 8, "008777": 8, "088891": 8, "batch": 9, "raw": 9, "integr": 9, "build": [9, 13], "infer": 9, "machin": 9, "instal": 9, "basic": 9, "packag": 9, "usag": 9, "regist": 9, "initi": 9, "collect": 9, "full": [9, 13], "tutori": 9, "script": 9, "advanc": 9, "subpackag": [], "submodul": [], "modul": [9, 11], "index": 9, "search": 9, "page": 9, "At": 10, "command": 10, "pip": 10, "content": [], "testdatahandl": 13, "methodnam": 13, "runtest": 13, "testcas": 13, "variou": 13, "test_dataset_from_duckdb": 13, "test_dataset_from_fil": 13, "test_dataset_from_json": 13, "test_dataset_from_panda": 13, "test_dataset_from_pyarrow": 13, "testembeddinggener": 13, "generetor": 13, "setup": 13, "hook": 13, "fixtur": 13, "exercis": 13, "teardown": 13, "deconstruct": 13, "test_multiple_text_col": 13, "test_write_data": 13, "testlabelprocessor": 13, "test_label_processor": 13, "gaudi": 13, "driver": 13, "main": 13, "suit": 13, "module_nam": 13, "testnorm": 13, "themselv": 13, "differ": [5, 13], "test_cpu_norm": 13, "testpipelin": 13, "test_adding_step": 13, "test_getting_paramet": 13, "test_global_write_config_appli": 13, "non": 13, "global": 13, "test_pipeline_run": 13, "testpostprocessor": 13, "test_cpu_postprocessor": 13, "large_list": 13, "conatin": 13, "testpretoken": 13, "test_pre_token": 13, "testregexmultipleexprees": 13, "screen": 13, "test_singl": 13, "testregexexpress": 13, "correct": 13, "test_angle_brackets_regex": 13, "test_cassette_name_regex": 13, "test_cassette_spacing_regex": 13, "test_dash_digits_spacing_regex": 13, "test_decimal_segmented_numbers_regex": 13, "test_digits_words_spacing_regex": 13, "test_dimension_spacing_regex": 13, "test_dimensions_regex": 13, "test_duration_regex": 13, "remova": 13, "test_escape_code_regex": 13, "test_fix_pluralization_regex": 13, "test_large_digits_seq_regex": 13, "test_large_floats_seq_regex": 13, "flaot": 13, "test_leading_digit_punctuation_regex": 13, "punct": 13, "test_leading_punctuation_seq_regex": 13, "test_letter_num_seq_regex": 13, "test_literals_float_spacing_regex": 13, "test_math_spacing_regex": 13, "test_measure_spacing_regex": 13, "abbravi": 13, "test_multiple_punct_regex": 13, "sequnti": 13, "test_percent_sign_regex": 13, "test_remove_address": 13, "test_remove_d": 13, "test_remove_phone_numb": 13, "test_remove_special_punct": 13, "test_remove_tim": 13, "test_spaces_regex": 13, "test_specimen_regex": 13, "test_trailing_punctuation_seq_regex": 13, "test_trunc_decimal_float_regex": 13, "truncat": 13, "test_urls_regex": 13, "test_whitespaces_regex": 13, "test_words_with_punct_spacing_regex": 13, "testsplitt": 13, "ha": 13, "test_new_splitt": 13, "whether": 5, "sentenc": 5, "dimension": 5, "higher": 5, "nois": 5, "drawn": 5, "over": 5, "corpu": 5, "subset": 3, "upon": 5}, "objects": {"bardi.data": [[3, 0, 0, "-", "data_handlers"], [4, 0, 0, "-", "utils"]], "bardi.data.data_handlers": [[3, 1, 1, "", "Dataset"], [3, 4, 1, "", "from_duckdb"], [3, 4, 1, "", "from_file"], [3, 4, 1, "", "from_json"], [3, 4, 1, "", "from_pandas"], [3, 4, 1, "", "from_pyarrow"], [3, 4, 1, "", "to_pandas"], [3, 4, 1, "", "to_polars"], [3, 4, 1, "", "write_file"]], "bardi.data.data_handlers.Dataset": [[3, 2, 1, "", "data"], [3, 3, 1, "", "get_parameters"], [3, 2, 1, "", "origin_file_path"], [3, 2, 1, "", "origin_format"], [3, 2, 1, "", "origin_query"], [3, 2, 1, "", "origin_row_count"]], "bardi.data.utils": [[4, 0, 0, "-", "pyarrow_utils"]], "bardi.data.utils.pyarrow_utils": [[4, 4, 1, "", "chunk_pyarrow_table"]], "bardi.nlp_engineering": [[5, 0, 0, "-", "embedding_generator"], [5, 0, 0, "-", "label_processor"], [5, 0, 0, "-", "normalizer"], [5, 0, 0, "-", "post_processor"], [5, 0, 0, "-", "pre_tokenizer"], [6, 0, 0, "-", "regex_library"], [5, 0, 0, "-", "splitter"], [7, 0, 0, "-", "utils"]], "bardi.nlp_engineering.embedding_generator": [[5, 1, 1, "", "CPUEmbeddingGenerator"], [5, 1, 1, "", "EmbeddingGenerator"], [5, 1, 1, "", "EmbeddingGeneratorArtifactsWriteConfig"]], "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator": [[5, 2, 1, "", "checkpoint_path"], [5, 2, 1, "", "cores"], [5, 2, 1, "", "epochs"], [5, 2, 1, "", "fields"], [5, 3, 1, "", "get_parameters"], [5, 2, 1, "", "load_saved_model"], [5, 2, 1, "", "min_alpha"], [5, 2, 1, "", "min_word_count"], [5, 2, 1, "", "negative"], [5, 3, 1, "", "run"], [5, 2, 1, "", "sample"], [5, 2, 1, "", "seed"], [5, 2, 1, "", "vector_size"], [5, 2, 1, "", "vocab_exclude_list"], [5, 2, 1, "", "window"], [5, 3, 1, "", "write_artifacts"]], "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator": [[5, 2, 1, "", "checkpoint_path"], [5, 2, 1, "", "cores"], [5, 2, 1, "", "epochs"], [5, 2, 1, "", "fields"], [5, 2, 1, "", "load_saved_model"], [5, 2, 1, "", "min_alpha"], [5, 2, 1, "", "min_word_count"], [5, 2, 1, "", "negative"], [5, 3, 1, "", "run"], [5, 2, 1, "", "sample"], [5, 2, 1, "", "seed"], [5, 3, 1, "", "set_write_config"], [5, 2, 1, "", "vector_size"], [5, 2, 1, "", "vocab_exclude_list"], [5, 2, 1, "", "window"]], "bardi.nlp_engineering.embedding_generator.EmbeddingGeneratorArtifactsWriteConfig": [[5, 2, 1, "", "embedding_matrix_format"], [5, 2, 1, "", "embedding_matrix_format_args"], [5, 2, 1, "", "vocab_format"], [5, 2, 1, "", "vocab_format_args"]], "bardi.nlp_engineering.label_processor": [[5, 1, 1, "", "CPULabelProcessor"], [5, 1, 1, "", "LabelProcessor"], [5, 1, 1, "", "LabelProcessorArtifactsWriteConfig"]], "bardi.nlp_engineering.label_processor.CPULabelProcessor": [[5, 2, 1, "", "fields"], [5, 3, 1, "", "get_parameters"], [5, 2, 1, "", "id_to_label"], [5, 2, 1, "", "mapping"], [5, 2, 1, "", "method"], [5, 3, 1, "", "run"], [5, 3, 1, "", "write_artifacts"]], "bardi.nlp_engineering.label_processor.LabelProcessor": [[5, 2, 1, "", "fields"], [5, 2, 1, "", "method"], [5, 3, 1, "", "run"], [5, 3, 1, "", "set_write_config"]], "bardi.nlp_engineering.label_processor.LabelProcessorArtifactsWriteConfig": [[5, 2, 1, "", "id_to_label_args"], [5, 2, 1, "", "id_to_label_format"]], "bardi.nlp_engineering.normalizer": [[5, 1, 1, "", "CPUNormalizer"], [5, 1, 1, "", "Normalizer"]], "bardi.nlp_engineering.normalizer.CPUNormalizer": [[5, 2, 1, "", "fields"], [5, 2, 1, "", "lowercase"], [5, 2, 1, "", "regex_set"], [5, 3, 1, "", "run"]], "bardi.nlp_engineering.normalizer.Normalizer": [[5, 2, 1, "", "fields"], [5, 2, 1, "", "lowercase"], [5, 2, 1, "", "regex_set"], [5, 3, 1, "", "run"]], "bardi.nlp_engineering.post_processor": [[5, 1, 1, "", "CPUPostProcessor"], [5, 1, 1, "", "PostProcessor"]], "bardi.nlp_engineering.post_processor.CPUPostProcessor": [[5, 2, 1, "", "artifacts"], [5, 2, 1, "", "concat_fields"], [5, 2, 1, "", "data"], [5, 2, 1, "", "field_rename"], [5, 2, 1, "", "fields"], [5, 3, 1, "", "get_parameters"], [5, 2, 1, "id0", "id_to_token"], [5, 3, 1, "", "run"]], "bardi.nlp_engineering.post_processor.PostProcessor": [[5, 2, 1, "", "concat_fields"], [5, 2, 1, "", "field_rename"], [5, 2, 1, "", "fields"], [5, 2, 1, "", "id_to_token"], [5, 3, 1, "", "run"]], "bardi.nlp_engineering.pre_tokenizer": [[5, 1, 1, "", "CPUPreTokenizer"], [5, 1, 1, "", "PreTokenizer"]], "bardi.nlp_engineering.pre_tokenizer.CPUPreTokenizer": [[5, 2, 1, "", "fields"], [5, 3, 1, "", "run"], [5, 2, 1, "", "split_pattern"]], "bardi.nlp_engineering.pre_tokenizer.PreTokenizer": [[5, 2, 1, "", "fields"], [5, 3, 1, "", "run"], [5, 2, 1, "", "split_pattern"]], "bardi.nlp_engineering.regex_library": [[6, 0, 0, "-", "pathology_report"], [6, 0, 0, "-", "regex_lib"], [6, 0, 0, "-", "regex_set"]], "bardi.nlp_engineering.regex_library.pathology_report": [[6, 1, 1, "", "PathologyReportRegexSet"]], "bardi.nlp_engineering.regex_library.regex_lib": [[6, 4, 1, "", "get_address_regex"], [6, 4, 1, "", "get_angle_brackets_regex"], [6, 4, 1, "", "get_cassette_name_regex"], [6, 4, 1, "", "get_cassettes_spacing_regex"], [6, 4, 1, "", "get_dash_digits_spacing_regex"], [6, 4, 1, "", "get_dates_regex"], [6, 4, 1, "", "get_decimal_segmented_numbers_regex"], [6, 4, 1, "", "get_digits_words_spacing_regex"], [6, 4, 1, "", "get_dimension_spacing_regex"], [6, 4, 1, "", "get_dimensions_regex"], [6, 4, 1, "", "get_duration_regex"], [6, 4, 1, "", "get_escape_code_regex"], [6, 4, 1, "", "get_fix_pluralization_regex"], [6, 4, 1, "", "get_large_digits_seq_regex"], [6, 4, 1, "", "get_large_float_seq_regex"], [6, 4, 1, "", "get_leading_digit_punctuation_regex"], [6, 4, 1, "", "get_leading_punctuation_regex"], [6, 4, 1, "", "get_letter_num_seq_regex"], [6, 4, 1, "", "get_literals_floats_spacing_regex"], [6, 4, 1, "", "get_math_spacing_regex"], [6, 4, 1, "", "get_measure_spacing_regex"], [6, 4, 1, "", "get_multiple_punct_regex"], [6, 4, 1, "", "get_percent_sign_regex"], [6, 4, 1, "", "get_phone_number_regex"], [6, 4, 1, "", "get_spaces_regex"], [6, 4, 1, "", "get_special_punct_regex"], [6, 4, 1, "", "get_specimen_regex"], [6, 4, 1, "", "get_time_regex"], [6, 4, 1, "", "get_trailing_punctuation_regex"], [6, 4, 1, "", "get_trunc_decimals_regex"], [6, 4, 1, "", "get_urls_regex"], [6, 4, 1, "", "get_whitespace_regex"], [6, 4, 1, "", "get_words_with_punct_spacing_regex"]], "bardi.nlp_engineering.regex_library.regex_set": [[6, 1, 1, "", "RegexSet"], [6, 1, 1, "", "RegexSubPair"]], "bardi.nlp_engineering.regex_library.regex_set.RegexSet": [[6, 3, 1, "", "get_regex_set"]], "bardi.nlp_engineering.regex_library.regex_set.RegexSubPair": [[6, 2, 1, "id0", "regex_str"], [6, 2, 1, "id1", "sub_str"]], "bardi.nlp_engineering.splitter": [[5, 1, 1, "", "CPUSplitter"], [5, 1, 1, "", "MapSplit"], [5, 1, 1, "", "NewSplit"], [5, 1, 1, "", "Splitter"]], "bardi.nlp_engineering.splitter.CPUSplitter": [[5, 2, 1, "", "group_cols"], [5, 2, 1, "", "label_cols"], [5, 2, 1, "", "num_splits"], [5, 2, 1, "", "random_seed"], [5, 3, 1, "", "run"], [5, 2, 1, "", "split_mapping"], [5, 2, 1, "", "split_proportions"], [5, 2, 1, "", "split_type"], [5, 2, 1, "", "unique_record_cols"]], "bardi.nlp_engineering.splitter.MapSplit": [[5, 2, 1, "", "split_mapping"], [5, 2, 1, "", "unique_record_cols"]], "bardi.nlp_engineering.splitter.NewSplit": [[5, 2, 1, "", "group_cols"], [5, 2, 1, "", "label_cols"], [5, 2, 1, "", "random_seed"], [5, 2, 1, "", "split_proportions"], [5, 2, 1, "", "unique_record_cols"]], "bardi.nlp_engineering.splitter.Splitter": [[5, 3, 1, "", "run"], [5, 2, 1, "", "split_method"]], "bardi.nlp_engineering.utils": [[7, 0, 0, "-", "validations"]], "bardi.nlp_engineering.utils.validations": [[7, 4, 1, "", "validate_list_str_cols"], [7, 4, 1, "", "validate_pyarrow_table"], [7, 4, 1, "", "validate_str_cols"]], "bardi": [[2, 0, 0, "-", "pipeline"]], "bardi.pipeline": [[2, 1, 1, "", "DataWriteConfig"], [2, 1, 1, "", "Pipeline"], [2, 1, 1, "", "Step"]], "bardi.pipeline.DataWriteConfig": [[2, 2, 1, "", "data_format"], [2, 2, 1, "", "data_format_args"]], "bardi.pipeline.Pipeline": [[2, 3, 1, "", "add_step"], [2, 3, 1, "", "get_parameters"], [2, 3, 1, "", "run_pipeline"]], "bardi.pipeline.Step": [[2, 3, 1, "", "get_parameters"], [2, 3, 1, "", "run"], [2, 3, 1, "", "set_write_config"], [2, 3, 1, "", "write_artifacts"], [2, 3, 1, "", "write_data"]], "": [[13, 0, 0, "-", "tests"]], "tests": [[13, 0, 0, "-", "data_handlers_tests"], [13, 0, 0, "-", "embedding_generator_tests"], [13, 0, 0, "-", "label_processor_tests"], [13, 0, 0, "-", "main_test"], [13, 0, 0, "-", "normalizer_tests"], [13, 0, 0, "-", "pipeline_tests"], [13, 0, 0, "-", "postprocessor_tests"], [13, 0, 0, "-", "pretokenizer_tests"], [13, 0, 0, "-", "regex_multi_test"], [13, 0, 0, "-", "regex_tests"], [13, 0, 0, "-", "splitter_tests"]], "tests.data_handlers_tests": [[13, 1, 1, "", "TestDataHandlers"]], "tests.data_handlers_tests.TestDataHandlers": [[13, 3, 1, "", "test_dataset_from_duckdb"], [13, 3, 1, "", "test_dataset_from_file"], [13, 3, 1, "", "test_dataset_from_json"], [13, 3, 1, "", "test_dataset_from_pandas"], [13, 3, 1, "", "test_dataset_from_pyarrow"]], "tests.embedding_generator_tests": [[13, 1, 1, "", "TestEmbeddingGenerator"]], "tests.embedding_generator_tests.TestEmbeddingGenerator": [[13, 3, 1, "", "setUp"], [13, 3, 1, "", "tearDown"], [13, 3, 1, "", "test_multiple_text_cols"], [13, 3, 1, "", "test_write_data"]], "tests.label_processor_tests": [[13, 1, 1, "", "TestLabelProcessor"]], "tests.label_processor_tests.TestLabelProcessor": [[13, 3, 1, "", "setUp"], [13, 3, 1, "", "test_label_processor"], [13, 3, 1, "", "test_write_data"]], "tests.main_test": [[13, 4, 1, "", "main"], [13, 4, 1, "", "suite"]], "tests.normalizer_tests": [[13, 1, 1, "", "TestNormalizer"]], "tests.normalizer_tests.TestNormalizer": [[13, 3, 1, "", "setUp"], [13, 3, 1, "", "test_cpu_normalizer"], [13, 3, 1, "", "test_write_data"]], "tests.pipeline_tests": [[13, 1, 1, "", "TestPipeline"]], "tests.pipeline_tests.TestPipeline": [[13, 3, 1, "", "setUp"], [13, 3, 1, "", "test_adding_steps"], [13, 3, 1, "", "test_getting_parameters"], [13, 3, 1, "", "test_global_write_config_applied"], [13, 3, 1, "", "test_pipeline_run"]], "tests.postprocessor_tests": [[13, 1, 1, "", "TestPostProcessor"]], "tests.postprocessor_tests.TestPostProcessor": [[13, 3, 1, "", "setUp"], [13, 3, 1, "", "test_cpu_postprocessor"], [13, 3, 1, "", "test_write_data"]], "tests.pretokenizer_tests": [[13, 1, 1, "", "TestPreTokenizer"]], "tests.pretokenizer_tests.TestPreTokenizer": [[13, 3, 1, "", "setUp"], [13, 3, 1, "", "test_pre_tokenizer"], [13, 3, 1, "", "test_write_data"]], "tests.regex_multi_test": [[13, 1, 1, "", "TestRegexMultipleExpreesions"]], "tests.regex_multi_test.TestRegexMultipleExpreesions": [[13, 3, 1, "", "setUp"], [13, 3, 1, "", "test_single"]], "tests.regex_tests": [[13, 1, 1, "", "TestRegexExpressions"]], "tests.regex_tests.TestRegexExpressions": [[13, 3, 1, "", "test_angle_brackets_regex"], [13, 3, 1, "", "test_cassette_name_regex"], [13, 3, 1, "", "test_cassette_spacing_regex"], [13, 3, 1, "", "test_dash_digits_spacing_regex"], [13, 3, 1, "", "test_decimal_segmented_numbers_regex"], [13, 3, 1, "", "test_digits_words_spacing_regex"], [13, 3, 1, "", "test_dimension_spacing_regex"], [13, 3, 1, "", "test_dimensions_regex"], [13, 3, 1, "", "test_duration_regex"], [13, 3, 1, "", "test_escape_code_regex"], [13, 3, 1, "", "test_fix_pluralization_regex"], [13, 3, 1, "", "test_large_digits_seq_regex"], [13, 3, 1, "", "test_large_floats_seq_regex"], [13, 3, 1, "", "test_leading_digit_punctuation_regex"], [13, 3, 1, "", "test_leading_punctuation_seq_regex"], [13, 3, 1, "", "test_letter_num_seq_regex"], [13, 3, 1, "", "test_literals_float_spacing_regex"], [13, 3, 1, "", "test_math_spacing_regex"], [13, 3, 1, "", "test_measure_spacing_regex"], [13, 3, 1, "", "test_multiple_punct_regex"], [13, 3, 1, "", "test_percent_sign_regex"], [13, 3, 1, "", "test_remove_addresses"], [13, 3, 1, "", "test_remove_dates"], [13, 3, 1, "", "test_remove_phone_numbers"], [13, 3, 1, "", "test_remove_special_punct"], [13, 3, 1, "", "test_remove_times"], [13, 3, 1, "", "test_spaces_regex"], [13, 3, 1, "", "test_specimen_regex"], [13, 3, 1, "", "test_trailing_punctuation_seq_regex"], [13, 3, 1, "", "test_trunc_decimal_float_regex"], [13, 3, 1, "", "test_urls_regex"], [13, 3, 1, "", "test_whitespaces_regex"], [13, 3, 1, "", "test_words_with_punct_spacing_regex"]], "tests.splitter_tests": [[13, 1, 1, "", "TestSplitter"]], "tests.splitter_tests.TestSplitter": [[13, 3, 1, "", "setUp"], [13, 3, 1, "", "test_new_splitter"], [13, 3, 1, "", "test_write_data"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "function", "Python function"]}, "titleterms": {"bardi": [0, 2, 3, 4, 5, 6, 7, 8, 9, 11], "advanc": 1, "packag": [1, 3, 4, 5, 6, 7, 8, 13], "usag": [1, 8], "normal": [1, 5, 8], "custom": 1, "creat": 1, "pipelin": [1, 2, 8], "step": 1, "subpackag": [], "submodul": [4, 6, 7, 13], "modul": [2, 3, 4, 5, 6, 7, 12, 13], "content": [4, 6, 7, 9, 13], "data": [3, 4, 8], "data_handl": 3, "util": [4, 7], "pyarrow_util": 4, "nlp_engin": [5, 6, 7], "embedding_gener": 5, "label_processor": 5, "post_processor": 5, "pre_token": 5, "splitter": 5, "regex_librari": 6, "pathology_report": 6, "regex_lib": 6, "regex_set": 6, "valid": 7, "basic": 8, "prepar": 8, "sampl": 8, "set": 8, "regist": 8, "dataset": 8, "initi": 8, "pre": 8, "process": 8, "ad": 8, "our": 8, "pretoken": 8, "an": 8, "embeddinggener": 8, "postprocessor": 8, "labelprocessor": 8, "run": 8, "result": 8, "collect": 8, "metadata": 8, "full": 8, "tutori": 8, "script": 8, "welcom": 9, "": 9, "document": 9, "indic": 9, "tabl": 9, "instal": 10, "setup": 12, "test": 13, "data_handlers_test": 13, "embedding_generator_test": 13, "label_processor_test": 13, "main_test": 13, "normalizer_test": 13, "pipeline_test": 13, "postprocessor_test": 13, "pretokenizer_test": 13, "regex_multi_test": 13, "regex_test": 13, "splitter_test": 13}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"bardi": [[0, "module-bardi"], [11, "bardi"]], "Advanced Package Usage": [[1, "advanced-package-usage"]], "Normalizer Customizations": [[1, "normalizer-customizations"]], "Creating a Custom Pipeline Step": [[1, "creating-a-custom-pipeline-step"]], "Submodules": [[4, "submodules"], [7, "submodules"], [6, "submodules"], [13, "submodules"]], "Module contents": [[4, "module-bardi.data.utils"], [7, "module-bardi.nlp_engineering.utils"], [6, "module-bardi.nlp_engineering.regex_library"], [13, "module-tests"]], "bardi.data.utils package": [[4, "bardi-data-utils-package"]], "bardi.data.utils.pyarrow_utils module": [[4, "module-bardi.data.utils.pyarrow_utils"]], "bardi.nlp_engineering.utils package": [[7, "bardi-nlp-engineering-utils-package"]], "bardi.nlp_engineering.utils.validations module": [[7, "module-bardi.nlp_engineering.utils.validations"]], "Basic Package Usage": [[8, "basic-package-usage"]], "Preparing a Sample Set of Data": [[8, "preparing-a-sample-set-of-data"]], "Register the Sample Data as a Bardi Dataset": [[8, "register-the-sample-data-as-a-bardi-dataset"]], "Initialize a Pre-Processing Pipeline": [[8, "initialize-a-pre-processing-pipeline"]], "Adding a Normalizer to our Pipeline": [[8, "adding-a-normalizer-to-our-pipeline"]], "Adding a PreTokenizer": [[8, "adding-a-pretokenizer"]], "Adding an EmbeddingGenerator": [[8, "adding-an-embeddinggenerator"]], "Adding a PostProcessor": [[8, "adding-a-postprocessor"]], "Adding a LabelProcessor": [[8, "adding-a-labelprocessor"]], "Running the Pipeline": [[8, "running-the-pipeline"]], "Results": [[8, "results"]], "Collecting Metadata": [[8, "collecting-metadata"]], "Full Tutorial Script": [[8, "full-tutorial-script"]], "Installation": [[10, "installation"]], "Welcome to bardi\u2019s documentation!": [[9, "welcome-to-bardi-s-documentation"]], "Contents:": [[9, null]], "Indices and tables": [[9, "indices-and-tables"]], "bardi.nlp_engineering.regex_library package": [[6, "bardi-nlp-engineering-regex-library-package"]], "bardi.nlp_engineering.regex_library.pathology_report module": [[6, "module-bardi.nlp_engineering.regex_library.pathology_report"]], "bardi.nlp_engineering.regex_library.regex_lib module": [[6, "module-bardi.nlp_engineering.regex_library.regex_lib"]], "bardi.nlp_engineering.regex_library.regex_set module": [[6, "module-bardi.nlp_engineering.regex_library.regex_set"]], "bardi.nlp_engineering package": [[5, "bardi-nlp-engineering-package"]], "bardi.nlp_engineering.normalizer module": [[5, "module-bardi.nlp_engineering.normalizer"]], "bardi.nlp_engineering.pre_tokenizer module": [[5, "module-bardi.nlp_engineering.pre_tokenizer"]], "bardi.nlp_engineering.embedding_generator module": [[5, "module-bardi.nlp_engineering.embedding_generator"]], "bardi.nlp_engineering.post_processor module": [[5, "module-bardi.nlp_engineering.post_processor"]], "bardi.nlp_engineering.label_processor module": [[5, "module-bardi.nlp_engineering.label_processor"]], "bardi.nlp_engineering.splitter module": [[5, "module-bardi.nlp_engineering.splitter"]], "bardi.pipeline": [[2, "bardi-pipeline"]], "bardi.pipeline module": [[2, "module-bardi.pipeline"]], "bardi.data package": [[3, "bardi-data-package"]], "bardi.data.data_handlers module": [[3, "module-bardi.data.data_handlers"]], "setup module": [[12, "setup-module"]], "tests package": [[13, "tests-package"]], "tests.data_handlers_tests module": [[13, "module-tests.data_handlers_tests"]], "tests.embedding_generator_tests module": [[13, "module-tests.embedding_generator_tests"]], "tests.label_processor_tests module": [[13, "module-tests.label_processor_tests"]], "tests.main_test module": [[13, "module-tests.main_test"]], "tests.normalizer_tests module": [[13, "module-tests.normalizer_tests"]], "tests.pipeline_tests module": [[13, "module-tests.pipeline_tests"]], "tests.postprocessor_tests module": [[13, "module-tests.postprocessor_tests"]], "tests.pretokenizer_tests module": [[13, "module-tests.pretokenizer_tests"]], "tests.regex_multi_test module": [[13, "module-tests.regex_multi_test"]], "tests.regex_tests module": [[13, "module-tests.regex_tests"]], "tests.splitter_tests module": [[13, "module-tests.splitter_tests"]]}, "indexentries": {"datawriteconfig (class in bardi.pipeline)": [[2, "bardi.pipeline.DataWriteConfig"]], "pipeline (class in bardi.pipeline)": [[2, "bardi.pipeline.Pipeline"]], "step (class in bardi.pipeline)": [[2, "bardi.pipeline.Step"]], "add_step() (bardi.pipeline.pipeline method)": [[2, "bardi.pipeline.Pipeline.add_step"]], "bardi.pipeline": [[2, "module-bardi.pipeline"]], "data_format (bardi.pipeline.datawriteconfig attribute)": [[2, "bardi.pipeline.DataWriteConfig.data_format"]], "data_format_args (bardi.pipeline.datawriteconfig attribute)": [[2, "bardi.pipeline.DataWriteConfig.data_format_args"]], "get_parameters() (bardi.pipeline.pipeline method)": [[2, "bardi.pipeline.Pipeline.get_parameters"]], "get_parameters() (bardi.pipeline.step method)": [[2, "bardi.pipeline.Step.get_parameters"]], "module": [[2, "module-bardi.pipeline"], [3, "module-bardi.data.data_handlers"], [13, "module-tests"], [13, "module-tests.data_handlers_tests"], [13, "module-tests.embedding_generator_tests"], [13, "module-tests.label_processor_tests"], [13, "module-tests.main_test"], [13, "module-tests.normalizer_tests"], [13, "module-tests.pipeline_tests"], [13, "module-tests.postprocessor_tests"], [13, "module-tests.pretokenizer_tests"], [13, "module-tests.regex_multi_test"], [13, "module-tests.regex_tests"], [13, "module-tests.splitter_tests"]], "run() (bardi.pipeline.step method)": [[2, "bardi.pipeline.Step.run"]], "run_pipeline() (bardi.pipeline.pipeline method)": [[2, "bardi.pipeline.Pipeline.run_pipeline"]], "set_write_config() (bardi.pipeline.step method)": [[2, "bardi.pipeline.Step.set_write_config"]], "write_artifacts() (bardi.pipeline.step method)": [[2, "bardi.pipeline.Step.write_artifacts"]], "write_data() (bardi.pipeline.step method)": [[2, "bardi.pipeline.Step.write_data"]], "dataset (class in bardi.data.data_handlers)": [[3, "bardi.data.data_handlers.Dataset"]], "bardi.data.data_handlers": [[3, "module-bardi.data.data_handlers"]], "data (bardi.data.data_handlers.dataset attribute)": [[3, "bardi.data.data_handlers.Dataset.data"]], "from_duckdb() (in module bardi.data.data_handlers)": [[3, "bardi.data.data_handlers.from_duckdb"]], "from_file() (in module bardi.data.data_handlers)": [[3, "bardi.data.data_handlers.from_file"]], "from_json() (in module bardi.data.data_handlers)": [[3, "bardi.data.data_handlers.from_json"]], "from_pandas() (in module bardi.data.data_handlers)": [[3, "bardi.data.data_handlers.from_pandas"]], "from_pyarrow() (in module bardi.data.data_handlers)": [[3, "bardi.data.data_handlers.from_pyarrow"]], "get_parameters() (bardi.data.data_handlers.dataset method)": [[3, "bardi.data.data_handlers.Dataset.get_parameters"]], "origin_file_path (bardi.data.data_handlers.dataset attribute)": [[3, "bardi.data.data_handlers.Dataset.origin_file_path"]], "origin_format (bardi.data.data_handlers.dataset attribute)": [[3, "bardi.data.data_handlers.Dataset.origin_format"]], "origin_query (bardi.data.data_handlers.dataset attribute)": [[3, "bardi.data.data_handlers.Dataset.origin_query"]], "origin_row_count (bardi.data.data_handlers.dataset attribute)": [[3, "bardi.data.data_handlers.Dataset.origin_row_count"]], "to_pandas() (in module bardi.data.data_handlers)": [[3, "bardi.data.data_handlers.to_pandas"]], "to_polars() (in module bardi.data.data_handlers)": [[3, "bardi.data.data_handlers.to_polars"]], "write_file() (in module bardi.data.data_handlers)": [[3, "bardi.data.data_handlers.write_file"]], "testdatahandlers (class in tests.data_handlers_tests)": [[13, "tests.data_handlers_tests.TestDataHandlers"]], "testembeddinggenerator (class in tests.embedding_generator_tests)": [[13, "tests.embedding_generator_tests.TestEmbeddingGenerator"]], "testlabelprocessor (class in tests.label_processor_tests)": [[13, "tests.label_processor_tests.TestLabelProcessor"]], "testnormalizer (class in tests.normalizer_tests)": [[13, "tests.normalizer_tests.TestNormalizer"]], "testpipeline (class in tests.pipeline_tests)": [[13, "tests.pipeline_tests.TestPipeline"]], "testpostprocessor (class in tests.postprocessor_tests)": [[13, "tests.postprocessor_tests.TestPostProcessor"]], "testpretokenizer (class in tests.pretokenizer_tests)": [[13, "tests.pretokenizer_tests.TestPreTokenizer"]], "testregexexpressions (class in tests.regex_tests)": [[13, "tests.regex_tests.TestRegexExpressions"]], "testregexmultipleexpreesions (class in tests.regex_multi_test)": [[13, "tests.regex_multi_test.TestRegexMultipleExpreesions"]], "testsplitter (class in tests.splitter_tests)": [[13, "tests.splitter_tests.TestSplitter"]], "main() (in module tests.main_test)": [[13, "tests.main_test.main"]], "setup() (tests.embedding_generator_tests.testembeddinggenerator method)": [[13, "tests.embedding_generator_tests.TestEmbeddingGenerator.setUp"]], "setup() (tests.label_processor_tests.testlabelprocessor method)": [[13, "tests.label_processor_tests.TestLabelProcessor.setUp"]], "setup() (tests.normalizer_tests.testnormalizer method)": [[13, "tests.normalizer_tests.TestNormalizer.setUp"]], "setup() (tests.pipeline_tests.testpipeline method)": [[13, "tests.pipeline_tests.TestPipeline.setUp"]], "setup() (tests.postprocessor_tests.testpostprocessor method)": [[13, "tests.postprocessor_tests.TestPostProcessor.setUp"]], "setup() (tests.pretokenizer_tests.testpretokenizer method)": [[13, "tests.pretokenizer_tests.TestPreTokenizer.setUp"]], "setup() (tests.regex_multi_test.testregexmultipleexpreesions method)": [[13, "tests.regex_multi_test.TestRegexMultipleExpreesions.setUp"]], "setup() (tests.splitter_tests.testsplitter method)": [[13, "tests.splitter_tests.TestSplitter.setUp"]], "suite() (in module tests.main_test)": [[13, "tests.main_test.suite"]], "teardown() (tests.embedding_generator_tests.testembeddinggenerator method)": [[13, "tests.embedding_generator_tests.TestEmbeddingGenerator.tearDown"]], "test_adding_steps() (tests.pipeline_tests.testpipeline method)": [[13, "tests.pipeline_tests.TestPipeline.test_adding_steps"]], "test_angle_brackets_regex() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_angle_brackets_regex"]], "test_cassette_name_regex() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_cassette_name_regex"]], "test_cassette_spacing_regex() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_cassette_spacing_regex"]], "test_cpu_normalizer() (tests.normalizer_tests.testnormalizer method)": [[13, "tests.normalizer_tests.TestNormalizer.test_cpu_normalizer"]], "test_cpu_postprocessor() (tests.postprocessor_tests.testpostprocessor method)": [[13, "tests.postprocessor_tests.TestPostProcessor.test_cpu_postprocessor"]], "test_dash_digits_spacing_regex() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_dash_digits_spacing_regex"]], "test_dataset_from_duckdb() (tests.data_handlers_tests.testdatahandlers method)": [[13, "tests.data_handlers_tests.TestDataHandlers.test_dataset_from_duckdb"]], "test_dataset_from_file() (tests.data_handlers_tests.testdatahandlers method)": [[13, "tests.data_handlers_tests.TestDataHandlers.test_dataset_from_file"]], "test_dataset_from_json() (tests.data_handlers_tests.testdatahandlers method)": [[13, "tests.data_handlers_tests.TestDataHandlers.test_dataset_from_json"]], "test_dataset_from_pandas() (tests.data_handlers_tests.testdatahandlers method)": [[13, "tests.data_handlers_tests.TestDataHandlers.test_dataset_from_pandas"]], "test_dataset_from_pyarrow() (tests.data_handlers_tests.testdatahandlers method)": [[13, "tests.data_handlers_tests.TestDataHandlers.test_dataset_from_pyarrow"]], "test_decimal_segmented_numbers_regex() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_decimal_segmented_numbers_regex"]], "test_digits_words_spacing_regex() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_digits_words_spacing_regex"]], "test_dimension_spacing_regex() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_dimension_spacing_regex"]], "test_dimensions_regex() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_dimensions_regex"]], "test_duration_regex() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_duration_regex"]], "test_escape_code_regex() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_escape_code_regex"]], "test_fix_pluralization_regex() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_fix_pluralization_regex"]], "test_getting_parameters() (tests.pipeline_tests.testpipeline method)": [[13, "tests.pipeline_tests.TestPipeline.test_getting_parameters"]], "test_global_write_config_applied() (tests.pipeline_tests.testpipeline method)": [[13, "tests.pipeline_tests.TestPipeline.test_global_write_config_applied"]], "test_label_processor() (tests.label_processor_tests.testlabelprocessor method)": [[13, "tests.label_processor_tests.TestLabelProcessor.test_label_processor"]], "test_large_digits_seq_regex() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_large_digits_seq_regex"]], "test_large_floats_seq_regex() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_large_floats_seq_regex"]], "test_leading_digit_punctuation_regex() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_leading_digit_punctuation_regex"]], "test_leading_punctuation_seq_regex() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_leading_punctuation_seq_regex"]], "test_letter_num_seq_regex() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_letter_num_seq_regex"]], "test_literals_float_spacing_regex() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_literals_float_spacing_regex"]], "test_math_spacing_regex() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_math_spacing_regex"]], "test_measure_spacing_regex() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_measure_spacing_regex"]], "test_multiple_punct_regex() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_multiple_punct_regex"]], "test_multiple_text_cols() (tests.embedding_generator_tests.testembeddinggenerator method)": [[13, "tests.embedding_generator_tests.TestEmbeddingGenerator.test_multiple_text_cols"]], "test_new_splitter() (tests.splitter_tests.testsplitter method)": [[13, "tests.splitter_tests.TestSplitter.test_new_splitter"]], "test_percent_sign_regex() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_percent_sign_regex"]], "test_pipeline_run() (tests.pipeline_tests.testpipeline method)": [[13, "tests.pipeline_tests.TestPipeline.test_pipeline_run"]], "test_pre_tokenizer() (tests.pretokenizer_tests.testpretokenizer method)": [[13, "tests.pretokenizer_tests.TestPreTokenizer.test_pre_tokenizer"]], "test_remove_addresses() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_remove_addresses"]], "test_remove_dates() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_remove_dates"]], "test_remove_phone_numbers() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_remove_phone_numbers"]], "test_remove_special_punct() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_remove_special_punct"]], "test_remove_times() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_remove_times"]], "test_single() (tests.regex_multi_test.testregexmultipleexpreesions method)": [[13, "tests.regex_multi_test.TestRegexMultipleExpreesions.test_single"]], "test_spaces_regex() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_spaces_regex"]], "test_specimen_regex() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_specimen_regex"]], "test_trailing_punctuation_seq_regex() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_trailing_punctuation_seq_regex"]], "test_trunc_decimal_float_regex() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_trunc_decimal_float_regex"]], "test_urls_regex() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_urls_regex"]], "test_whitespaces_regex() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_whitespaces_regex"]], "test_words_with_punct_spacing_regex() (tests.regex_tests.testregexexpressions method)": [[13, "tests.regex_tests.TestRegexExpressions.test_words_with_punct_spacing_regex"]], "test_write_data() (tests.embedding_generator_tests.testembeddinggenerator method)": [[13, "tests.embedding_generator_tests.TestEmbeddingGenerator.test_write_data"]], "test_write_data() (tests.label_processor_tests.testlabelprocessor method)": [[13, "tests.label_processor_tests.TestLabelProcessor.test_write_data"]], "test_write_data() (tests.normalizer_tests.testnormalizer method)": [[13, "tests.normalizer_tests.TestNormalizer.test_write_data"]], "test_write_data() (tests.postprocessor_tests.testpostprocessor method)": [[13, "tests.postprocessor_tests.TestPostProcessor.test_write_data"]], "test_write_data() (tests.pretokenizer_tests.testpretokenizer method)": [[13, "tests.pretokenizer_tests.TestPreTokenizer.test_write_data"]], "test_write_data() (tests.splitter_tests.testsplitter method)": [[13, "tests.splitter_tests.TestSplitter.test_write_data"]], "tests": [[13, "module-tests"]], "tests.data_handlers_tests": [[13, "module-tests.data_handlers_tests"]], "tests.embedding_generator_tests": [[13, "module-tests.embedding_generator_tests"]], "tests.label_processor_tests": [[13, "module-tests.label_processor_tests"]], "tests.main_test": [[13, "module-tests.main_test"]], "tests.normalizer_tests": [[13, "module-tests.normalizer_tests"]], "tests.pipeline_tests": [[13, "module-tests.pipeline_tests"]], "tests.postprocessor_tests": [[13, "module-tests.postprocessor_tests"]], "tests.pretokenizer_tests": [[13, "module-tests.pretokenizer_tests"]], "tests.regex_multi_test": [[13, "module-tests.regex_multi_test"]], "tests.regex_tests": [[13, "module-tests.regex_tests"]], "tests.splitter_tests": [[13, "module-tests.splitter_tests"]]}})