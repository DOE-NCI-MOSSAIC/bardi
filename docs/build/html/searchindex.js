Search.setIndex({"docnames": ["advanced", "bardi", "bardi.data", "bardi.nlp_engineering", "basic", "index", "installation"], "filenames": ["advanced.rst", "bardi.rst", "bardi.data.rst", "bardi.nlp_engineering.rst", "basic.rst", "index.rst", "installation.rst"], "titles": ["Advanced Package Usage", "bardi.pipeline", "bardi.data package", "bardi.nlp_engineering package", "Basic Package Usage", "Welcome to bardi\u2019s documentation!", "Installation"], "terms": {"document": [0, 2, 4], "refer": [0, 2, 4], "bardi": [0, 6], "nlp_engin": [0, 4, 5], "cpunorm": [0, 3, 4], "regex_librari": [0, 3, 4], "pathology_report": [0, 3, 4], "pathologyreportregexset": [0, 3, 4], "The": [0, 2, 3, 4], "need": [0, 1, 3, 4], "regular": [0, 3, 4], "express": [0, 3, 4], "set": [0, 1, 2, 5], "regex_set": [0, 4, 5], "appli": [0, 3, 4], "text": [0, 3, 4], "A": [0, 1, 2, 3, 4], "i": [0, 1, 2, 3, 4, 5], "just": [0, 3, 4], "python": 0, "list": [0, 1, 2, 3, 4], "dictionari": [0, 1, 3], "contain": [0, 2, 3], "kei": [0, 1, 3, 4], "regex_str": [0, 3, 4], "substitut": [0, 3, 4], "string": [0, 3], "sub_str": [0, 3, 4], "There": [0, 4], "ar": [0, 1, 2, 3, 4], "few": 0, "method": [0, 1, 3, 4], "you": [0, 2, 3, 4], "can": [0, 1, 2, 3, 4], "us": [0, 1, 2, 3, 4], "what": 0, "your": [0, 4], "tune": 0, "provid": [0, 1, 4, 5], "regexset": [0, 3], "an": [0, 2, 3, 5], "exist": [0, 1, 2, 3], "tunabl": 0, "turn": 0, "individu": [0, 4], "off": 0, "desir": [0, 1, 3, 4], "By": [0, 3], "default": [0, 1, 3], "all": [0, 2, 3, 4], "so": [0, 3, 4], "would": [0, 3, 4], "ones": 0, "don": [0, 4], "t": [0, 3, 4], "want": [0, 2, 3, 4], "from": [0, 1, 2, 3, 4], "import": [0, 3, 4], "grab": [0, 4], "pre": [0, 1, 3, 5], "made": [0, 3, 4], "regex": [0, 4, 5], "pathologi": [0, 3, 4], "report": [0, 3, 4], "3": [0, 3, 4], "path_report_regex_set": [0, 4], "get_regex_set": [0, 3, 4], "remove_dimens": [0, 3], "fals": [0, 1, 3, 4], "remove_specimen": [0, 3], "remove_decimal_seg_numb": [0, 3], "append": 0, "suppos": 0, "have": [0, 3, 4], "some": [0, 1, 3, 4], "addit": [0, 2, 3, 4], "like": [0, 3], "add": [0, 1, 3, 4], "becaus": [0, 3, 4], "return": [0, 1, 2, 3], "ad": [0, 1, 5], "pair": [0, 2, 3], "0": [0, 3, 4], "9": [0, 3, 4], "moneytoken": 0, "built": [0, 4], "type": [0, 1, 2, 3], "write": [0, 1, 2, 3], "noth": [0, 4], "stop": 0, "own": 0, "custom_regex_set": 0, "": [0, 1, 2, 3, 4], "http": [0, 3, 4], "urltoken": [0, 3, 4], "suppli": [0, 2, 3, 4], "add_step": [0, 1, 4], "field": [0, 3, 4], "lowercas": [0, 3, 4], "true": [0, 1, 3, 4], "class": [0, 1, 2, 3, 4], "howev": [0, 3, 4], "more": [0, 3, 4], "organ": [0, 1], "approach": 0, "than": [0, 3], "shown": 0, "abov": [0, 4], "handl": [0, 2, 3, 4], "could": [0, 4], "follow": [0, 3, 4], "our": [0, 5], "lead": [0, 3], "new": [0, 1, 3], "inherit": 0, "give": 0, "attribut": [0, 1, 2, 3], "which": [0, 2, 3], "thi": [0, 1, 2, 3, 4], "mycustomregexset": 0, "def": 0, "__init__": 0, "self": 0, "handle_whitespac": [0, 3], "bool": [0, 1, 2, 3], "convert_url": 0, "we": [0, 3, 4], "out": [0, 4], "box": 0, "hope": 0, "continu": [0, 4], "help": [0, 3], "expect": [0, 1, 3], "everi": 0, "possibl": [0, 2, 4], "data": [0, 1, 3, 5], "process": [0, 1, 3, 5], "action": 0, "ever": 0, "someth": [0, 3], "still": 0, "framework": [0, 1, 4, 5], "guidelin": 0, "run": [0, 1, 3, 5], "within": [0, 3, 4], "alongsid": 0, "ani": [0, 1, 3, 4], "metadata": [0, 5], "captur": 0, "standard": [0, 3], "file": [0, 1, 2, 3, 4], "reproduc": [0, 2, 3, 4, 5], "initi": [0, 5], "dataset": [0, 1, 2, 3, 5], "write_output": [0, 1, 4], "pathology_regex_set": [0, 4], "mycustomstep": 0, "pa": [0, 1, 3, 4], "tabl": [0, 1, 2, 3, 4], "artifact": [0, 1, 3, 4], "option": [0, 3], "dict": [0, 1, 2, 3], "none": [0, 1, 2, 3, 4], "tupl": [0, 1, 3], "df": [0, 2, 4], "pl": 0, "from_arrow": 0, "to_arrow": 0, "run_pipelin": [0, 1, 4], "defin": [1, 3], "step": [1, 4, 5], "datawriteconfig": [1, 3, 5], "sourc": [1, 2, 3], "base": [1, 2, 3], "typeddict": [1, 3], "data_format": [1, 4], "str": [1, 2, 3, 4], "data_format_arg": [1, 4], "write_path": [1, 3], "liter": 1, "output": [1, 3], "debug": 1, "data_write_config": 1, "data_filenam": 1, "bardi_processed_data": 1, "object": [1, 2, 3, 4], "oper": [1, 2, 3, 4], "execut": 1, "also": [1, 2, 3, 4], "overwrit": [1, 3], "configur": [1, 3], "consist": [1, 3], "paramet": [1, 2, 3], "get_paramet": [1, 2, 3, 4], "condens": 1, "each": [1, 3], "If": [1, 2, 3, 4], "exclud": [1, 3], "call": 1, "respect": [1, 3], "blueprint": [1, 3], "creat": [1, 2, 3, 4, 5], "implement": [1, 3, 4], "custom": [1, 2, 3, 4, 5], "remov": [1, 3], "larg": [1, 3], "item": 1, "copi": 1, "abstract": [1, 3, 4, 5], "pyarrow": [1, 2, 3, 4], "receiv": [1, 3], "preced": 1, "ignor": [1, 3], "valu": [1, 2, 3], "perform": [1, 2, 3, 4], "transform": 1, "replac": [1, 3], "processed_data": [1, 4], "besid": 1, "correspond": [1, 3], "name": [1, 2, 3, 4], "being": [1, 4], "union": [1, 2, 3], "set_write_config": [1, 3], "data_config": [1, 3], "e": [1, 3], "parquet": [1, 2, 4], "csv": [1, 2], "etc": [1, 3], "particular": [1, 3], "avail": [1, 2, 3, 4], "api": [1, 2], "write_artifact": [1, 3], "sinc": [1, 4], "onli": [1, 2, 3, 4, 6], "requir": [1, 3, 4], "behavior": [1, 4], "pass": [1, 2, 3], "specif": [1, 2, 3], "produc": [1, 3, 4], "directori": [1, 3], "where": [1, 2, 3, 4], "should": [1, 3], "written": [1, 2, 3], "write_data": 1, "reus": 1, "pattern": [1, 3, 4], "handler": [1, 2], "filetyp": [1, 2], "extens": 1, "definit": 2, "function": [2, 4], "load": [2, 3, 4], "variou": 2, "form": [2, 3], "column": [2, 3, 4], "row": 2, "under": 2, "hood": 2, "modern": 2, "effici": 2, "start": [2, 3], "point": 2, "both": [2, 5], "cpu": [2, 3], "gpu": 2, "workflow": [2, 4, 5], "origin_queri": [2, 4], "sql": 2, "wa": [2, 3], "queri": 2, "record": [2, 3, 4], "here": [2, 3, 4], "proven": 2, "origin_file_path": 2, "filepath": 2, "origin_format": [2, 4], "format": [2, 3], "origin_row_count": [2, 4], "total": [2, 3, 4], "count": [2, 4], "origin": [2, 3], "int": [2, 3, 4], "from_duckdb": [2, 5], "path": [2, 3], "min_batch": 2, "duckdb": 2, "databas": 2, "valid": 2, "adher": 2, "syntax": 2, "integ": [2, 3], "number": [2, 3], "split": [2, 3, 4], "amount": 2, "smaller": [2, 3], "distribut": [2, 3], "worker": 2, "node": 2, "probabl": 2, "align": [2, 4], "referenc": [2, 3], "after": [2, 3], "convers": 2, "from_fil": [2, 5], "arg": [2, 3], "kwarg": [2, 3], "accept": 2, "ipc": 2, "arrow": 2, "feather": 2, "orc": 2, "util": 2, "read": 2, "thu": 2, "keyword": 2, "argument": 2, "its": [2, 3], "singl": [2, 3, 4], "current": [2, 3, 6], "support": [2, 3, 6], "comput": [2, 3, 4], "environ": 2, "rais": [2, 3], "valueerror": 2, "doe": [2, 3, 4], "from_json": [2, 5], "json_data": 2, "json": [2, 4], "becom": [2, 3], "from_panda": [2, 4, 5], "datafram": [2, 4], "panda": [2, 4], "intend": [2, 3], "pipelin": [2, 3, 5], "flag": 2, "prompt": 2, "chunk": 2, "prepar": [2, 5], "later": 2, "direct": [2, 3], "futur": 2, "manner": 2, "from_pyarrow": [2, 5], "to_panda": [2, 4, 5], "convert": [2, 3, 4], "same": [2, 3], "input": [2, 3], "to_polar": [2, 5], "polar": 2, "write_fil": [2, 5], "subset": 2, "present": [2, 3, 4], "filesystem": 2, "npy": [2, 4], "clean": [3, 4], "regexsubpair": 3, "dure": 3, "least": 3, "one": [3, 4], "large_str": 3, "must": 3, "correctli": 3, "empti": 3, "avoid": 3, "instanti": 3, "instead": 3, "child": 3, "depend": 3, "hardwar": 3, "token": [3, 4], "simpl": [3, 4], "cpupretoken": [3, 4], "pretoken": [3, 5], "break": 3, "down": 3, "unit": 3, "befor": 3, "further": [3, 4], "split_pattern": [3, 4], "charact": 3, "divid": 3, "segment": 3, "done": 3, "space": 3, "first": 3, "posit": [3, 4], "second": 3, "No": [3, 4], "train": [3, 4, 5], "word2vec": [3, 4], "model": [3, 4, 5], "vocab": [3, 4], "word": [3, 4], "embed": [3, 4], "cpuembeddinggener": [3, 4], "embeddinggener": [3, 5], "gener": [3, 4], "interfac": 3, "vector": 3, "represent": 3, "gensim": [3, 4], "consid": 3, "load_saved_model": 3, "checkpoint_path": 3, "checkpoint": 3, "core": [3, 4], "min_word_count": [3, 4], "frequenc": 3, "lower": 3, "window": [3, 4], "maximum": 3, "distanc": 3, "between": 3, "predict": 3, "vector_s": [3, 4], "size": 3, "sampl": [3, 5], "threshold": 3, "high": 3, "randomli": 3, "downsampl": 3, "rang": 3, "1e": 3, "5": [3, 4], "float": 3, "min_alpha": [3, 4], "learn": [3, 5], "rate": 3, "linearli": 3, "drop": 3, "progress": 3, "neg": [3, 4], "epoch": [3, 4], "iter": 3, "seed": [3, 4], "random": 3, "For": [3, 4], "determinist": 3, "thread": 3, "1": [3, 4], "aka": [3, 4], "pythonhashse": 3, "vocab_exclude_list": [3, 4], "mai": [3, 4], "retriev": 3, "consum": 3, "embedding_matrix": [3, 4], "id_to_token": [3, 4], "10": [3, 4], "300": [3, 4], "6e": [3, 4], "05": [3, 4], "007": [3, 4], "20": [3, 4], "30": [3, 4], "42": [3, 4], "whether": 3, "save": [3, 4], "sentenc": 3, "dimension": 3, "higher": 3, "specifi": [3, 4], "how": [3, 4], "mani": [3, 4], "nois": 3, "drawn": 3, "over": 3, "corpu": 3, "forc": [3, 4], "vocabulari": 3, "artifacts_config": 3, "embeddinggeneratorartifactswriteconfig": 3, "indic": [3, 4], "config": 3, "embedding_matrix_format": [3, 4], "embedding_matrix_format_arg": [3, 4], "vocab_format": [3, 4], "vocab_format_arg": [3, 4], "map": [3, 4], "cpupostprocessor": [3, 4], "postprocessor": [3, 5], "post": [3, 4], "processor": [3, 4], "field_renam": [3, 4], "abil": 3, "renam": [3, 4], "id": 3, "construct": 3, "altern": 3, "flexibl": 3, "versu": 3, "concat_field": 3, "concaten": 3, "left": 3, "separ": 3, "retriv": 3, "reli": 3, "multipl": [3, 4], "wai": [3, 4], "creation": [3, 4], "wasn": 3, "through": 3, "final": [3, 4], "element": 3, "hold": 3, "attributeerror": 3, "either": 3, "typeerror": 3, "encod": 3, "label": [3, 4], "numer": 3, "cpulabelprocessor": [3, 4], "labelprocessor": [3, 5], "uniqu": [3, 4], "id_to_label": [3, 4], "revers": 3, "Of": 3, "downstream": 3, "back": 3, "notimplementederror": 3, "other": 3, "labelprocessorartifactswriteconfig": 3, "id_to_label_arg": 3, "id_to_label_format": [3, 4], "test": [3, 4], "val": [3, 4], "cpusplitt": 3, "assign": 3, "two": 3, "scratch": 3, "previous": 3, "when": [3, 4], "comparison": 3, "ensur": [3, 4], "exactli": 3, "To": 3, "appropri": 3, "namedtupl": 3, "split_method": 3, "newsplit": [3, 4], "split_proport": 3, "75": 3, "15": [3, 4], "unique_record_col": 3, "document_id": 3, "group_col": 3, "patient_id_numb": [3, 4], "registri": 3, "labels_col": 3, "random_se": 3, "mapsplit": 3, "differ": 3, "upon": 3, "split_typ": 3, "combin": 3, "identifi": 3, "oftentim": 3, "note": [3, 4], "program": 3, "crash": 3, "split_map": 3, "hash": 3, "repres": 3, "pseudocod": 3, "concat": 3, "fold1": 3, "fold2": 3, "fold3": 3, "proport": 3, "25": [3, 4], "fold4": 3, "num_split": 3, "group": 3, "keep": [3, 4], "discret": 3, "x": [3, 4], "had": [3, 4], "medic": 3, "patient": [3, 4], "end": [3, 4], "up": [3, 4], "prevent": [3, 4], "potenti": 3, "inform": 3, "leakag": 3, "In": [3, 4], "case": [3, 4], "patient_id": 3, "label_col": 3, "effort": 3, "balanc": 3, "across": 3, "guarante": 3, "prefer": 3, "try": 3, "includ": 3, "line": [3, 6], "domain": 3, "order": [3, 4], "exampl": [3, 4], "sub": 3, "r": [3, 4], "whitespac": 3, "match": 3, "curat": 3, "convert_escape_cod": 3, "remove_url": 3, "remove_special_punct": 3, "remove_multiple_punct": 3, "handle_angle_bracket": 3, "replace_percent_sign": 3, "handle_leading_digit_punct": 3, "remove_leading_punct": 3, "remove_trailing_punct": 3, "handle_words_with_punct_spac": 3, "handle_math_spac": 3, "handle_dimension_spac": 3, "handle_measure_spac": 3, "handle_cassettes_spac": 3, "handle_dash_digit_spac": 3, "handle_literals_floats_spac": 3, "fix_plur": 3, "handle_digits_words_spac": 3, "remove_phone_numb": 3, "remove_d": 3, "remove_tim": 3, "remove_address": 3, "remove_large_digits_seq": 3, "remove_large_floats_seq": 3, "trunc_decim": 3, "remove_cassette_nam": 3, "remove_duration_tim": 3, "remove_letter_num_seq": 3, "tailor": 3, "craft": 3, "understand": 3, "punctuat": 3, "often": 3, "result": [3, 5], "loss": 3, "crucial": [3, 4], "g": 3, "term": 3, "her": 3, "2": [3, 4], "remain": 3, "manag": 3, "emploi": 3, "around": 3, "22": [3, 4], "year": 3, "consider": 3, "particularli": [3, 4], "algorithm": 3, "excess": 3, "imped": 3, "effect": [3, 4], "dilut": 3, "concept": 3, "escap": 3, "code": [3, 4], "x0d": 3, "x0a": 3, "extra": 3, "carriag": 3, "tab": 3, "url": 3, "found": 3, "special": 3, "duplic": 3, "angl": 3, "bracket": 3, "titl": 3, "percent": [3, 4], "sign": [3, 4], "digit": 3, "attach": 3, "trail": 3, "hyphen": 3, "colon": 3, "period": 3, "them": [3, 4], "math": 3, "symbol": 3, "aroud": 3, "measur": 3, "mm": 3, "cm": 3, "ml": [3, 4], "proper": 3, "5e": 3, "6f": 3, "dash": 3, "common": [3, 4], "problem": 3, "r18": 3, "0admiss": 3, "admiss": 3, "restor": 3, "plural": 3, "noun": 3, "demag": 3, "begin": 3, "phone": 3, "delimet": 3, "date": [3, 4], "prespecifi": 3, "time": [3, 4], "11": [3, 4], "am": 3, "30pm": 3, "52": 3, "07am": 3, "address": 3, "num": 3, "street": 3, "6": [3, 4], "letter": 3, "state": 3, "short": 3, "long": 3, "zip": 3, "2d": 3, "3d": 3, "dimens": 3, "mark": 3, "speciman": 3, "78": 3, "87": 3, "sequenc": 3, "decim": 3, "durat": 3, "speciment": 3, "treat": 3, "32d09090301": 3, "directli": 3, "regex_lib": 3, "get_address_regex": 3, "1034": 3, "north": 3, "500": 3, "west": 3, "provo": 3, "ut": 3, "84604": 3, "3337": 3, "addresstoken": [3, 4], "get_angle_brackets_regex": 3, "content": 3, "fix": 3, "But": 3, "90": 3, "get_cassette_name_regex": 3, "cassett": 3, "block": 3, "cassettetoken": [3, 4], "get_cassettes_spacing_regex": 3, "3e": 3, "3f": 3, "get_dash_digits_spacing_regex": 3, "right": 3, "7": [3, 4], "get_dates_regex": 3, "co": 3, "03": [3, 4], "09": 3, "2021": 3, "1015": 3, "complet": 3, "21": [3, 4], "34": [3, 4], "datetoken": [3, 4], "get_decimal_segmented_numbers_regex": 3, "decimalsegmentednumbertoken": [3, 4], "get_digits_words_spacing_regex": 3, "9837648admiss": 3, "9837648": 3, "get_dimension_spacing_regex": 3, "3x0": 3, "7x0": 3, "get_dimensions_regex": 3, "33": [3, 4], "dimensiontoken": [3, 4], "get_duration_regex": 3, "specimen": 3, "32d0909091": 3, "durationtoken": [3, 4], "get_escape_code_regex": 3, "r30": 3, "get_fix_pluralization_regex": 3, "get_large_digits_seq_regex": 3, "456123456": 3, "digitsequencetoken": [3, 4], "get_large_float_seq_regex": 3, "456": 3, "123456": 3, "783": 3, "largefloattoken": [3, 4], "get_leading_digit_punctuation_regex": 3, "proce": 3, "elimin": 3, "insert": 3, "13": [3, 4], "unremark": 3, "get_leading_punctuation_regex": 3, "3a": 3, "anterior": 3, "get_letter_num_seq_regex": 3, "c001234567": 3, "letterdigitstoken": [3, 4], "get_literals_floats_spacing_regex": 3, "diagnosi": 3, "bi": 3, "n13": 3, "30admiss": 3, "get_math_spacing_regex": 3, "95": [3, 4], "8": [3, 4], "get_measure_spacing_regex": 3, "spece": 3, "11th": 3, "th": 3, "10mm": 3, "histolog": 3, "3cm": 3, "get_multiple_punct_regex": 3, "occur": 3, "_": [3, 4], "___": 3, "signatur": 3, "get_percent_sign_regex": 3, "strong": 3, "intens": 3, "get_phone_number_regex": 3, "ph": 3, "123": 3, "7890": 3, "It": [3, 4], "4567890": 3, "phonenumtoken": [3, 4], "get_spaces_regex": 3, "locat": 3, "arm": 3, "get_special_punct_regex": 3, "chosen": 3, "wt": 3, "ck": 3, "focal": 3, "sth": 3, "ab": 3, "cd": 3, "get_specimen_regex": 3, "009345": 3, "sh": 3, "0011300": 3, "specimentoken": [3, 4], "get_time_regex": 3, "12": [3, 4], "pm": 3, "12am": 3, "timetoken": [3, 4], "get_trailing_punctuation_regex": 3, "get_trunc_decimals_regex": 3, "99": 3, "get_urls_regex": 3, "www": [3, 4], "merck": 3, "com": 3, "keytruda_pi": 3, "pdf": 3, "get_whitespace_regex": 3, "invas": 3, "nneg": 3, "IN": 3, "situ": 3, "nn": 3, "tthe": 3, "n": [3, 4], "get_words_with_punct_spacing_regex": 3, "length": 3, "d": [3, 4], "tiff": 3, "1k": 3, "descript": 3, "gleason": 3, "offer": 4, "sever": 4, "data_handl": [4, 5], "now": 4, "go": 4, "show": 4, "pd": 4, "notabl": 4, "chang": 4, "exhibit": 4, "increas": 4, "aggress": 4, "impuls": 4, "distinct": 4, "deviat": 4, "jedi": 4, "preliminari": 4, "examin": 4, "reveal": 4, "heighten": 4, "midichlorian": 4, "unsettl": 4, "connect": 4, "dark": 4, "side": 4, "analysi": 4, "warrant": 4, "explor": 4, "extent": 4, "exposur": 4, "sith": 4, "teach": 4, "imper": 4, "monitor": 4, "close": 4, "worsen": 4, "symptom": 4, "engag": 4, "therapeut": 4, "intervent": 4, "aim": 4, "descent": 4, "assess": 4, "determin": 4, "efficaci": 4, "strategi": 4, "overal": 4, "trajectori": 4, "dark_side_dx": 4, "succumb": 4, "stabl": 4, "commit": 4, "influenc": 4, "were": 4, "observ": 4, "check": 4, "ins": 4, "council": 4, "sustain": 4, "well": 4, "manifest": 4, "palpabl": 4, "establish": 4, "ethic": 4, "disclos": 4, "elev": 4, "unmistak": 4, "investig": 4, "ascertain": 4, "depth": 4, "doctrin": 4, "essenti": 4, "track": 4, "exacerb": 4, "advis": 4, "forestal": 4, "deeper": 4, "embrac": 4, "subsequ": 4, "evalu": 4, "pivot": 4, "gaug": 4, "allegi": 4, "let": 4, "link": 4, "doesn": 4, "look": 4, "involv": 4, "splitter": [4, 5], "pleas": 4, "do": 4, "Then": 4, "pre_token": [4, 5], "pretti": 4, "embedding_gener": [4, 5], "fair": 4, "warn": 4, "far": 4, "slowest": 4, "part": 4, "routin": 4, "account": 4, "about": 4, "control": 4, "aspect": 4, "simpli": 4, "small": 4, "post_processor": [4, 5], "work": 4, "automat": 4, "label_processor": [4, 5], "again": 4, "straight": 4, "forward": 4, "actual": 4, "too": 4, "final_data": 4, "label_map": 4, "word_embed": 4, "39": 4, "45": 4, "44": 4, "23": 4, "31": 4, "41": 4, "35": 4, "24": 4, "18": 4, "pad": 4, "4": 4, "14": 4, "16": 4, "17": 4, "19": 4, "26": 4, "27": 4, "28": 4, "29": 4, "32": 4, "36": 4, "37": 4, "38": 4, "40": 4, "43": 4, "unk": 4, "matrix": 4, "00000000e": 4, "00": 4, "77135365e": 4, "86092880e": 4, "04": 4, "89334818e": 4, "73368554e": 4, "46754061e": 4, "34021775e": 4, "38128232e": 4, "09578541e": 4, "56378723e": 4, "29070841e": 4, "36099930e": 4, "10196943e": 4, "00287900e": 4, "46343326e": 4, "30044727e": 4, "16163127e": 4, "43721746e": 4, "17491091e": 4, "52751313e": 4, "05728725e": 4, "67492444e": 4, "12162175e": 4, "62762087e": 4, "12349084e": 4, "75368562e": 4, "78313626e": 4, "81814841e": 4, "88654257e": 4, "93711794e": 4, "90082072e": 4, "revolutionari": 4, "itself": 4, "hand": 4, "deal": 4, "featur": 4, "everyth": 4, "did": 4, "below": 4, "review": 4, "print": 4, "2023": 4, "08": 4, "59": 4, "173578": 4, "_data_write_config": 4, "compress": 4, "snappi": 4, "use_dictionari": 4, "9a": 4, "fa": 4, "f": 4, "stepr": 4, "b": 4, "z": 4, "z0": 4, "cpamt": 4, "mlhc": 4, "m": 4, "jan": 4, "feb": 4, "mar": 4, "apr": 4, "jun": 4, "jul": 4, "aug": 4, "sep": 4, "oct": 4, "nov": 4, "dec": 4, "ap": 4, "_artifacts_write_config": 4, "w2v_model": 4, "vocab_s": 4, "46": 4, "unk_id": 4, "id_to_label_format_arg": 4, "008010": 4, "memori": 4, "mb": 4, "013305": 4, "000863": 4, "003406": 4, "074747": 4, "531624": 4, "003835": 4, "03622": 4, "001360": 4, "008777": 4, "088891": 4, "batch": 5, "raw": 5, "integr": 5, "build": 5, "infer": 5, "machin": 5, "instal": 5, "basic": 5, "packag": 5, "usag": 5, "regist": 5, "normal": 5, "collect": 5, "full": 5, "tutori": 5, "script": 5, "advanc": 5, "modul": 5, "librari": 5, "index": 5, "At": 6, "command": 6, "pip": 6, "unix": 6, "platform": 6}, "objects": {"bardi.data": [[2, 0, 0, "-", "data_handlers"]], "bardi.data.data_handlers": [[2, 1, 1, "", "Dataset"], [2, 4, 1, "", "from_duckdb"], [2, 4, 1, "", "from_file"], [2, 4, 1, "", "from_json"], [2, 4, 1, "", "from_pandas"], [2, 4, 1, "", "from_pyarrow"], [2, 4, 1, "", "to_pandas"], [2, 4, 1, "", "to_polars"], [2, 4, 1, "", "write_file"]], "bardi.data.data_handlers.Dataset": [[2, 2, 1, "", "data"], [2, 3, 1, "", "get_parameters"], [2, 2, 1, "", "origin_file_path"], [2, 2, 1, "", "origin_format"], [2, 2, 1, "", "origin_query"], [2, 2, 1, "", "origin_row_count"]], "bardi.nlp_engineering": [[3, 0, 0, "-", "embedding_generator"], [3, 0, 0, "-", "label_processor"], [3, 0, 0, "-", "normalizer"], [3, 0, 0, "-", "post_processor"], [3, 0, 0, "-", "pre_tokenizer"], [3, 0, 0, "-", "splitter"]], "bardi.nlp_engineering.embedding_generator": [[3, 1, 1, "", "CPUEmbeddingGenerator"], [3, 1, 1, "", "EmbeddingGenerator"], [3, 1, 1, "", "EmbeddingGeneratorArtifactsWriteConfig"]], "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator": [[3, 2, 1, "", "checkpoint_path"], [3, 2, 1, "", "cores"], [3, 2, 1, "", "epochs"], [3, 2, 1, "", "fields"], [3, 3, 1, "", "get_parameters"], [3, 2, 1, "", "load_saved_model"], [3, 2, 1, "", "min_alpha"], [3, 2, 1, "", "min_word_count"], [3, 2, 1, "", "negative"], [3, 3, 1, "", "run"], [3, 2, 1, "", "sample"], [3, 2, 1, "", "seed"], [3, 2, 1, "", "vector_size"], [3, 2, 1, "", "vocab_exclude_list"], [3, 2, 1, "", "window"], [3, 3, 1, "", "write_artifacts"]], "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator": [[3, 2, 1, "", "checkpoint_path"], [3, 2, 1, "", "cores"], [3, 2, 1, "", "epochs"], [3, 2, 1, "", "fields"], [3, 2, 1, "", "load_saved_model"], [3, 2, 1, "", "min_alpha"], [3, 2, 1, "", "min_word_count"], [3, 2, 1, "", "negative"], [3, 3, 1, "", "run"], [3, 2, 1, "", "sample"], [3, 2, 1, "", "seed"], [3, 3, 1, "", "set_write_config"], [3, 2, 1, "", "vector_size"], [3, 2, 1, "", "vocab_exclude_list"], [3, 2, 1, "", "window"]], "bardi.nlp_engineering.embedding_generator.EmbeddingGeneratorArtifactsWriteConfig": [[3, 2, 1, "", "embedding_matrix_format"], [3, 2, 1, "", "embedding_matrix_format_args"], [3, 2, 1, "", "vocab_format"], [3, 2, 1, "", "vocab_format_args"]], "bardi.nlp_engineering.label_processor": [[3, 1, 1, "", "CPULabelProcessor"], [3, 1, 1, "", "LabelProcessor"], [3, 1, 1, "", "LabelProcessorArtifactsWriteConfig"]], "bardi.nlp_engineering.label_processor.CPULabelProcessor": [[3, 2, 1, "", "fields"], [3, 3, 1, "", "get_parameters"], [3, 2, 1, "", "id_to_label"], [3, 2, 1, "", "mapping"], [3, 2, 1, "", "method"], [3, 3, 1, "", "run"], [3, 3, 1, "", "write_artifacts"]], "bardi.nlp_engineering.label_processor.LabelProcessor": [[3, 2, 1, "", "fields"], [3, 2, 1, "", "method"], [3, 3, 1, "", "run"], [3, 3, 1, "", "set_write_config"]], "bardi.nlp_engineering.label_processor.LabelProcessorArtifactsWriteConfig": [[3, 2, 1, "", "id_to_label_args"], [3, 2, 1, "", "id_to_label_format"]], "bardi.nlp_engineering.normalizer": [[3, 1, 1, "", "CPUNormalizer"], [3, 1, 1, "", "Normalizer"]], "bardi.nlp_engineering.normalizer.CPUNormalizer": [[3, 2, 1, "", "fields"], [3, 2, 1, "", "lowercase"], [3, 2, 1, "", "regex_set"], [3, 3, 1, "", "run"]], "bardi.nlp_engineering.normalizer.Normalizer": [[3, 2, 1, "", "fields"], [3, 2, 1, "", "lowercase"], [3, 2, 1, "", "regex_set"], [3, 3, 1, "", "run"]], "bardi.nlp_engineering.post_processor": [[3, 1, 1, "", "CPUPostProcessor"], [3, 1, 1, "", "PostProcessor"]], "bardi.nlp_engineering.post_processor.CPUPostProcessor": [[3, 2, 1, "", "artifacts"], [3, 2, 1, "", "concat_fields"], [3, 2, 1, "", "data"], [3, 2, 1, "", "field_rename"], [3, 2, 1, "", "fields"], [3, 3, 1, "", "get_parameters"], [3, 2, 1, "id0", "id_to_token"], [3, 3, 1, "", "run"]], "bardi.nlp_engineering.post_processor.PostProcessor": [[3, 2, 1, "", "concat_fields"], [3, 2, 1, "", "field_rename"], [3, 2, 1, "", "fields"], [3, 2, 1, "", "id_to_token"], [3, 3, 1, "", "run"]], "bardi.nlp_engineering.pre_tokenizer": [[3, 1, 1, "", "CPUPreTokenizer"], [3, 1, 1, "", "PreTokenizer"]], "bardi.nlp_engineering.pre_tokenizer.CPUPreTokenizer": [[3, 2, 1, "", "fields"], [3, 3, 1, "", "run"], [3, 2, 1, "", "split_pattern"]], "bardi.nlp_engineering.pre_tokenizer.PreTokenizer": [[3, 2, 1, "", "fields"], [3, 3, 1, "", "run"], [3, 2, 1, "", "split_pattern"]], "bardi.nlp_engineering.regex_library": [[3, 0, 0, "-", "pathology_report"], [3, 0, 0, "-", "regex_lib"], [3, 0, 0, "-", "regex_set"]], "bardi.nlp_engineering.regex_library.pathology_report": [[3, 1, 1, "", "PathologyReportRegexSet"]], "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet": [[3, 2, 1, "", "convert_escape_codes"], [3, 2, 1, "", "fix_pluralization"], [3, 2, 1, "", "handle_angle_brackets"], [3, 2, 1, "", "handle_cassettes_spacing"], [3, 2, 1, "", "handle_dash_digit_spacing"], [3, 2, 1, "", "handle_digits_words_spacing"], [3, 2, 1, "", "handle_dimension_spacing"], [3, 2, 1, "", "handle_leading_digit_punct"], [3, 2, 1, "", "handle_literals_floats_spacing"], [3, 2, 1, "", "handle_math_spacing"], [3, 2, 1, "", "handle_measure_spacing"], [3, 2, 1, "", "handle_whitespaces"], [3, 2, 1, "", "handle_words_with_punct_spacing"], [3, 2, 1, "", "remove_addresses"], [3, 2, 1, "", "remove_cassette_names"], [3, 2, 1, "", "remove_dates"], [3, 2, 1, "", "remove_decimal_seg_numbers"], [3, 2, 1, "", "remove_dimensions"], [3, 2, 1, "", "remove_duration_time"], [3, 2, 1, "", "remove_large_digits_seq"], [3, 2, 1, "", "remove_large_floats_seq"], [3, 2, 1, "", "remove_leading_punct"], [3, 2, 1, "", "remove_letter_num_seq"], [3, 2, 1, "", "remove_multiple_punct"], [3, 2, 1, "", "remove_phone_numbers"], [3, 2, 1, "", "remove_special_punct"], [3, 2, 1, "", "remove_specimen"], [3, 2, 1, "", "remove_times"], [3, 2, 1, "", "remove_trailing_punct"], [3, 2, 1, "", "remove_urls"], [3, 2, 1, "", "replace_percent_sign"], [3, 2, 1, "", "trunc_decimals"]], "bardi.nlp_engineering.regex_library.regex_lib": [[3, 4, 1, "", "get_address_regex"], [3, 4, 1, "", "get_angle_brackets_regex"], [3, 4, 1, "", "get_cassette_name_regex"], [3, 4, 1, "", "get_cassettes_spacing_regex"], [3, 4, 1, "", "get_dash_digits_spacing_regex"], [3, 4, 1, "", "get_dates_regex"], [3, 4, 1, "", "get_decimal_segmented_numbers_regex"], [3, 4, 1, "", "get_digits_words_spacing_regex"], [3, 4, 1, "", "get_dimension_spacing_regex"], [3, 4, 1, "", "get_dimensions_regex"], [3, 4, 1, "", "get_duration_regex"], [3, 4, 1, "", "get_escape_code_regex"], [3, 4, 1, "", "get_fix_pluralization_regex"], [3, 4, 1, "", "get_large_digits_seq_regex"], [3, 4, 1, "", "get_large_float_seq_regex"], [3, 4, 1, "", "get_leading_digit_punctuation_regex"], [3, 4, 1, "", "get_leading_punctuation_regex"], [3, 4, 1, "", "get_letter_num_seq_regex"], [3, 4, 1, "", "get_literals_floats_spacing_regex"], [3, 4, 1, "", "get_math_spacing_regex"], [3, 4, 1, "", "get_measure_spacing_regex"], [3, 4, 1, "", "get_multiple_punct_regex"], [3, 4, 1, "", "get_percent_sign_regex"], [3, 4, 1, "", "get_phone_number_regex"], [3, 4, 1, "", "get_spaces_regex"], [3, 4, 1, "", "get_special_punct_regex"], [3, 4, 1, "", "get_specimen_regex"], [3, 4, 1, "", "get_time_regex"], [3, 4, 1, "", "get_trailing_punctuation_regex"], [3, 4, 1, "", "get_trunc_decimals_regex"], [3, 4, 1, "", "get_urls_regex"], [3, 4, 1, "", "get_whitespace_regex"], [3, 4, 1, "", "get_words_with_punct_spacing_regex"]], "bardi.nlp_engineering.regex_library.regex_set": [[3, 1, 1, "", "RegexSet"], [3, 1, 1, "", "RegexSubPair"]], "bardi.nlp_engineering.regex_library.regex_set.RegexSet": [[3, 3, 1, "", "get_regex_set"], [3, 2, 1, "", "regex_set"]], "bardi.nlp_engineering.regex_library.regex_set.RegexSubPair": [[3, 2, 1, "id1", "regex_str"], [3, 2, 1, "id2", "sub_str"]], "bardi.nlp_engineering.splitter": [[3, 1, 1, "", "CPUSplitter"], [3, 1, 1, "", "MapSplit"], [3, 1, 1, "", "NewSplit"], [3, 1, 1, "", "Splitter"]], "bardi.nlp_engineering.splitter.CPUSplitter": [[3, 2, 1, "", "group_cols"], [3, 2, 1, "", "label_cols"], [3, 2, 1, "", "num_splits"], [3, 2, 1, "", "random_seed"], [3, 3, 1, "", "run"], [3, 2, 1, "", "split_mapping"], [3, 2, 1, "", "split_method"], [3, 2, 1, "", "split_proportions"], [3, 2, 1, "", "split_type"], [3, 2, 1, "", "unique_record_cols"]], "bardi.nlp_engineering.splitter.MapSplit": [[3, 2, 1, "", "split_mapping"], [3, 2, 1, "", "unique_record_cols"]], "bardi.nlp_engineering.splitter.NewSplit": [[3, 2, 1, "", "group_cols"], [3, 2, 1, "", "label_cols"], [3, 2, 1, "", "random_seed"], [3, 2, 1, "", "split_proportions"], [3, 2, 1, "", "unique_record_cols"]], "bardi.nlp_engineering.splitter.Splitter": [[3, 2, 1, "", "group_cols"], [3, 2, 1, "", "label_cols"], [3, 2, 1, "", "num_splits"], [3, 2, 1, "", "random_seed"], [3, 3, 1, "", "run"], [3, 2, 1, "", "split_mapping"], [3, 2, 1, "", "split_method"], [3, 2, 1, "", "split_proportions"], [3, 2, 1, "", "split_type"], [3, 2, 1, "", "unique_record_cols"]], "bardi": [[1, 0, 0, "-", "pipeline"]], "bardi.pipeline": [[1, 1, 1, "", "DataWriteConfig"], [1, 1, 1, "", "Pipeline"], [1, 1, 1, "", "Step"]], "bardi.pipeline.DataWriteConfig": [[1, 2, 1, "", "data_format"], [1, 2, 1, "", "data_format_args"]], "bardi.pipeline.Pipeline": [[1, 3, 1, "", "add_step"], [1, 3, 1, "", "get_parameters"], [1, 3, 1, "", "run_pipeline"]], "bardi.pipeline.Step": [[1, 3, 1, "", "get_parameters"], [1, 3, 1, "", "run"], [1, 3, 1, "", "set_write_config"], [1, 3, 1, "", "write_artifacts"], [1, 3, 1, "", "write_data"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "function", "Python function"]}, "titleterms": {"advanc": 0, "packag": [0, 2, 3, 4], "usag": [0, 4], "normal": [0, 3, 4], "custom": 0, "creat": 0, "pipelin": [0, 1, 4], "step": [0, 3], "bardi": [1, 2, 3, 4, 5], "modul": [1, 2, 3], "data": [2, 4], "data_handl": 2, "nlp_engin": 3, "pre_token": 3, "embedding_gener": 3, "post_processor": 3, "label_processor": 3, "splitter": 3, "regex": 3, "regex_set": 3, "provid": 3, "set": [3, 4], "librari": 3, "basic": 4, "prepar": 4, "sampl": 4, "regist": 4, "dataset": 4, "initi": 4, "pre": 4, "process": 4, "ad": 4, "our": 4, "pretoken": 4, "an": 4, "embeddinggener": 4, "postprocessor": 4, "labelprocessor": 4, "run": 4, "result": 4, "collect": 4, "metadata": 4, "full": 4, "tutori": 4, "script": 4, "welcom": 5, "": 5, "document": 5, "content": 5, "indic": 5, "tabl": 5, "instal": 6}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"Advanced Package Usage": [[0, "advanced-package-usage"]], "Normalizer Customizations": [[0, "normalizer-customizations"]], "Creating a Custom Pipeline Step": [[0, "creating-a-custom-pipeline-step"]], "bardi.pipeline": [[1, "bardi-pipeline"]], "bardi.pipeline module": [[1, "module-bardi.pipeline"]], "bardi.data package": [[2, "bardi-data-package"]], "bardi.data.data_handlers module": [[2, "module-bardi.data.data_handlers"]], "bardi.nlp_engineering package": [[3, "bardi-nlp-engineering-package"]], "Steps": [[3, "steps"]], "bardi normalizer module": [[3, "module-bardi.nlp_engineering.normalizer"]], "bardi pre_tokenizer module": [[3, "module-bardi.nlp_engineering.pre_tokenizer"]], "bardi embedding_generator module": [[3, "module-bardi.nlp_engineering.embedding_generator"]], "bardi post_processor module": [[3, "module-bardi.nlp_engineering.post_processor"]], "bardi label_processor module": [[3, "module-bardi.nlp_engineering.label_processor"]], "bardi splitter module": [[3, "module-bardi.nlp_engineering.splitter"]], "RegEx Package": [[3, "regex-package"]], "bardi regex_set module": [[3, "module-bardi.nlp_engineering.regex_library.regex_set"]], "bardi provided regex sets": [[3, "module-bardi.nlp_engineering.regex_library.pathology_report"]], "bardi provided regex library": [[3, "module-bardi.nlp_engineering.regex_library.regex_lib"]], "Basic Package Usage": [[4, "basic-package-usage"]], "Preparing a Sample Set of Data": [[4, "preparing-a-sample-set-of-data"]], "Register the Sample Data as a Bardi Dataset": [[4, "register-the-sample-data-as-a-bardi-dataset"]], "Initialize a Pre-Processing Pipeline": [[4, "initialize-a-pre-processing-pipeline"]], "Adding a Normalizer to our Pipeline": [[4, "adding-a-normalizer-to-our-pipeline"]], "Adding a PreTokenizer": [[4, "adding-a-pretokenizer"]], "Adding an EmbeddingGenerator": [[4, "adding-an-embeddinggenerator"]], "Adding a PostProcessor": [[4, "adding-a-postprocessor"]], "Adding a LabelProcessor": [[4, "adding-a-labelprocessor"]], "Running the Pipeline": [[4, "running-the-pipeline"]], "Results": [[4, "results"]], "Collecting Metadata": [[4, "collecting-metadata"]], "Full Tutorial Script": [[4, "full-tutorial-script"]], "Welcome to bardi\u2019s documentation!": [[5, "welcome-to-bardi-s-documentation"]], "Contents:": [[5, null]], "Indices and tables": [[5, "indices-and-tables"]], "Installation": [[6, "installation"]]}, "indexentries": {"datawriteconfig (class in bardi.pipeline)": [[1, "bardi.pipeline.DataWriteConfig"]], "pipeline (class in bardi.pipeline)": [[1, "bardi.pipeline.Pipeline"]], "step (class in bardi.pipeline)": [[1, "bardi.pipeline.Step"]], "add_step() (bardi.pipeline.pipeline method)": [[1, "bardi.pipeline.Pipeline.add_step"]], "bardi.pipeline": [[1, "module-bardi.pipeline"]], "data_format (bardi.pipeline.datawriteconfig attribute)": [[1, "bardi.pipeline.DataWriteConfig.data_format"]], "data_format_args (bardi.pipeline.datawriteconfig attribute)": [[1, "bardi.pipeline.DataWriteConfig.data_format_args"]], "get_parameters() (bardi.pipeline.pipeline method)": [[1, "bardi.pipeline.Pipeline.get_parameters"]], "get_parameters() (bardi.pipeline.step method)": [[1, "bardi.pipeline.Step.get_parameters"]], "module": [[1, "module-bardi.pipeline"], [2, "module-bardi.data.data_handlers"], [3, "module-bardi.nlp_engineering.embedding_generator"], [3, "module-bardi.nlp_engineering.label_processor"], [3, "module-bardi.nlp_engineering.normalizer"], [3, "module-bardi.nlp_engineering.post_processor"], [3, "module-bardi.nlp_engineering.pre_tokenizer"], [3, "module-bardi.nlp_engineering.regex_library.pathology_report"], [3, "module-bardi.nlp_engineering.regex_library.regex_lib"], [3, "module-bardi.nlp_engineering.regex_library.regex_set"], [3, "module-bardi.nlp_engineering.splitter"]], "run() (bardi.pipeline.step method)": [[1, "bardi.pipeline.Step.run"]], "run_pipeline() (bardi.pipeline.pipeline method)": [[1, "bardi.pipeline.Pipeline.run_pipeline"]], "set_write_config() (bardi.pipeline.step method)": [[1, "bardi.pipeline.Step.set_write_config"]], "write_artifacts() (bardi.pipeline.step method)": [[1, "bardi.pipeline.Step.write_artifacts"]], "write_data() (bardi.pipeline.step method)": [[1, "bardi.pipeline.Step.write_data"]], "dataset (class in bardi.data.data_handlers)": [[2, "bardi.data.data_handlers.Dataset"]], "bardi.data.data_handlers": [[2, "module-bardi.data.data_handlers"]], "data (bardi.data.data_handlers.dataset attribute)": [[2, "bardi.data.data_handlers.Dataset.data"]], "from_duckdb() (in module bardi.data.data_handlers)": [[2, "bardi.data.data_handlers.from_duckdb"]], "from_file() (in module bardi.data.data_handlers)": [[2, "bardi.data.data_handlers.from_file"]], "from_json() (in module bardi.data.data_handlers)": [[2, "bardi.data.data_handlers.from_json"]], "from_pandas() (in module bardi.data.data_handlers)": [[2, "bardi.data.data_handlers.from_pandas"]], "from_pyarrow() (in module bardi.data.data_handlers)": [[2, "bardi.data.data_handlers.from_pyarrow"]], "get_parameters() (bardi.data.data_handlers.dataset method)": [[2, "bardi.data.data_handlers.Dataset.get_parameters"]], "origin_file_path (bardi.data.data_handlers.dataset attribute)": [[2, "bardi.data.data_handlers.Dataset.origin_file_path"]], "origin_format (bardi.data.data_handlers.dataset attribute)": [[2, "bardi.data.data_handlers.Dataset.origin_format"]], "origin_query (bardi.data.data_handlers.dataset attribute)": [[2, "bardi.data.data_handlers.Dataset.origin_query"]], "origin_row_count (bardi.data.data_handlers.dataset attribute)": [[2, "bardi.data.data_handlers.Dataset.origin_row_count"]], "to_pandas() (in module bardi.data.data_handlers)": [[2, "bardi.data.data_handlers.to_pandas"]], "to_polars() (in module bardi.data.data_handlers)": [[2, "bardi.data.data_handlers.to_polars"]], "write_file() (in module bardi.data.data_handlers)": [[2, "bardi.data.data_handlers.write_file"]], "cpuembeddinggenerator (class in bardi.nlp_engineering.embedding_generator)": [[3, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator"]], "cpulabelprocessor (class in bardi.nlp_engineering.label_processor)": [[3, "bardi.nlp_engineering.label_processor.CPULabelProcessor"]], "cpunormalizer (class in bardi.nlp_engineering.normalizer)": [[3, "bardi.nlp_engineering.normalizer.CPUNormalizer"]], "cpupostprocessor (class in bardi.nlp_engineering.post_processor)": [[3, "bardi.nlp_engineering.post_processor.CPUPostProcessor"]], "cpupretokenizer (class in bardi.nlp_engineering.pre_tokenizer)": [[3, "bardi.nlp_engineering.pre_tokenizer.CPUPreTokenizer"]], "cpusplitter (class in bardi.nlp_engineering.splitter)": [[3, "bardi.nlp_engineering.splitter.CPUSplitter"]], "embeddinggenerator (class in bardi.nlp_engineering.embedding_generator)": [[3, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator"]], "embeddinggeneratorartifactswriteconfig (class in bardi.nlp_engineering.embedding_generator)": [[3, "bardi.nlp_engineering.embedding_generator.EmbeddingGeneratorArtifactsWriteConfig"]], "labelprocessor (class in bardi.nlp_engineering.label_processor)": [[3, "bardi.nlp_engineering.label_processor.LabelProcessor"]], "labelprocessorartifactswriteconfig (class in bardi.nlp_engineering.label_processor)": [[3, "bardi.nlp_engineering.label_processor.LabelProcessorArtifactsWriteConfig"]], "mapsplit (class in bardi.nlp_engineering.splitter)": [[3, "bardi.nlp_engineering.splitter.MapSplit"]], "newsplit (class in bardi.nlp_engineering.splitter)": [[3, "bardi.nlp_engineering.splitter.NewSplit"]], "normalizer (class in bardi.nlp_engineering.normalizer)": [[3, "bardi.nlp_engineering.normalizer.Normalizer"]], "pathologyreportregexset (class in bardi.nlp_engineering.regex_library.pathology_report)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet"]], "postprocessor (class in bardi.nlp_engineering.post_processor)": [[3, "bardi.nlp_engineering.post_processor.PostProcessor"]], "pretokenizer (class in bardi.nlp_engineering.pre_tokenizer)": [[3, "bardi.nlp_engineering.pre_tokenizer.PreTokenizer"]], "regexset (class in bardi.nlp_engineering.regex_library.regex_set)": [[3, "bardi.nlp_engineering.regex_library.regex_set.RegexSet"]], "regexsubpair (class in bardi.nlp_engineering.regex_library.regex_set)": [[3, "bardi.nlp_engineering.regex_library.regex_set.RegexSubPair"]], "splitter (class in bardi.nlp_engineering.splitter)": [[3, "bardi.nlp_engineering.splitter.Splitter"]], "artifacts (bardi.nlp_engineering.post_processor.cpupostprocessor attribute)": [[3, "bardi.nlp_engineering.post_processor.CPUPostProcessor.artifacts"]], "bardi.nlp_engineering.embedding_generator": [[3, "module-bardi.nlp_engineering.embedding_generator"]], "bardi.nlp_engineering.label_processor": [[3, "module-bardi.nlp_engineering.label_processor"]], "bardi.nlp_engineering.normalizer": [[3, "module-bardi.nlp_engineering.normalizer"]], "bardi.nlp_engineering.post_processor": [[3, "module-bardi.nlp_engineering.post_processor"]], "bardi.nlp_engineering.pre_tokenizer": [[3, "module-bardi.nlp_engineering.pre_tokenizer"]], "bardi.nlp_engineering.regex_library.pathology_report": [[3, "module-bardi.nlp_engineering.regex_library.pathology_report"]], "bardi.nlp_engineering.regex_library.regex_lib": [[3, "module-bardi.nlp_engineering.regex_library.regex_lib"]], "bardi.nlp_engineering.regex_library.regex_set": [[3, "module-bardi.nlp_engineering.regex_library.regex_set"]], "bardi.nlp_engineering.splitter": [[3, "module-bardi.nlp_engineering.splitter"]], "checkpoint_path (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator attribute)": [[3, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.checkpoint_path"]], "checkpoint_path (bardi.nlp_engineering.embedding_generator.embeddinggenerator attribute)": [[3, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.checkpoint_path"]], "concat_fields (bardi.nlp_engineering.post_processor.cpupostprocessor attribute)": [[3, "bardi.nlp_engineering.post_processor.CPUPostProcessor.concat_fields"]], "concat_fields (bardi.nlp_engineering.post_processor.postprocessor attribute)": [[3, "bardi.nlp_engineering.post_processor.PostProcessor.concat_fields"]], "convert_escape_codes (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.convert_escape_codes"]], "cores (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator attribute)": [[3, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.cores"]], "cores (bardi.nlp_engineering.embedding_generator.embeddinggenerator attribute)": [[3, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.cores"]], "data (bardi.nlp_engineering.post_processor.cpupostprocessor attribute)": [[3, "bardi.nlp_engineering.post_processor.CPUPostProcessor.data"]], "embedding_matrix_format (bardi.nlp_engineering.embedding_generator.embeddinggeneratorartifactswriteconfig attribute)": [[3, "bardi.nlp_engineering.embedding_generator.EmbeddingGeneratorArtifactsWriteConfig.embedding_matrix_format"]], "embedding_matrix_format_args (bardi.nlp_engineering.embedding_generator.embeddinggeneratorartifactswriteconfig attribute)": [[3, "bardi.nlp_engineering.embedding_generator.EmbeddingGeneratorArtifactsWriteConfig.embedding_matrix_format_args"]], "epochs (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator attribute)": [[3, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.epochs"]], "epochs (bardi.nlp_engineering.embedding_generator.embeddinggenerator attribute)": [[3, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.epochs"]], "field_rename (bardi.nlp_engineering.post_processor.cpupostprocessor attribute)": [[3, "bardi.nlp_engineering.post_processor.CPUPostProcessor.field_rename"]], "field_rename (bardi.nlp_engineering.post_processor.postprocessor attribute)": [[3, "bardi.nlp_engineering.post_processor.PostProcessor.field_rename"]], "fields (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator attribute)": [[3, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.fields"]], "fields (bardi.nlp_engineering.embedding_generator.embeddinggenerator attribute)": [[3, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.fields"]], "fields (bardi.nlp_engineering.label_processor.cpulabelprocessor attribute)": [[3, "bardi.nlp_engineering.label_processor.CPULabelProcessor.fields"]], "fields (bardi.nlp_engineering.label_processor.labelprocessor attribute)": [[3, "bardi.nlp_engineering.label_processor.LabelProcessor.fields"]], "fields (bardi.nlp_engineering.normalizer.cpunormalizer attribute)": [[3, "bardi.nlp_engineering.normalizer.CPUNormalizer.fields"]], "fields (bardi.nlp_engineering.normalizer.normalizer attribute)": [[3, "bardi.nlp_engineering.normalizer.Normalizer.fields"]], "fields (bardi.nlp_engineering.post_processor.cpupostprocessor attribute)": [[3, "bardi.nlp_engineering.post_processor.CPUPostProcessor.fields"]], "fields (bardi.nlp_engineering.post_processor.postprocessor attribute)": [[3, "bardi.nlp_engineering.post_processor.PostProcessor.fields"]], "fields (bardi.nlp_engineering.pre_tokenizer.cpupretokenizer attribute)": [[3, "bardi.nlp_engineering.pre_tokenizer.CPUPreTokenizer.fields"]], "fields (bardi.nlp_engineering.pre_tokenizer.pretokenizer attribute)": [[3, "bardi.nlp_engineering.pre_tokenizer.PreTokenizer.fields"]], "fix_pluralization (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.fix_pluralization"]], "get_address_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_address_regex"]], "get_angle_brackets_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_angle_brackets_regex"]], "get_cassette_name_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_cassette_name_regex"]], "get_cassettes_spacing_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_cassettes_spacing_regex"]], "get_dash_digits_spacing_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_dash_digits_spacing_regex"]], "get_dates_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_dates_regex"]], "get_decimal_segmented_numbers_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_decimal_segmented_numbers_regex"]], "get_digits_words_spacing_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_digits_words_spacing_regex"]], "get_dimension_spacing_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_dimension_spacing_regex"]], "get_dimensions_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_dimensions_regex"]], "get_duration_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_duration_regex"]], "get_escape_code_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_escape_code_regex"]], "get_fix_pluralization_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_fix_pluralization_regex"]], "get_large_digits_seq_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_large_digits_seq_regex"]], "get_large_float_seq_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_large_float_seq_regex"]], "get_leading_digit_punctuation_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_leading_digit_punctuation_regex"]], "get_leading_punctuation_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_leading_punctuation_regex"]], "get_letter_num_seq_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_letter_num_seq_regex"]], "get_literals_floats_spacing_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_literals_floats_spacing_regex"]], "get_math_spacing_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_math_spacing_regex"]], "get_measure_spacing_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_measure_spacing_regex"]], "get_multiple_punct_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_multiple_punct_regex"]], "get_parameters() (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator method)": [[3, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.get_parameters"]], "get_parameters() (bardi.nlp_engineering.label_processor.cpulabelprocessor method)": [[3, "bardi.nlp_engineering.label_processor.CPULabelProcessor.get_parameters"]], "get_parameters() (bardi.nlp_engineering.post_processor.cpupostprocessor method)": [[3, "bardi.nlp_engineering.post_processor.CPUPostProcessor.get_parameters"]], "get_percent_sign_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_percent_sign_regex"]], "get_phone_number_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_phone_number_regex"]], "get_regex_set() (bardi.nlp_engineering.regex_library.regex_set.regexset method)": [[3, "bardi.nlp_engineering.regex_library.regex_set.RegexSet.get_regex_set"]], "get_spaces_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_spaces_regex"]], "get_special_punct_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_special_punct_regex"]], "get_specimen_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_specimen_regex"]], "get_time_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_time_regex"]], "get_trailing_punctuation_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_trailing_punctuation_regex"]], "get_trunc_decimals_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_trunc_decimals_regex"]], "get_urls_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_urls_regex"]], "get_whitespace_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_whitespace_regex"]], "get_words_with_punct_spacing_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[3, "bardi.nlp_engineering.regex_library.regex_lib.get_words_with_punct_spacing_regex"]], "group_cols (bardi.nlp_engineering.splitter.cpusplitter attribute)": [[3, "bardi.nlp_engineering.splitter.CPUSplitter.group_cols"]], "group_cols (bardi.nlp_engineering.splitter.newsplit attribute)": [[3, "bardi.nlp_engineering.splitter.NewSplit.group_cols"]], "group_cols (bardi.nlp_engineering.splitter.splitter attribute)": [[3, "bardi.nlp_engineering.splitter.Splitter.group_cols"]], "handle_angle_brackets (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.handle_angle_brackets"]], "handle_cassettes_spacing (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.handle_cassettes_spacing"]], "handle_dash_digit_spacing (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.handle_dash_digit_spacing"]], "handle_digits_words_spacing (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.handle_digits_words_spacing"]], "handle_dimension_spacing (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.handle_dimension_spacing"]], "handle_leading_digit_punct (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.handle_leading_digit_punct"]], "handle_literals_floats_spacing (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.handle_literals_floats_spacing"]], "handle_math_spacing (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.handle_math_spacing"]], "handle_measure_spacing (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.handle_measure_spacing"]], "handle_whitespaces (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.handle_whitespaces"]], "handle_words_with_punct_spacing (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.handle_words_with_punct_spacing"]], "id_to_label (bardi.nlp_engineering.label_processor.cpulabelprocessor attribute)": [[3, "bardi.nlp_engineering.label_processor.CPULabelProcessor.id_to_label"]], "id_to_label_args (bardi.nlp_engineering.label_processor.labelprocessorartifactswriteconfig attribute)": [[3, "bardi.nlp_engineering.label_processor.LabelProcessorArtifactsWriteConfig.id_to_label_args"]], "id_to_label_format (bardi.nlp_engineering.label_processor.labelprocessorartifactswriteconfig attribute)": [[3, "bardi.nlp_engineering.label_processor.LabelProcessorArtifactsWriteConfig.id_to_label_format"]], "id_to_token (bardi.nlp_engineering.post_processor.cpupostprocessor attribute)": [[3, "bardi.nlp_engineering.post_processor.CPUPostProcessor.id_to_token"], [3, "id0"]], "id_to_token (bardi.nlp_engineering.post_processor.postprocessor attribute)": [[3, "bardi.nlp_engineering.post_processor.PostProcessor.id_to_token"]], "label_cols (bardi.nlp_engineering.splitter.cpusplitter attribute)": [[3, "bardi.nlp_engineering.splitter.CPUSplitter.label_cols"]], "label_cols (bardi.nlp_engineering.splitter.newsplit attribute)": [[3, "bardi.nlp_engineering.splitter.NewSplit.label_cols"]], "label_cols (bardi.nlp_engineering.splitter.splitter attribute)": [[3, "bardi.nlp_engineering.splitter.Splitter.label_cols"]], "load_saved_model (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator attribute)": [[3, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.load_saved_model"]], "load_saved_model (bardi.nlp_engineering.embedding_generator.embeddinggenerator attribute)": [[3, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.load_saved_model"]], "lowercase (bardi.nlp_engineering.normalizer.cpunormalizer attribute)": [[3, "bardi.nlp_engineering.normalizer.CPUNormalizer.lowercase"]], "lowercase (bardi.nlp_engineering.normalizer.normalizer attribute)": [[3, "bardi.nlp_engineering.normalizer.Normalizer.lowercase"]], "mapping (bardi.nlp_engineering.label_processor.cpulabelprocessor attribute)": [[3, "bardi.nlp_engineering.label_processor.CPULabelProcessor.mapping"]], "method (bardi.nlp_engineering.label_processor.cpulabelprocessor attribute)": [[3, "bardi.nlp_engineering.label_processor.CPULabelProcessor.method"]], "method (bardi.nlp_engineering.label_processor.labelprocessor attribute)": [[3, "bardi.nlp_engineering.label_processor.LabelProcessor.method"]], "min_alpha (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator attribute)": [[3, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.min_alpha"]], "min_alpha (bardi.nlp_engineering.embedding_generator.embeddinggenerator attribute)": [[3, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.min_alpha"]], "min_word_count (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator attribute)": [[3, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.min_word_count"]], "min_word_count (bardi.nlp_engineering.embedding_generator.embeddinggenerator attribute)": [[3, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.min_word_count"]], "negative (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator attribute)": [[3, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.negative"]], "negative (bardi.nlp_engineering.embedding_generator.embeddinggenerator attribute)": [[3, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.negative"]], "num_splits (bardi.nlp_engineering.splitter.cpusplitter attribute)": [[3, "bardi.nlp_engineering.splitter.CPUSplitter.num_splits"]], "num_splits (bardi.nlp_engineering.splitter.splitter attribute)": [[3, "bardi.nlp_engineering.splitter.Splitter.num_splits"]], "random_seed (bardi.nlp_engineering.splitter.cpusplitter attribute)": [[3, "bardi.nlp_engineering.splitter.CPUSplitter.random_seed"]], "random_seed (bardi.nlp_engineering.splitter.newsplit attribute)": [[3, "bardi.nlp_engineering.splitter.NewSplit.random_seed"]], "random_seed (bardi.nlp_engineering.splitter.splitter attribute)": [[3, "bardi.nlp_engineering.splitter.Splitter.random_seed"]], "regex_set (bardi.nlp_engineering.normalizer.cpunormalizer attribute)": [[3, "bardi.nlp_engineering.normalizer.CPUNormalizer.regex_set"]], "regex_set (bardi.nlp_engineering.normalizer.normalizer attribute)": [[3, "bardi.nlp_engineering.normalizer.Normalizer.regex_set"]], "regex_set (bardi.nlp_engineering.regex_library.regex_set.regexset attribute)": [[3, "bardi.nlp_engineering.regex_library.regex_set.RegexSet.regex_set"]], "regex_str (bardi.nlp_engineering.regex_library.regex_set.regexsubpair attribute)": [[3, "bardi.nlp_engineering.regex_library.regex_set.RegexSubPair.regex_str"], [3, "id1"]], "remove_addresses (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.remove_addresses"]], "remove_cassette_names (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.remove_cassette_names"]], "remove_dates (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.remove_dates"]], "remove_decimal_seg_numbers (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.remove_decimal_seg_numbers"]], "remove_dimensions (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.remove_dimensions"]], "remove_duration_time (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.remove_duration_time"]], "remove_large_digits_seq (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.remove_large_digits_seq"]], "remove_large_floats_seq (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.remove_large_floats_seq"]], "remove_leading_punct (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.remove_leading_punct"]], "remove_letter_num_seq (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.remove_letter_num_seq"]], "remove_multiple_punct (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.remove_multiple_punct"]], "remove_phone_numbers (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.remove_phone_numbers"]], "remove_special_punct (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.remove_special_punct"]], "remove_specimen (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.remove_specimen"]], "remove_times (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.remove_times"]], "remove_trailing_punct (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.remove_trailing_punct"]], "remove_urls (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.remove_urls"]], "replace_percent_sign (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.replace_percent_sign"]], "run() (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator method)": [[3, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.run"]], "run() (bardi.nlp_engineering.embedding_generator.embeddinggenerator method)": [[3, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.run"]], "run() (bardi.nlp_engineering.label_processor.cpulabelprocessor method)": [[3, "bardi.nlp_engineering.label_processor.CPULabelProcessor.run"]], "run() (bardi.nlp_engineering.label_processor.labelprocessor method)": [[3, "bardi.nlp_engineering.label_processor.LabelProcessor.run"]], "run() (bardi.nlp_engineering.normalizer.cpunormalizer method)": [[3, "bardi.nlp_engineering.normalizer.CPUNormalizer.run"]], "run() (bardi.nlp_engineering.normalizer.normalizer method)": [[3, "bardi.nlp_engineering.normalizer.Normalizer.run"]], "run() (bardi.nlp_engineering.post_processor.cpupostprocessor method)": [[3, "bardi.nlp_engineering.post_processor.CPUPostProcessor.run"]], "run() (bardi.nlp_engineering.post_processor.postprocessor method)": [[3, "bardi.nlp_engineering.post_processor.PostProcessor.run"]], "run() (bardi.nlp_engineering.pre_tokenizer.cpupretokenizer method)": [[3, "bardi.nlp_engineering.pre_tokenizer.CPUPreTokenizer.run"]], "run() (bardi.nlp_engineering.pre_tokenizer.pretokenizer method)": [[3, "bardi.nlp_engineering.pre_tokenizer.PreTokenizer.run"]], "run() (bardi.nlp_engineering.splitter.cpusplitter method)": [[3, "bardi.nlp_engineering.splitter.CPUSplitter.run"]], "run() (bardi.nlp_engineering.splitter.splitter method)": [[3, "bardi.nlp_engineering.splitter.Splitter.run"]], "sample (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator attribute)": [[3, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.sample"]], "sample (bardi.nlp_engineering.embedding_generator.embeddinggenerator attribute)": [[3, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.sample"]], "seed (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator attribute)": [[3, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.seed"]], "seed (bardi.nlp_engineering.embedding_generator.embeddinggenerator attribute)": [[3, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.seed"]], "set_write_config() (bardi.nlp_engineering.embedding_generator.embeddinggenerator method)": [[3, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.set_write_config"]], "set_write_config() (bardi.nlp_engineering.label_processor.labelprocessor method)": [[3, "bardi.nlp_engineering.label_processor.LabelProcessor.set_write_config"]], "split_mapping (bardi.nlp_engineering.splitter.cpusplitter attribute)": [[3, "bardi.nlp_engineering.splitter.CPUSplitter.split_mapping"]], "split_mapping (bardi.nlp_engineering.splitter.mapsplit attribute)": [[3, "bardi.nlp_engineering.splitter.MapSplit.split_mapping"]], "split_mapping (bardi.nlp_engineering.splitter.splitter attribute)": [[3, "bardi.nlp_engineering.splitter.Splitter.split_mapping"]], "split_method (bardi.nlp_engineering.splitter.cpusplitter attribute)": [[3, "bardi.nlp_engineering.splitter.CPUSplitter.split_method"]], "split_method (bardi.nlp_engineering.splitter.splitter attribute)": [[3, "bardi.nlp_engineering.splitter.Splitter.split_method"]], "split_pattern (bardi.nlp_engineering.pre_tokenizer.cpupretokenizer attribute)": [[3, "bardi.nlp_engineering.pre_tokenizer.CPUPreTokenizer.split_pattern"]], "split_pattern (bardi.nlp_engineering.pre_tokenizer.pretokenizer attribute)": [[3, "bardi.nlp_engineering.pre_tokenizer.PreTokenizer.split_pattern"]], "split_proportions (bardi.nlp_engineering.splitter.cpusplitter attribute)": [[3, "bardi.nlp_engineering.splitter.CPUSplitter.split_proportions"]], "split_proportions (bardi.nlp_engineering.splitter.newsplit attribute)": [[3, "bardi.nlp_engineering.splitter.NewSplit.split_proportions"]], "split_proportions (bardi.nlp_engineering.splitter.splitter attribute)": [[3, "bardi.nlp_engineering.splitter.Splitter.split_proportions"]], "split_type (bardi.nlp_engineering.splitter.cpusplitter attribute)": [[3, "bardi.nlp_engineering.splitter.CPUSplitter.split_type"]], "split_type (bardi.nlp_engineering.splitter.splitter attribute)": [[3, "bardi.nlp_engineering.splitter.Splitter.split_type"]], "sub_str (bardi.nlp_engineering.regex_library.regex_set.regexsubpair attribute)": [[3, "bardi.nlp_engineering.regex_library.regex_set.RegexSubPair.sub_str"], [3, "id2"]], "trunc_decimals (bardi.nlp_engineering.regex_library.pathology_report.pathologyreportregexset attribute)": [[3, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet.trunc_decimals"]], "unique_record_cols (bardi.nlp_engineering.splitter.cpusplitter attribute)": [[3, "bardi.nlp_engineering.splitter.CPUSplitter.unique_record_cols"]], "unique_record_cols (bardi.nlp_engineering.splitter.mapsplit attribute)": [[3, "bardi.nlp_engineering.splitter.MapSplit.unique_record_cols"]], "unique_record_cols (bardi.nlp_engineering.splitter.newsplit attribute)": [[3, "bardi.nlp_engineering.splitter.NewSplit.unique_record_cols"]], "unique_record_cols (bardi.nlp_engineering.splitter.splitter attribute)": [[3, "bardi.nlp_engineering.splitter.Splitter.unique_record_cols"]], "vector_size (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator attribute)": [[3, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.vector_size"]], "vector_size (bardi.nlp_engineering.embedding_generator.embeddinggenerator attribute)": [[3, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.vector_size"]], "vocab_exclude_list (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator attribute)": [[3, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.vocab_exclude_list"]], "vocab_exclude_list (bardi.nlp_engineering.embedding_generator.embeddinggenerator attribute)": [[3, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.vocab_exclude_list"]], "vocab_format (bardi.nlp_engineering.embedding_generator.embeddinggeneratorartifactswriteconfig attribute)": [[3, "bardi.nlp_engineering.embedding_generator.EmbeddingGeneratorArtifactsWriteConfig.vocab_format"]], "vocab_format_args (bardi.nlp_engineering.embedding_generator.embeddinggeneratorartifactswriteconfig attribute)": [[3, "bardi.nlp_engineering.embedding_generator.EmbeddingGeneratorArtifactsWriteConfig.vocab_format_args"]], "window (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator attribute)": [[3, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.window"]], "window (bardi.nlp_engineering.embedding_generator.embeddinggenerator attribute)": [[3, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.window"]], "write_artifacts() (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator method)": [[3, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.write_artifacts"]], "write_artifacts() (bardi.nlp_engineering.label_processor.cpulabelprocessor method)": [[3, "bardi.nlp_engineering.label_processor.CPULabelProcessor.write_artifacts"]]}})