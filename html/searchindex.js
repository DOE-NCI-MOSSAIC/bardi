Search.setIndex({"docnames": ["bardi", "bardi.data", "bardi.data.utils", "bardi.nlp_engineering", "bardi.nlp_engineering.regex_library", "bardi.nlp_engineering.utils", "example", "index", "modules"], "filenames": ["bardi.rst", "bardi.data.rst", "bardi.data.utils.rst", "bardi.nlp_engineering.rst", "bardi.nlp_engineering.regex_library.rst", "bardi.nlp_engineering.utils.rst", "example.rst", "index.rst", "modules.rst"], "titles": ["bardi package", "bardi.data package", "bardi.data.utils package", "bardi.nlp_engineering package", "bardi.nlp_engineering.regex_library package", "bardi.nlp_engineering.utils package", "Examples", "Welcome to bardi\u2019s documentation!", "bardi"], "terms": {"data": [0, 3, 5, 6, 7, 8], "util": [0, 1, 3, 7], "pyarrow_util": [0, 1], "data_handl": [0, 7, 8], "dataset": [0, 1, 3], "get_paramet": [0, 1, 3, 8], "from_duckdb": [0, 1], "from_fil": [0, 1], "from_json": [0, 1], "from_panda": [0, 1], "from_pyarrow": [0, 1], "to_panda": [0, 1], "to_polar": [0, 1], "write_fil": [0, 1], "nlp_engin": [0, 7, 8], "regex_librari": [0, 3], "pathology_report": [0, 3], "regex_lib": [0, 3], "regex_set": [0, 3], "valid": [0, 1, 3], "embedding_gener": [0, 7, 8], "cpuembeddinggener": [0, 3], "run": [0, 3, 8], "write_artifact": [0, 3, 8], "embeddinggener": [0, 3], "set_write_config": [0, 3, 8], "embeddinggeneratorartifactswriteconfig": [0, 3], "embedding_matrix_format": [0, 3], "embedding_matrix_format_arg": [0, 3], "vocab_format": [0, 3], "vocab_format_arg": [0, 3], "label_processor": [0, 7, 8], "cpulabelprocessor": [0, 3], "labelprocessor": [0, 3], "labelprocessorartifactswriteconfig": [0, 3], "id_to_label_arg": [0, 3], "id_to_label_format": [0, 3], "normal": [0, 7, 8], "cpunorm": [0, 3], "post_processor": [0, 7, 8], "cpupostprocessor": [0, 3], "postprocessor": [0, 3], "pre_token": [0, 7, 8], "cpupretoken": [0, 3], "pretoken": [0, 3], "splitter": [0, 7, 8], "cpusplitt": [0, 3], "mapsplit": [0, 3], "split_map": [0, 3], "unique_record_col": [0, 3], "newsplit": [0, 3], "group_col": [0, 3], "label_col": [0, 3], "random_se": [0, 3], "split_proport": [0, 3], "defin": [0, 4], "framework": [0, 7], "step": [0, 3, 7, 8], "class": [0, 1, 3, 4], "datawriteconfig": [0, 3, 8], "sourc": [0, 1, 2, 3, 4, 5], "base": [0, 1, 3, 4, 7], "typeddict": [0, 3, 4], "data_format": [0, 8], "str": [0, 1, 3, 4, 5], "data_format_arg": [0, 8], "dict": [0, 1, 3], "none": [0, 1, 3, 4, 5], "write_path": [0, 3], "write_output": [0, 3], "liter": 0, "output": [0, 3], "debug": 0, "fals": [0, 3], "data_write_config": 0, "data_filenam": 0, "bardi_processed_data": 0, "object": [0, 1, 3, 4], "organ": 0, "oper": [0, 1, 3, 4, 7], "from": [0, 1, 3, 4, 6], "add_step": [0, 8], "add": [0, 3, 4], "list": [0, 1, 2, 3, 4, 5], "execut": 0, "also": [0, 1, 3, 4, 5], "overwrit": [0, 3], "": [0, 1, 3, 4, 6], "write": [0, 1, 3], "configur": [0, 3, 4], "consist": [0, 4], "condens": 0, "bool": [0, 1, 3, 4], "true": [0, 3, 4], "return": [0, 1, 3, 4], "param": 0, "each": [0, 3, 7], "keyword": [0, 1, 3, 5], "argument": [0, 1, 3, 5], "If": [0, 3], "dictionari": [0, 3, 4], "exclud": [0, 3], "ani": [0, 4, 6], "attribut": [0, 1, 3, 4], "set": [0, 1, 3, 4], "us": [0, 1, 3, 4, 5], "run_pipelin": [0, 8], "call": 0, "method": [0, 3, 5], "respect": 0, "ad": 0, "blueprint": [0, 4], "creat": [0, 1, 3, 4, 6, 7], "new": [0, 3, 4, 7], "pre": [0, 3, 4, 7], "process": [0, 3, 7], "default": [0, 3], "implement": [0, 3, 7], "custom": [0, 1, 3, 7], "need": [0, 3, 4, 7], "remov": [0, 4], "larg": [0, 3, 4], "item": 0, "A": [0, 1, 3, 4], "copi": 0, "abstract": [0, 3, 7], "tabl": [0, 1, 2, 3, 5], "artifact": [0, 3, 4], "tupl": [0, 3], "arg": [0, 1, 3, 4], "expect": [0, 3], "receiv": [0, 3], "pyarrow": [0, 1, 3, 5], "preced": 0, "can": [0, 1, 3, 4, 7], "ignor": [0, 3], "valu": [0, 1, 3, 4], "ar": [0, 1, 3, 4, 5, 6, 7], "perform": [0, 1, 3], "transform": 0, "thi": [0, 1, 3, 4, 5], "replac": [0, 4], "processed_data": 0, "besid": 0, "kei": [0, 3], "correspond": 0, "name": [0, 1, 3, 4], "being": [0, 6], "data_config": [0, 3], "provid": [0, 3, 4, 7], "desir": [0, 3], "i": [0, 1, 3, 4, 5, 6, 7], "e": [0, 3, 4], "parquet": [0, 1], "csv": [0, 1], "etc": [0, 4], "particular": [0, 3], "avail": [0, 1, 3, 7], "api": [0, 1], "sinc": 0, "onli": [0, 3, 4], "some": [0, 6], "requir": [0, 3, 4], "behaviour": 0, "pass": [0, 1, 3, 5], "specif": [0, 1, 3, 4, 7], "produc": [0, 3], "directori": [0, 3], "where": [0, 1, 3], "file": [0, 1, 3], "should": [0, 4], "written": [0, 1, 3, 7], "union": [0, 1, 3, 5], "write_data": [0, 8], "reus": 0, "exist": [0, 1, 3], "pattern": [0, 3, 4], "handler": 0, "filetyp": [0, 1], "extens": [0, 7], "chunk_pyarrow_t": [1, 2], "store": 1, "refer": [1, 5], "relev": 1, "metadata": 1, "handl": [1, 3], "form": [1, 3], "column": [1, 3, 5], "row": 1, "under": 1, "hood": 1, "modern": 1, "effici": [1, 7], "start": [1, 4], "point": 1, "both": [1, 7], "cpu": [1, 3, 7], "gpu": [1, 7], "workflow": [1, 7], "origin_queri": 1, "origin_file_path": 1, "origin_format": 1, "origin_row_count": 1, "int": [1, 2, 3], "path": [1, 3], "queri": 1, "min_batch": [1, 2], "duckdb": 1, "databas": 1, "filepath": 1, "sql": 1, "adher": 1, "syntax": 1, "an": [1, 3, 4, 6, 7], "integ": [1, 3], "number": [1, 3, 4], "split": [1, 3, 4], "amount": 1, "smaller": [1, 3], "distribut": [1, 3, 7], "worker": 1, "node": [1, 7], "probabl": 1, "align": [1, 6], "referenc": [1, 3], "wa": [1, 3, 4], "suppli": [1, 3, 5], "after": [1, 4], "convers": 1, "format": [1, 4], "kwarg": [1, 3], "accept": 1, "type": [1, 3, 4, 5], "ipc": 1, "arrow": [1, 7], "feather": 1, "orc": 1, "The": [1, 3, 4, 5, 6], "function": [1, 3, 7], "read": 1, "thu": 1, "all": [1, 3], "its": 1, "here": [1, 3], "singl": [1, 3, 4, 7], "current": [1, 3], "support": [1, 3], "comput": [1, 3, 7], "environ": 1, "rais": [1, 3, 5], "valueerror": 1, "doe": [1, 3], "contain": [1, 3, 5], "json_data": 1, "json": 1, "pair": [1, 4], "becom": 1, "df": [1, 6], "datafram": [1, 6], "panda": [1, 6], "intend": [1, 3], "pipelin": [1, 3, 7, 8], "flag": 1, "which": [1, 3], "prompt": 1, "chunk": 1, "prepar": 1, "later": 1, "direct": [1, 3], "futur": [1, 7], "manner": 1, "polar": [1, 7], "filesystem": 1, "npy": 1, "addit": [1, 4], "document": 1, "row_count": 2, "pathologyreportregexset": [3, 4], "get_address_regex": [3, 4], "get_angle_brackets_regex": [3, 4], "get_cassette_name_regex": [3, 4], "get_cassettes_spacing_regex": [3, 4], "get_dash_digits_spacing_regex": [3, 4], "get_dates_regex": [3, 4], "get_decimal_segmented_numbers_regex": [3, 4], "get_digits_words_spacing_regex": [3, 4], "get_dimension_spacing_regex": [3, 4], "get_dimensions_regex": [3, 4], "get_duration_regex": [3, 4], "get_escape_code_regex": [3, 4], "get_fix_pluralization_regex": [3, 4], "get_large_digits_seq_regex": [3, 4], "get_large_float_seq_regex": [3, 4], "get_leading_digit_punctuation_regex": [3, 4], "get_leading_punctuation_regex": [3, 4], "get_letter_num_seq_regex": [3, 4], "get_literals_floats_spacing_regex": [3, 4], "get_math_spacing_regex": [3, 4], "get_measure_spacing_regex": [3, 4], "get_multiple_punct_regex": [3, 4], "get_percent_sign_regex": [3, 4], "get_phone_number_regex": [3, 4], "get_spaces_regex": [3, 4], "get_special_punct_regex": [3, 4], "get_specimen_regex": [3, 4], "get_time_regex": [3, 4], "get_trailing_punctuation_regex": [3, 4], "get_trunc_decimals_regex": [3, 4], "get_urls_regex": [3, 4], "get_whitespace_regex": [3, 4], "get_words_with_punct_spacing_regex": [3, 4], "regexset": [3, 4], "get_regex_set": [3, 4], "regexsubpair": [3, 4], "regex_str": [3, 4], "sub_str": [3, 4], "validate_list_str_col": [3, 5], "validate_pyarrow_t": [3, 5], "validate_str_col": [3, 5], "train": [3, 7], "word2vec": 3, "model": [3, 7], "vocab": 3, "word": [3, 4], "embed": 3, "gener": 3, "interfac": 3, "vector": 3, "represent": 3, "token": 3, "gensim": 3, "librari": [3, 4], "field": [3, 5], "text": [3, 4, 6], "consid": 3, "load_saved_model": 3, "checkpoint_path": 3, "checkpoint": 3, "core": [3, 7], "min_word_count": 3, "total": 3, "frequenc": 3, "lower": [3, 4], "than": 3, "window": 3, "maximum": 3, "distanc": 3, "between": [3, 4], "predict": 3, "vector_s": 3, "size": 3, "sampl": [3, 6], "float": [3, 4], "threshold": 3, "high": 3, "randomli": 3, "ownsampl": 3, "rang": 3, "0": [3, 4], "1e": 3, "5": [3, 4], "min_alpha": 3, "learn": [3, 7], "rate": 3, "linearli": 3, "drop": 3, "progress": 3, "neg": [3, 4, 6], "epoch": 3, "iter": 3, "seed": 3, "random": 3, "generetor": 3, "determinist": 3, "you": 3, "thread": 3, "1": [3, 4, 6], "aka": 3, "pythonhashse": 3, "vocab_exclude_list": 3, "mai": 3, "present": [3, 6], "would": 3, "like": [3, 4], "primari": 3, "get": 3, "alter": 3, "retriv": 3, "least": [3, 4], "one": 3, "consum": 3, "must": 3, "correctli": 3, "first": [3, 4], "posit": [3, 6], "second": 3, "embedding_matrix": 3, "id_to_token": 3, "oartifactsproduc": 3, "8": [3, 4], "10": [3, 4], "300": 3, "6e": 3, "05": 3, "007": 3, "20": [3, 4], "30": [3, 4], "42": 3, "avoid": [3, 4], "instanti": 3, "instead": 3, "child": 3, "depend": 3, "hardwar": [3, 7], "artifacts_config": 3, "indic": [3, 6], "config": 3, "label": 3, "processor": 3, "map": 3, "standard": 3, "appli": [3, 4], "uniqu": 3, "id": 3, "convert": 3, "id_to_label": 3, "revers": 3, "downstream": 3, "back": [3, 4], "origin": 3, "becaus": 3, "just": [3, 7], "specifi": [3, 4, 5], "creation": 3, "notimplementederror": 3, "other": [3, 4], "typeerror": [3, 5], "clean": [3, 4], "regular": [3, 4, 6], "express": [3, 4], "input": 3, "substitut": [3, 4], "lowercas": 3, "dicionari": 3, "whether": 3, "string": [3, 4, 5], "large_str": [3, 5], "post": 3, "field_renam": 3, "option": 3, "abil": 3, "renam": 3, "vocabulari": 3, "construct": 3, "altern": 3, "flexibl": 3, "versu": 3, "dure": 3, "concat_field": 3, "concaten": 3, "left": 3, "separ": 3, "reli": 3, "multipl": [3, 4, 7], "wai": 3, "wasn": 3, "t": [3, 7], "through": 3, "final": 3, "element": 3, "hold": 3, "attributeerror": 3, "either": 3, "simpl": 3, "break": 3, "down": 3, "unit": [3, 7], "befor": 3, "further": [3, 6], "split_pattern": 3, "charact": [3, 4], "divid": 3, "segment": 3, "By": 3, "done": 3, "space": [3, 4], "No": [3, 6], "so": 3, "test": 3, "val": 3, "assign": 3, "record": 3, "two": [3, 4], "scratch": 3, "previous": 3, "help": 3, "when": 3, "comparison": 3, "ensur": [3, 6], "exactli": 3, "same": [3, 7], "split_typ": 3, "num_split": 3, "includ": 3, "line": [3, 4], "hash": 3, "repres": 3, "follow": [3, 4, 6], "pseudocod": 3, "concat": 3, "thecorrespond": 3, "combin": [3, 4], "identifi": 3, "oftentim": 3, "note": 3, "program": 3, "crash": 3, "group": 3, "keep": [3, 4], "discret": 3, "x": [3, 4], "had": 3, "medic": 3, "patient": [3, 6], "end": 3, "up": [3, 6], "prevent": [3, 6], "potenti": 3, "inform": 3, "leakag": 3, "In": 3, "case": 3, "someth": 3, "patient_id": 3, "effort": 3, "made": 3, "balanc": 3, "across": [3, 7], "guarante": 3, "reproduc": [3, 7], "have": 3, "prefer": 3, "try": 3, "proport": 3, "75": 3, "15": 3, "split_method": 3, "parent": 3, "do": 3, "directli": [3, 4], "curat": 4, "pathologi": 4, "report": 4, "convert_escape_cod": 4, "handle_whitespac": 4, "remove_url": 4, "remove_special_punct": 4, "remove_multiple_punct": 4, "handle_angle_bracket": 4, "replace_percent_sign": 4, "handle_leading_digit_punct": 4, "remove_leading_punct": 4, "remove_trailing_punct": 4, "handle_words_with_punct_spac": 4, "handle_math_spac": 4, "handle_dimension_spac": 4, "handle_measure_spac": 4, "handle_cassettes_spac": 4, "handle_dash_digit_spac": 4, "handle_literals_floats_spac": 4, "fix_plur": 4, "handle_digits_words_spac": 4, "remove_phone_numb": 4, "remove_d": 4, "remove_tim": 4, "remove_address": 4, "remove_dimens": 4, "remove_specimen": 4, "remove_decimal_seg_numb": 4, "remove_large_digits_seq": 4, "remove_large_floats_seq": 4, "trunc_decim": 4, "remove_cassette_nam": 4, "remove_duration_tim": 4, "remove_letter_num_seq": 4, "match": 4, "address": 4, "num": 4, "street": 4, "6": 4, "2": [4, 6], "letter": 4, "state": 4, "short": [4, 7], "long": 4, "zip": 4, "code": [4, 6], "regex": 4, "exampl": 4, "1034": 4, "north": 4, "500": 4, "west": 4, "provo": 4, "ut": 4, "84604": 4, "3337": 4, "addresstoken": 4, "angl": 4, "bracket": 4, "fix": 4, "But": 4, "90": 4, "cassett": 4, "mark": 4, "block": 4, "cassettetoken": 4, "5e": 4, "6f": 4, "around": 4, "them": 4, "g": 4, "3e": 4, "3f": 4, "dash": 4, "digit": 4, "right": 4, "cm": 4, "9": 4, "7": 4, "date": 4, "co": 4, "03": 4, "09": 4, "2021": 4, "1015": 4, "complet": 4, "21": 4, "3": [4, 6], "34": 4, "datetoken": 4, "period": 4, "78": 4, "87": 4, "decimalsegmentednumbertoken": 4, "attach": 4, "begin": 4, "9837648admiss": 4, "9837648": 4, "admiss": 4, "measur": 4, "3x0": 4, "7x0": 4, "2d": 4, "3d": 4, "dimens": 4, "33": 4, "dimensiontoken": 4, "durat": 4, "specimen": 4, "treat": 4, "32d0909091": 4, "durationtoken": 4, "escap": 4, "x0d": 4, "x0a": 4, "codesx0dx0ax0d": 4, "r30": 4, "restor": 4, "plural": 4, "noun": 4, "demag": 4, "punctuat": 4, "sequenc": 4, "456123456": 4, "digitsequencetoken": 4, "456": 4, "123456": 4, "783": 4, "largefloattoken": 4, "numer": 4, "proce": 4, "elimin": 4, "insert": 4, "13": 4, "unremark": 4, "22": 4, "year": 4, "lead": 4, "3a": 4, "anterior": 4, "result": 4, "c001234567": 4, "letterdigitstoken": 4, "common": [4, 7], "problem": 4, "r18": 4, "0admiss": 4, "diagnosi": 4, "bi": 4, "n13": 4, "30admiss": 4, "math": 4, "symbol": 4, "aroud": 4, "95": 4, "mm": 4, "ml": 4, "proper": 4, "spece": 4, "11th": 4, "11": 4, "th": 4, "10mm": 4, "histolog": 4, "3cm": 4, "occur": 4, "_": 4, "___": 4, "signatur": 4, "sign": [4, 6], "percent": 4, "strong": 4, "intens": 4, "phone": 4, "delimet": 4, "ph": 4, "123": 4, "7890": 4, "It": [4, 6], "4567890": 4, "phonenumtoken": 4, "locat": 4, "arm": 4, "chosen": 4, "wt": 4, "ck": 4, "focal": 4, "sth": 4, "ab": 4, "cd": 4, "speciman": 4, "009345": 4, "sh": 4, "0011300": 4, "expected_output": 4, "specimentoken": 4, "time": 4, "am": 4, "30pm": 4, "52": 4, "07am": 4, "12": 4, "pm": 4, "12am": 4, "timetoken": 4, "trail": 4, "decim": 4, "99": 4, "url": 4, "urltoken": 4, "http": 4, "www": 4, "merck": 4, "com": 4, "keytruda_pi": 4, "pdf": 4, "carriag": 4, "tab": 4, "invas": 4, "IN": 4, "situ": 4, "n": 4, "hyphen": 4, "colon": 4, "length": 4, "d": 4, "her": 4, "tiff": 4, "1k": 4, "descript": 4, "gleason": 4, "domain": 4, "order": [4, 6], "r": 4, "whitespac": 4, "confirm": 5, "schema": 5, "check": [5, 6], "import": 6, "pd": 6, "patient_id_numb": 6, "notabl": 6, "chang": 6, "behavior": 6, "exhibit": 6, "increas": 6, "aggress": 6, "impuls": 6, "distinct": 6, "deviat": 6, "jedi": 6, "preliminari": 6, "examin": 6, "reveal": 6, "heighten": 6, "midichlorian": 6, "count": 6, "unsettl": 6, "connect": 6, "dark": 6, "side": 6, "forc": 6, "analysi": 6, "warrant": 6, "explor": 6, "extent": 6, "exposur": 6, "sith": 6, "teach": 6, "imper": 6, "monitor": 6, "individu": [6, 7], "close": 6, "worsen": 6, "symptom": 6, "engag": 6, "therapeut": 6, "intervent": 6, "aim": [6, 7], "descent": 6, "assess": 6, "crucial": 6, "determin": 6, "efficaci": 6, "strategi": 6, "overal": 6, "trajectori": 6, "dark_side_dx": 6, "succumb": 6, "stabl": 6, "continu": 6, "commit": 6, "influenc": 6, "were": 6, "observ": 6, "ins": 6, "council": 6, "sustain": 6, "well": [6, 7], "within": [6, 7], "manifest": 6, "palpabl": 6, "establish": 6, "ethic": 6, "initi": [6, 7], "disclos": 6, "elev": 6, "unmistak": 6, "investig": 6, "ascertain": 6, "depth": 6, "doctrin": 6, "essenti": 6, "track": 6, "exacerb": 6, "advis": 6, "forestal": 6, "deeper": 6, "embrac": 6, "subsequ": 6, "evalu": 6, "pivot": 6, "gaug": 6, "effect": 6, "allegi": 6, "batch": 7, "raw": 7, "integr": 7, "build": 7, "machin": 7, "infer": 7, "our": 7, "releas": 7, "version": 7, "develop": 7, "goal": 7, "while": 7, "differ": 7, "spark": 7, "cluster": 7, "via": 7, "pip": 7, "modular": 7, "held": 7, "apach": 7, "columnar": 7, "memori": 7, "take": 7, "advantag": 7, "multithread": 7, "design": 7, "compon": 7, "architectur": 7, "user": 7, "modul": [7, 8], "allow": 7, "straightforward": 7, "capabl": 7, "haven": 7, "been": 7, "yet": 7, "packag": [7, 8], "subpackag": [7, 8], "submodul": [7, 8], "github": 7, "page": 7, "index": 7, "search": 7, "content": 8}, "objects": {"": [[0, 0, 0, "-", "bardi"]], "bardi": [[1, 0, 0, "-", "data"], [3, 0, 0, "-", "nlp_engineering"], [0, 0, 0, "-", "pipeline"]], "bardi.data": [[1, 0, 0, "-", "data_handlers"], [2, 0, 0, "-", "utils"]], "bardi.data.data_handlers": [[1, 1, 1, "", "Dataset"], [1, 3, 1, "", "from_duckdb"], [1, 3, 1, "", "from_file"], [1, 3, 1, "", "from_json"], [1, 3, 1, "", "from_pandas"], [1, 3, 1, "", "from_pyarrow"], [1, 3, 1, "", "to_pandas"], [1, 3, 1, "", "to_polars"], [1, 3, 1, "", "write_file"]], "bardi.data.data_handlers.Dataset": [[1, 2, 1, "", "get_parameters"]], "bardi.data.utils": [[2, 0, 0, "-", "pyarrow_utils"]], "bardi.data.utils.pyarrow_utils": [[2, 3, 1, "", "chunk_pyarrow_table"]], "bardi.nlp_engineering": [[3, 0, 0, "-", "embedding_generator"], [3, 0, 0, "-", "label_processor"], [3, 0, 0, "-", "normalizer"], [3, 0, 0, "-", "post_processor"], [3, 0, 0, "-", "pre_tokenizer"], [4, 0, 0, "-", "regex_library"], [3, 0, 0, "-", "splitter"], [5, 0, 0, "-", "utils"]], "bardi.nlp_engineering.embedding_generator": [[3, 1, 1, "", "CPUEmbeddingGenerator"], [3, 1, 1, "", "EmbeddingGenerator"], [3, 1, 1, "", "EmbeddingGeneratorArtifactsWriteConfig"]], "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator": [[3, 2, 1, "", "get_parameters"], [3, 2, 1, "", "run"], [3, 2, 1, "", "write_artifacts"]], "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator": [[3, 2, 1, "", "run"], [3, 2, 1, "", "set_write_config"]], "bardi.nlp_engineering.embedding_generator.EmbeddingGeneratorArtifactsWriteConfig": [[3, 4, 1, "", "embedding_matrix_format"], [3, 4, 1, "", "embedding_matrix_format_args"], [3, 4, 1, "", "vocab_format"], [3, 4, 1, "", "vocab_format_args"]], "bardi.nlp_engineering.label_processor": [[3, 1, 1, "", "CPULabelProcessor"], [3, 1, 1, "", "LabelProcessor"], [3, 1, 1, "", "LabelProcessorArtifactsWriteConfig"]], "bardi.nlp_engineering.label_processor.CPULabelProcessor": [[3, 2, 1, "", "get_parameters"], [3, 2, 1, "", "run"], [3, 2, 1, "", "write_artifacts"]], "bardi.nlp_engineering.label_processor.LabelProcessor": [[3, 2, 1, "", "run"], [3, 2, 1, "", "set_write_config"]], "bardi.nlp_engineering.label_processor.LabelProcessorArtifactsWriteConfig": [[3, 4, 1, "", "id_to_label_args"], [3, 4, 1, "", "id_to_label_format"]], "bardi.nlp_engineering.normalizer": [[3, 1, 1, "", "CPUNormalizer"], [3, 1, 1, "", "Normalizer"]], "bardi.nlp_engineering.normalizer.CPUNormalizer": [[3, 2, 1, "", "run"]], "bardi.nlp_engineering.normalizer.Normalizer": [[3, 2, 1, "", "run"]], "bardi.nlp_engineering.post_processor": [[3, 1, 1, "", "CPUPostProcessor"], [3, 1, 1, "", "PostProcessor"]], "bardi.nlp_engineering.post_processor.CPUPostProcessor": [[3, 2, 1, "", "get_parameters"], [3, 2, 1, "", "run"]], "bardi.nlp_engineering.post_processor.PostProcessor": [[3, 2, 1, "", "run"]], "bardi.nlp_engineering.pre_tokenizer": [[3, 1, 1, "", "CPUPreTokenizer"], [3, 1, 1, "", "PreTokenizer"]], "bardi.nlp_engineering.pre_tokenizer.CPUPreTokenizer": [[3, 2, 1, "", "run"]], "bardi.nlp_engineering.pre_tokenizer.PreTokenizer": [[3, 2, 1, "", "run"]], "bardi.nlp_engineering.regex_library": [[4, 0, 0, "-", "pathology_report"], [4, 0, 0, "-", "regex_lib"], [4, 0, 0, "-", "regex_set"]], "bardi.nlp_engineering.regex_library.pathology_report": [[4, 1, 1, "", "PathologyReportRegexSet"]], "bardi.nlp_engineering.regex_library.regex_lib": [[4, 3, 1, "", "get_address_regex"], [4, 3, 1, "", "get_angle_brackets_regex"], [4, 3, 1, "", "get_cassette_name_regex"], [4, 3, 1, "", "get_cassettes_spacing_regex"], [4, 3, 1, "", "get_dash_digits_spacing_regex"], [4, 3, 1, "", "get_dates_regex"], [4, 3, 1, "", "get_decimal_segmented_numbers_regex"], [4, 3, 1, "", "get_digits_words_spacing_regex"], [4, 3, 1, "", "get_dimension_spacing_regex"], [4, 3, 1, "", "get_dimensions_regex"], [4, 3, 1, "", "get_duration_regex"], [4, 3, 1, "", "get_escape_code_regex"], [4, 3, 1, "", "get_fix_pluralization_regex"], [4, 3, 1, "", "get_large_digits_seq_regex"], [4, 3, 1, "", "get_large_float_seq_regex"], [4, 3, 1, "", "get_leading_digit_punctuation_regex"], [4, 3, 1, "", "get_leading_punctuation_regex"], [4, 3, 1, "", "get_letter_num_seq_regex"], [4, 3, 1, "", "get_literals_floats_spacing_regex"], [4, 3, 1, "", "get_math_spacing_regex"], [4, 3, 1, "", "get_measure_spacing_regex"], [4, 3, 1, "", "get_multiple_punct_regex"], [4, 3, 1, "", "get_percent_sign_regex"], [4, 3, 1, "", "get_phone_number_regex"], [4, 3, 1, "", "get_spaces_regex"], [4, 3, 1, "", "get_special_punct_regex"], [4, 3, 1, "", "get_specimen_regex"], [4, 3, 1, "", "get_time_regex"], [4, 3, 1, "", "get_trailing_punctuation_regex"], [4, 3, 1, "", "get_trunc_decimals_regex"], [4, 3, 1, "", "get_urls_regex"], [4, 3, 1, "", "get_whitespace_regex"], [4, 3, 1, "", "get_words_with_punct_spacing_regex"]], "bardi.nlp_engineering.regex_library.regex_set": [[4, 1, 1, "", "RegexSet"], [4, 1, 1, "", "RegexSubPair"]], "bardi.nlp_engineering.regex_library.regex_set.RegexSet": [[4, 2, 1, "", "get_regex_set"]], "bardi.nlp_engineering.regex_library.regex_set.RegexSubPair": [[4, 4, 1, "", "regex_str"], [4, 4, 1, "", "sub_str"]], "bardi.nlp_engineering.splitter": [[3, 1, 1, "", "CPUSplitter"], [3, 1, 1, "", "MapSplit"], [3, 1, 1, "", "NewSplit"], [3, 1, 1, "", "Splitter"]], "bardi.nlp_engineering.splitter.CPUSplitter": [[3, 2, 1, "", "run"]], "bardi.nlp_engineering.splitter.MapSplit": [[3, 4, 1, "", "split_mapping"], [3, 4, 1, "", "unique_record_cols"]], "bardi.nlp_engineering.splitter.NewSplit": [[3, 4, 1, "", "group_cols"], [3, 4, 1, "", "label_cols"], [3, 4, 1, "", "random_seed"], [3, 4, 1, "", "split_proportions"], [3, 4, 1, "", "unique_record_cols"]], "bardi.nlp_engineering.splitter.Splitter": [[3, 2, 1, "", "run"]], "bardi.nlp_engineering.utils": [[5, 0, 0, "-", "validations"]], "bardi.nlp_engineering.utils.validations": [[5, 3, 1, "", "validate_list_str_cols"], [5, 3, 1, "", "validate_pyarrow_table"], [5, 3, 1, "", "validate_str_cols"]], "bardi.pipeline": [[0, 1, 1, "", "DataWriteConfig"], [0, 1, 1, "", "Pipeline"], [0, 1, 1, "", "Step"]], "bardi.pipeline.DataWriteConfig": [[0, 4, 1, "", "data_format"], [0, 4, 1, "", "data_format_args"]], "bardi.pipeline.Pipeline": [[0, 2, 1, "", "add_step"], [0, 2, 1, "", "get_parameters"], [0, 2, 1, "", "run_pipeline"]], "bardi.pipeline.Step": [[0, 2, 1, "", "get_parameters"], [0, 2, 1, "", "run"], [0, 2, 1, "", "set_write_config"], [0, 2, 1, "", "write_artifacts"], [0, 2, 1, "", "write_data"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"]}, "titleterms": {"bardi": [0, 1, 2, 3, 4, 5, 7, 8], "packag": [0, 1, 2, 3, 4, 5], "subpackag": [0, 1, 3], "submodul": [0, 1, 2, 3, 4, 5], "pipelin": 0, "modul": [0, 1, 2, 3, 4, 5], "content": [0, 1, 2, 3, 4, 5, 7], "data": [1, 2], "data_handl": 1, "util": [2, 5], "pyarrow_util": 2, "nlp_engin": [3, 4, 5], "embedding_gener": 3, "label_processor": 3, "normal": 3, "post_processor": 3, "pre_token": 3, "splitter": 3, "regex_librari": 4, "pathology_report": 4, "regex_lib": 4, "regex_set": 4, "valid": 5, "exampl": [6, 7], "short": 6, "tutori": [6, 7], "welcom": 7, "": 7, "document": 7, "instal": 7, "kei": 7, "featur": 7, "script": 7, "indic": 7, "tabl": 7}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"bardi package": [[0, "bardi-package"]], "Subpackages": [[0, "subpackages"], [1, "subpackages"], [3, "subpackages"]], "Submodules": [[0, "submodules"], [1, "submodules"], [2, "submodules"], [3, "submodules"], [4, "submodules"], [5, "submodules"]], "bardi.pipeline module": [[0, "module-bardi.pipeline"]], "Module contents": [[0, "module-bardi"], [1, "module-bardi.data"], [2, "module-bardi.data.utils"], [3, "module-bardi.nlp_engineering"], [4, "module-bardi.nlp_engineering.regex_library"], [5, "module-bardi.nlp_engineering.utils"]], "bardi.data package": [[1, "bardi-data-package"]], "bardi.data.data_handlers module": [[1, "module-bardi.data.data_handlers"]], "bardi.data.utils package": [[2, "bardi-data-utils-package"]], "bardi.data.utils.pyarrow_utils module": [[2, "module-bardi.data.utils.pyarrow_utils"]], "bardi.nlp_engineering package": [[3, "bardi-nlp-engineering-package"]], "bardi.nlp_engineering.embedding_generator module": [[3, "module-bardi.nlp_engineering.embedding_generator"]], "bardi.nlp_engineering.label_processor module": [[3, "module-bardi.nlp_engineering.label_processor"]], "bardi.nlp_engineering.normalizer module": [[3, "module-bardi.nlp_engineering.normalizer"]], "bardi.nlp_engineering.post_processor module": [[3, "module-bardi.nlp_engineering.post_processor"]], "bardi.nlp_engineering.pre_tokenizer module": [[3, "module-bardi.nlp_engineering.pre_tokenizer"]], "bardi.nlp_engineering.splitter module": [[3, "module-bardi.nlp_engineering.splitter"]], "bardi.nlp_engineering.regex_library package": [[4, "bardi-nlp-engineering-regex-library-package"]], "bardi.nlp_engineering.regex_library.pathology_report module": [[4, "module-bardi.nlp_engineering.regex_library.pathology_report"]], "bardi.nlp_engineering.regex_library.regex_lib module": [[4, "module-bardi.nlp_engineering.regex_library.regex_lib"]], "bardi.nlp_engineering.regex_library.regex_set module": [[4, "module-bardi.nlp_engineering.regex_library.regex_set"]], "bardi.nlp_engineering.utils package": [[5, "bardi-nlp-engineering-utils-package"]], "bardi.nlp_engineering.utils.validations module": [[5, "module-bardi.nlp_engineering.utils.validations"]], "Examples": [[6, "examples"]], "Short Tutorial": [[6, "short-tutorial"]], "Welcome to bardi\u2019s documentation!": [[7, "welcome-to-bardi-s-documentation"]], "Installation": [[7, "installation"]], "Key Features": [[7, "key-features"]], "Contents:": [[7, null]], "Tutorial and Example Scripts": [[7, "tutorial-and-example-scripts"]], "Indices and tables": [[7, "indices-and-tables"]], "bardi": [[8, "bardi"]]}, "indexentries": {"datawriteconfig (class in bardi.pipeline)": [[0, "bardi.pipeline.DataWriteConfig"]], "pipeline (class in bardi.pipeline)": [[0, "bardi.pipeline.Pipeline"]], "step (class in bardi.pipeline)": [[0, "bardi.pipeline.Step"]], "add_step() (bardi.pipeline.pipeline method)": [[0, "bardi.pipeline.Pipeline.add_step"]], "bardi": [[0, "module-bardi"]], "bardi.pipeline": [[0, "module-bardi.pipeline"]], "data_format (bardi.pipeline.datawriteconfig attribute)": [[0, "bardi.pipeline.DataWriteConfig.data_format"]], "data_format_args (bardi.pipeline.datawriteconfig attribute)": [[0, "bardi.pipeline.DataWriteConfig.data_format_args"]], "get_parameters() (bardi.pipeline.pipeline method)": [[0, "bardi.pipeline.Pipeline.get_parameters"]], "get_parameters() (bardi.pipeline.step method)": [[0, "bardi.pipeline.Step.get_parameters"]], "module": [[0, "module-bardi"], [0, "module-bardi.pipeline"], [1, "module-bardi.data"], [1, "module-bardi.data.data_handlers"], [2, "module-bardi.data.utils"], [2, "module-bardi.data.utils.pyarrow_utils"], [3, "module-bardi.nlp_engineering"], [3, "module-bardi.nlp_engineering.embedding_generator"], [3, "module-bardi.nlp_engineering.label_processor"], [3, "module-bardi.nlp_engineering.normalizer"], [3, "module-bardi.nlp_engineering.post_processor"], [3, "module-bardi.nlp_engineering.pre_tokenizer"], [3, "module-bardi.nlp_engineering.splitter"], [4, "module-bardi.nlp_engineering.regex_library"], [4, "module-bardi.nlp_engineering.regex_library.pathology_report"], [4, "module-bardi.nlp_engineering.regex_library.regex_lib"], [4, "module-bardi.nlp_engineering.regex_library.regex_set"], [5, "module-bardi.nlp_engineering.utils"], [5, "module-bardi.nlp_engineering.utils.validations"]], "run() (bardi.pipeline.step method)": [[0, "bardi.pipeline.Step.run"]], "run_pipeline() (bardi.pipeline.pipeline method)": [[0, "bardi.pipeline.Pipeline.run_pipeline"]], "set_write_config() (bardi.pipeline.step method)": [[0, "bardi.pipeline.Step.set_write_config"]], "write_artifacts() (bardi.pipeline.step method)": [[0, "bardi.pipeline.Step.write_artifacts"]], "write_data() (bardi.pipeline.step method)": [[0, "bardi.pipeline.Step.write_data"]], "dataset (class in bardi.data.data_handlers)": [[1, "bardi.data.data_handlers.Dataset"]], "bardi.data": [[1, "module-bardi.data"]], "bardi.data.data_handlers": [[1, "module-bardi.data.data_handlers"]], "from_duckdb() (in module bardi.data.data_handlers)": [[1, "bardi.data.data_handlers.from_duckdb"]], "from_file() (in module bardi.data.data_handlers)": [[1, "bardi.data.data_handlers.from_file"]], "from_json() (in module bardi.data.data_handlers)": [[1, "bardi.data.data_handlers.from_json"]], "from_pandas() (in module bardi.data.data_handlers)": [[1, "bardi.data.data_handlers.from_pandas"]], "from_pyarrow() (in module bardi.data.data_handlers)": [[1, "bardi.data.data_handlers.from_pyarrow"]], "get_parameters() (bardi.data.data_handlers.dataset method)": [[1, "bardi.data.data_handlers.Dataset.get_parameters"]], "to_pandas() (in module bardi.data.data_handlers)": [[1, "bardi.data.data_handlers.to_pandas"]], "to_polars() (in module bardi.data.data_handlers)": [[1, "bardi.data.data_handlers.to_polars"]], "write_file() (in module bardi.data.data_handlers)": [[1, "bardi.data.data_handlers.write_file"]], "bardi.data.utils": [[2, "module-bardi.data.utils"]], "bardi.data.utils.pyarrow_utils": [[2, "module-bardi.data.utils.pyarrow_utils"]], "chunk_pyarrow_table() (in module bardi.data.utils.pyarrow_utils)": [[2, "bardi.data.utils.pyarrow_utils.chunk_pyarrow_table"]], "cpuembeddinggenerator (class in bardi.nlp_engineering.embedding_generator)": [[3, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator"]], "cpulabelprocessor (class in bardi.nlp_engineering.label_processor)": [[3, "bardi.nlp_engineering.label_processor.CPULabelProcessor"]], "cpunormalizer (class in bardi.nlp_engineering.normalizer)": [[3, "bardi.nlp_engineering.normalizer.CPUNormalizer"]], "cpupostprocessor (class in bardi.nlp_engineering.post_processor)": [[3, "bardi.nlp_engineering.post_processor.CPUPostProcessor"]], "cpupretokenizer (class in bardi.nlp_engineering.pre_tokenizer)": [[3, "bardi.nlp_engineering.pre_tokenizer.CPUPreTokenizer"]], "cpusplitter (class in bardi.nlp_engineering.splitter)": [[3, "bardi.nlp_engineering.splitter.CPUSplitter"]], "embeddinggenerator (class in bardi.nlp_engineering.embedding_generator)": [[3, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator"]], "embeddinggeneratorartifactswriteconfig (class in bardi.nlp_engineering.embedding_generator)": [[3, "bardi.nlp_engineering.embedding_generator.EmbeddingGeneratorArtifactsWriteConfig"]], "labelprocessor (class in bardi.nlp_engineering.label_processor)": [[3, "bardi.nlp_engineering.label_processor.LabelProcessor"]], "labelprocessorartifactswriteconfig (class in bardi.nlp_engineering.label_processor)": [[3, "bardi.nlp_engineering.label_processor.LabelProcessorArtifactsWriteConfig"]], "mapsplit (class in bardi.nlp_engineering.splitter)": [[3, "bardi.nlp_engineering.splitter.MapSplit"]], "newsplit (class in bardi.nlp_engineering.splitter)": [[3, "bardi.nlp_engineering.splitter.NewSplit"]], "normalizer (class in bardi.nlp_engineering.normalizer)": [[3, "bardi.nlp_engineering.normalizer.Normalizer"]], "postprocessor (class in bardi.nlp_engineering.post_processor)": [[3, "bardi.nlp_engineering.post_processor.PostProcessor"]], "pretokenizer (class in bardi.nlp_engineering.pre_tokenizer)": [[3, "bardi.nlp_engineering.pre_tokenizer.PreTokenizer"]], "splitter (class in bardi.nlp_engineering.splitter)": [[3, "bardi.nlp_engineering.splitter.Splitter"]], "bardi.nlp_engineering": [[3, "module-bardi.nlp_engineering"]], "bardi.nlp_engineering.embedding_generator": [[3, "module-bardi.nlp_engineering.embedding_generator"]], "bardi.nlp_engineering.label_processor": [[3, "module-bardi.nlp_engineering.label_processor"]], "bardi.nlp_engineering.normalizer": [[3, "module-bardi.nlp_engineering.normalizer"]], "bardi.nlp_engineering.post_processor": [[3, "module-bardi.nlp_engineering.post_processor"]], "bardi.nlp_engineering.pre_tokenizer": [[3, "module-bardi.nlp_engineering.pre_tokenizer"]], "bardi.nlp_engineering.splitter": [[3, "module-bardi.nlp_engineering.splitter"]], "embedding_matrix_format (bardi.nlp_engineering.embedding_generator.embeddinggeneratorartifactswriteconfig attribute)": [[3, "bardi.nlp_engineering.embedding_generator.EmbeddingGeneratorArtifactsWriteConfig.embedding_matrix_format"]], "embedding_matrix_format_args (bardi.nlp_engineering.embedding_generator.embeddinggeneratorartifactswriteconfig attribute)": [[3, "bardi.nlp_engineering.embedding_generator.EmbeddingGeneratorArtifactsWriteConfig.embedding_matrix_format_args"]], "get_parameters() (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator method)": [[3, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.get_parameters"]], "get_parameters() (bardi.nlp_engineering.label_processor.cpulabelprocessor method)": [[3, "bardi.nlp_engineering.label_processor.CPULabelProcessor.get_parameters"]], "get_parameters() (bardi.nlp_engineering.post_processor.cpupostprocessor method)": [[3, "bardi.nlp_engineering.post_processor.CPUPostProcessor.get_parameters"]], "group_cols (bardi.nlp_engineering.splitter.newsplit attribute)": [[3, "bardi.nlp_engineering.splitter.NewSplit.group_cols"]], "id_to_label_args (bardi.nlp_engineering.label_processor.labelprocessorartifactswriteconfig attribute)": [[3, "bardi.nlp_engineering.label_processor.LabelProcessorArtifactsWriteConfig.id_to_label_args"]], "id_to_label_format (bardi.nlp_engineering.label_processor.labelprocessorartifactswriteconfig attribute)": [[3, "bardi.nlp_engineering.label_processor.LabelProcessorArtifactsWriteConfig.id_to_label_format"]], "label_cols (bardi.nlp_engineering.splitter.newsplit attribute)": [[3, "bardi.nlp_engineering.splitter.NewSplit.label_cols"]], "random_seed (bardi.nlp_engineering.splitter.newsplit attribute)": [[3, "bardi.nlp_engineering.splitter.NewSplit.random_seed"]], "run() (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator method)": [[3, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.run"]], "run() (bardi.nlp_engineering.embedding_generator.embeddinggenerator method)": [[3, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.run"]], "run() (bardi.nlp_engineering.label_processor.cpulabelprocessor method)": [[3, "bardi.nlp_engineering.label_processor.CPULabelProcessor.run"]], "run() (bardi.nlp_engineering.label_processor.labelprocessor method)": [[3, "bardi.nlp_engineering.label_processor.LabelProcessor.run"]], "run() (bardi.nlp_engineering.normalizer.cpunormalizer method)": [[3, "bardi.nlp_engineering.normalizer.CPUNormalizer.run"]], "run() (bardi.nlp_engineering.normalizer.normalizer method)": [[3, "bardi.nlp_engineering.normalizer.Normalizer.run"]], "run() (bardi.nlp_engineering.post_processor.cpupostprocessor method)": [[3, "bardi.nlp_engineering.post_processor.CPUPostProcessor.run"]], "run() (bardi.nlp_engineering.post_processor.postprocessor method)": [[3, "bardi.nlp_engineering.post_processor.PostProcessor.run"]], "run() (bardi.nlp_engineering.pre_tokenizer.cpupretokenizer method)": [[3, "bardi.nlp_engineering.pre_tokenizer.CPUPreTokenizer.run"]], "run() (bardi.nlp_engineering.pre_tokenizer.pretokenizer method)": [[3, "bardi.nlp_engineering.pre_tokenizer.PreTokenizer.run"]], "run() (bardi.nlp_engineering.splitter.cpusplitter method)": [[3, "bardi.nlp_engineering.splitter.CPUSplitter.run"]], "run() (bardi.nlp_engineering.splitter.splitter method)": [[3, "bardi.nlp_engineering.splitter.Splitter.run"]], "set_write_config() (bardi.nlp_engineering.embedding_generator.embeddinggenerator method)": [[3, "bardi.nlp_engineering.embedding_generator.EmbeddingGenerator.set_write_config"]], "set_write_config() (bardi.nlp_engineering.label_processor.labelprocessor method)": [[3, "bardi.nlp_engineering.label_processor.LabelProcessor.set_write_config"]], "split_mapping (bardi.nlp_engineering.splitter.mapsplit attribute)": [[3, "bardi.nlp_engineering.splitter.MapSplit.split_mapping"]], "split_proportions (bardi.nlp_engineering.splitter.newsplit attribute)": [[3, "bardi.nlp_engineering.splitter.NewSplit.split_proportions"]], "unique_record_cols (bardi.nlp_engineering.splitter.mapsplit attribute)": [[3, "bardi.nlp_engineering.splitter.MapSplit.unique_record_cols"]], "unique_record_cols (bardi.nlp_engineering.splitter.newsplit attribute)": [[3, "bardi.nlp_engineering.splitter.NewSplit.unique_record_cols"]], "vocab_format (bardi.nlp_engineering.embedding_generator.embeddinggeneratorartifactswriteconfig attribute)": [[3, "bardi.nlp_engineering.embedding_generator.EmbeddingGeneratorArtifactsWriteConfig.vocab_format"]], "vocab_format_args (bardi.nlp_engineering.embedding_generator.embeddinggeneratorartifactswriteconfig attribute)": [[3, "bardi.nlp_engineering.embedding_generator.EmbeddingGeneratorArtifactsWriteConfig.vocab_format_args"]], "write_artifacts() (bardi.nlp_engineering.embedding_generator.cpuembeddinggenerator method)": [[3, "bardi.nlp_engineering.embedding_generator.CPUEmbeddingGenerator.write_artifacts"]], "write_artifacts() (bardi.nlp_engineering.label_processor.cpulabelprocessor method)": [[3, "bardi.nlp_engineering.label_processor.CPULabelProcessor.write_artifacts"]], "pathologyreportregexset (class in bardi.nlp_engineering.regex_library.pathology_report)": [[4, "bardi.nlp_engineering.regex_library.pathology_report.PathologyReportRegexSet"]], "regexset (class in bardi.nlp_engineering.regex_library.regex_set)": [[4, "bardi.nlp_engineering.regex_library.regex_set.RegexSet"]], "regexsubpair (class in bardi.nlp_engineering.regex_library.regex_set)": [[4, "bardi.nlp_engineering.regex_library.regex_set.RegexSubPair"]], "bardi.nlp_engineering.regex_library": [[4, "module-bardi.nlp_engineering.regex_library"]], "bardi.nlp_engineering.regex_library.pathology_report": [[4, "module-bardi.nlp_engineering.regex_library.pathology_report"]], "bardi.nlp_engineering.regex_library.regex_lib": [[4, "module-bardi.nlp_engineering.regex_library.regex_lib"]], "bardi.nlp_engineering.regex_library.regex_set": [[4, "module-bardi.nlp_engineering.regex_library.regex_set"]], "get_address_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_address_regex"]], "get_angle_brackets_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_angle_brackets_regex"]], "get_cassette_name_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_cassette_name_regex"]], "get_cassettes_spacing_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_cassettes_spacing_regex"]], "get_dash_digits_spacing_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_dash_digits_spacing_regex"]], "get_dates_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_dates_regex"]], "get_decimal_segmented_numbers_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_decimal_segmented_numbers_regex"]], "get_digits_words_spacing_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_digits_words_spacing_regex"]], "get_dimension_spacing_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_dimension_spacing_regex"]], "get_dimensions_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_dimensions_regex"]], "get_duration_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_duration_regex"]], "get_escape_code_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_escape_code_regex"]], "get_fix_pluralization_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_fix_pluralization_regex"]], "get_large_digits_seq_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_large_digits_seq_regex"]], "get_large_float_seq_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_large_float_seq_regex"]], "get_leading_digit_punctuation_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_leading_digit_punctuation_regex"]], "get_leading_punctuation_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_leading_punctuation_regex"]], "get_letter_num_seq_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_letter_num_seq_regex"]], "get_literals_floats_spacing_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_literals_floats_spacing_regex"]], "get_math_spacing_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_math_spacing_regex"]], "get_measure_spacing_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_measure_spacing_regex"]], "get_multiple_punct_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_multiple_punct_regex"]], "get_percent_sign_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_percent_sign_regex"]], "get_phone_number_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_phone_number_regex"]], "get_regex_set() (bardi.nlp_engineering.regex_library.regex_set.regexset method)": [[4, "bardi.nlp_engineering.regex_library.regex_set.RegexSet.get_regex_set"]], "get_spaces_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_spaces_regex"]], "get_special_punct_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_special_punct_regex"]], "get_specimen_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_specimen_regex"]], "get_time_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_time_regex"]], "get_trailing_punctuation_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_trailing_punctuation_regex"]], "get_trunc_decimals_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_trunc_decimals_regex"]], "get_urls_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_urls_regex"]], "get_whitespace_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_whitespace_regex"]], "get_words_with_punct_spacing_regex() (in module bardi.nlp_engineering.regex_library.regex_lib)": [[4, "bardi.nlp_engineering.regex_library.regex_lib.get_words_with_punct_spacing_regex"]], "regex_str (bardi.nlp_engineering.regex_library.regex_set.regexsubpair attribute)": [[4, "bardi.nlp_engineering.regex_library.regex_set.RegexSubPair.regex_str"]], "sub_str (bardi.nlp_engineering.regex_library.regex_set.regexsubpair attribute)": [[4, "bardi.nlp_engineering.regex_library.regex_set.RegexSubPair.sub_str"]], "bardi.nlp_engineering.utils": [[5, "module-bardi.nlp_engineering.utils"]], "bardi.nlp_engineering.utils.validations": [[5, "module-bardi.nlp_engineering.utils.validations"]], "validate_list_str_cols() (in module bardi.nlp_engineering.utils.validations)": [[5, "bardi.nlp_engineering.utils.validations.validate_list_str_cols"]], "validate_pyarrow_table() (in module bardi.nlp_engineering.utils.validations)": [[5, "bardi.nlp_engineering.utils.validations.validate_pyarrow_table"]], "validate_str_cols() (in module bardi.nlp_engineering.utils.validations)": [[5, "bardi.nlp_engineering.utils.validations.validate_str_cols"]]}})